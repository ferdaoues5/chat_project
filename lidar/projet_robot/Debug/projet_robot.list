
projet_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e4c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007f0c  08007f0c  00017f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008064  08008064  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008064  08008064  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008064  08008064  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800806c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  20000074  080080e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c8  080080e0  000214c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000171c5  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cf6  00000000  00000000  000372a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0003afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001053  00000000  00000000  0003c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198b3  00000000  00000000  0003d50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab5f  00000000  00000000  00056dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098467  00000000  00000000  0007191d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051e8  00000000  00000000  00109d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0010ef6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007ef4 	.word	0x08007ef4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08007ef4 	.word	0x08007ef4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b087      	sub	sp, #28
 800040c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4a08      	ldr	r2, [pc, #32]	; (8000434 <MX_FREERTOS_Init+0x2c>)
 8000412:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000414:	c313      	stmia	r3!, {r0, r1, r4}
 8000416:	ca03      	ldmia	r2!, {r0, r1}
 8000418:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2100      	movs	r1, #0
 800041e:	0018      	movs	r0, r3
 8000420:	f004 ffb7 	bl	8005392 <osThreadCreate>
 8000424:	0002      	movs	r2, r0
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <MX_FREERTOS_Init+0x30>)
 8000428:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b007      	add	sp, #28
 8000430:	bd90      	pop	{r4, r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	08007f18 	.word	0x08007f18
 8000438:	20000090 	.word	0x20000090

0800043c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000444:	2001      	movs	r0, #1
 8000446:	f004 ffcc 	bl	80053e2 <osDelay>
 800044a:	e7fb      	b.n	8000444 <StartDefaultTask+0x8>

0800044c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_DMA_Init+0x38>)
 8000454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_DMA_Init+0x38>)
 8000458:	2101      	movs	r1, #1
 800045a:	430a      	orrs	r2, r1
 800045c:	639a      	str	r2, [r3, #56]	; 0x38
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_DMA_Init+0x38>)
 8000460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000462:	2201      	movs	r2, #1
 8000464:	4013      	ands	r3, r2
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2103      	movs	r1, #3
 800046e:	2009      	movs	r0, #9
 8000470:	f001 f8fc 	bl	800166c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000474:	2009      	movs	r0, #9
 8000476:	f001 f90e 	bl	8001696 <HAL_NVIC_EnableIRQ>

}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	40021000 	.word	0x40021000

08000488 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b08b      	sub	sp, #44	; 0x2c
 800048c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	2414      	movs	r4, #20
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	2314      	movs	r3, #20
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f006 ff7f 	bl	800739c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049e:	4b5a      	ldr	r3, [pc, #360]	; (8000608 <MX_GPIO_Init+0x180>)
 80004a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004a2:	4b59      	ldr	r3, [pc, #356]	; (8000608 <MX_GPIO_Init+0x180>)
 80004a4:	2104      	movs	r1, #4
 80004a6:	430a      	orrs	r2, r1
 80004a8:	635a      	str	r2, [r3, #52]	; 0x34
 80004aa:	4b57      	ldr	r3, [pc, #348]	; (8000608 <MX_GPIO_Init+0x180>)
 80004ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ae:	2204      	movs	r2, #4
 80004b0:	4013      	ands	r3, r2
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b6:	4b54      	ldr	r3, [pc, #336]	; (8000608 <MX_GPIO_Init+0x180>)
 80004b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ba:	4b53      	ldr	r3, [pc, #332]	; (8000608 <MX_GPIO_Init+0x180>)
 80004bc:	2120      	movs	r1, #32
 80004be:	430a      	orrs	r2, r1
 80004c0:	635a      	str	r2, [r3, #52]	; 0x34
 80004c2:	4b51      	ldr	r3, [pc, #324]	; (8000608 <MX_GPIO_Init+0x180>)
 80004c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c6:	2220      	movs	r2, #32
 80004c8:	4013      	ands	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b4e      	ldr	r3, [pc, #312]	; (8000608 <MX_GPIO_Init+0x180>)
 80004d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004d2:	4b4d      	ldr	r3, [pc, #308]	; (8000608 <MX_GPIO_Init+0x180>)
 80004d4:	2101      	movs	r1, #1
 80004d6:	430a      	orrs	r2, r1
 80004d8:	635a      	str	r2, [r3, #52]	; 0x34
 80004da:	4b4b      	ldr	r3, [pc, #300]	; (8000608 <MX_GPIO_Init+0x180>)
 80004dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004de:	2201      	movs	r2, #1
 80004e0:	4013      	ands	r3, r2
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e6:	4b48      	ldr	r3, [pc, #288]	; (8000608 <MX_GPIO_Init+0x180>)
 80004e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ea:	4b47      	ldr	r3, [pc, #284]	; (8000608 <MX_GPIO_Init+0x180>)
 80004ec:	2102      	movs	r1, #2
 80004ee:	430a      	orrs	r2, r1
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
 80004f2:	4b45      	ldr	r3, [pc, #276]	; (8000608 <MX_GPIO_Init+0x180>)
 80004f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004f6:	2202      	movs	r2, #2
 80004f8:	4013      	ands	r3, r2
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fe:	4b42      	ldr	r3, [pc, #264]	; (8000608 <MX_GPIO_Init+0x180>)
 8000500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000502:	4b41      	ldr	r3, [pc, #260]	; (8000608 <MX_GPIO_Init+0x180>)
 8000504:	2108      	movs	r1, #8
 8000506:	430a      	orrs	r2, r1
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
 800050a:	4b3f      	ldr	r3, [pc, #252]	; (8000608 <MX_GPIO_Init+0x180>)
 800050c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050e:	2208      	movs	r2, #8
 8000510:	4013      	ands	r3, r2
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, souris_led_Pin|chat_led_Pin, GPIO_PIN_RESET);
 8000516:	23c0      	movs	r3, #192	; 0xc0
 8000518:	019b      	lsls	r3, r3, #6
 800051a:	483c      	ldr	r0, [pc, #240]	; (800060c <MX_GPIO_Init+0x184>)
 800051c:	2200      	movs	r2, #0
 800051e:	0019      	movs	r1, r3
 8000520:	f001 fd58 	bl	8001fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DEV_EN_Lidar_Pin|M_EN_Lidar_Pin, GPIO_PIN_RESET);
 8000524:	4b3a      	ldr	r3, [pc, #232]	; (8000610 <MX_GPIO_Init+0x188>)
 8000526:	2200      	movs	r2, #0
 8000528:	210c      	movs	r1, #12
 800052a:	0018      	movs	r0, r3
 800052c:	f001 fd52 	bl	8001fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = souris_led_Pin|chat_led_Pin;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	22c0      	movs	r2, #192	; 0xc0
 8000534:	0192      	lsls	r2, r2, #6
 8000536:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2201      	movs	r2, #1
 800053c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054a:	193b      	adds	r3, r7, r4
 800054c:	4a2f      	ldr	r2, [pc, #188]	; (800060c <MX_GPIO_Init+0x184>)
 800054e:	0019      	movs	r1, r3
 8000550:	0010      	movs	r0, r2
 8000552:	f001 fbdb 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = bumper_in2_Pin;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2208      	movs	r2, #8
 800055a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2200      	movs	r2, #0
 8000560:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(bumper_in2_GPIO_Port, &GPIO_InitStruct);
 8000568:	193b      	adds	r3, r7, r4
 800056a:	4a28      	ldr	r2, [pc, #160]	; (800060c <MX_GPIO_Init+0x184>)
 800056c:	0019      	movs	r1, r3
 800056e:	0010      	movs	r0, r2
 8000570:	f001 fbcc 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = capteur_bord_1_Pin|bumper_in3_Pin;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2203      	movs	r2, #3
 8000578:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2200      	movs	r2, #0
 800057e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	193b      	adds	r3, r7, r4
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000586:	193a      	adds	r2, r7, r4
 8000588:	23a0      	movs	r3, #160	; 0xa0
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f001 fbbc 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = bumper_in4_Pin;
 8000594:	0021      	movs	r1, r4
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2280      	movs	r2, #128	; 0x80
 800059a:	0192      	lsls	r2, r2, #6
 800059c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059e:	000c      	movs	r4, r1
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(bumper_in4_GPIO_Port, &GPIO_InitStruct);
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	4a19      	ldr	r2, [pc, #100]	; (8000614 <MX_GPIO_Init+0x18c>)
 80005b0:	0019      	movs	r1, r3
 80005b2:	0010      	movs	r0, r2
 80005b4:	f001 fbaa 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DEV_EN_Lidar_Pin|M_EN_Lidar_Pin;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	220c      	movs	r2, #12
 80005bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2201      	movs	r2, #1
 80005c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <MX_GPIO_Init+0x188>)
 80005d4:	0019      	movs	r1, r3
 80005d6:	0010      	movs	r0, r2
 80005d8:	f001 fb98 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = bumper_in1_Pin;
 80005dc:	0021      	movs	r1, r4
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	00d2      	lsls	r2, r2, #3
 80005e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2288      	movs	r2, #136	; 0x88
 80005ea:	0352      	lsls	r2, r2, #13
 80005ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(bumper_in1_GPIO_Port, &GPIO_InitStruct);
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <MX_GPIO_Init+0x184>)
 80005f8:	0019      	movs	r1, r3
 80005fa:	0010      	movs	r0, r2
 80005fc:	f001 fb86 	bl	8001d0c <HAL_GPIO_Init>

}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b00b      	add	sp, #44	; 0x2c
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	50000800 	.word	0x50000800
 8000610:	50000c00 	.word	0x50000c00
 8000614:	50000400 	.word	0x50000400

08000618 <HAL_UART_RxHalfCpltCallback>:
SemaphoreHandle_t sem_Lidar_half_cplt;
SemaphoreHandle_t sem_Lidar_cplt;

//executé quand buffer rempli à moitié. Quand c'est le cas, commencer à traiter données
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	//printf("ha\r\n");
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(sem_Lidar_half_cplt, &xHigherPriorityTaskWoken);
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_UART_RxHalfCpltCallback+0x34>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	220c      	movs	r2, #12
 800062a:	18ba      	adds	r2, r7, r2
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f005 f8fc 	bl	800582c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);//debloque tache qui était bloquée (lidarRecup)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <HAL_UART_RxHalfCpltCallback+0x2a>
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_UART_RxHalfCpltCallback+0x38>)
 800063c:	2280      	movs	r2, #128	; 0x80
 800063e:	0552      	lsls	r2, r2, #21
 8000640:	601a      	str	r2, [r3, #0]
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b004      	add	sp, #16
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	200003b4 	.word	0x200003b4
 8000650:	e000ed04 	.word	0xe000ed04

08000654 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	//printf("c\r\n");
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(sem_Lidar_cplt, &xHigherPriorityTaskWoken);
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_UART_RxCpltCallback+0x34>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	220c      	movs	r2, #12
 8000666:	18ba      	adds	r2, r7, r2
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f005 f8de 	bl	800582c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <HAL_UART_RxCpltCallback+0x2a>
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_UART_RxCpltCallback+0x38>)
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	0552      	lsls	r2, r2, #21
 800067c:	601a      	str	r2, [r3, #0]

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b004      	add	sp, #16
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	200003b8 	.word	0x200003b8
 800068c:	e000ed04 	.word	0xe000ed04

08000690 <lidarDataRecup>:


//rempli tableau de valeuras du LIDAR
void lidarDataRecup(void *used)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	int i,j=0,k;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
	int flag_start=0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //DEV_EN enabled
 80006a0:	4b6f      	ldr	r3, [pc, #444]	; (8000860 <lidarDataRecup+0x1d0>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	2104      	movs	r1, #4
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 fc94 	bl	8001fd4 <HAL_GPIO_WritePin>

	//Reset du LiDAR
	HAL_UART_Receive_DMA(&huart2,buffer_lidar,SIZE_BUFFER_LIDAR);
 80006ac:	23c8      	movs	r3, #200	; 0xc8
 80006ae:	005a      	lsls	r2, r3, #1
 80006b0:	496c      	ldr	r1, [pc, #432]	; (8000864 <lidarDataRecup+0x1d4>)
 80006b2:	4b6d      	ldr	r3, [pc, #436]	; (8000868 <lidarDataRecup+0x1d8>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f003 fb85 	bl	8003dc4 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart2, h_reset, 2, HAL_MAX_DELAY);
 80006ba:	2301      	movs	r3, #1
 80006bc:	425b      	negs	r3, r3
 80006be:	496b      	ldr	r1, [pc, #428]	; (800086c <lidarDataRecup+0x1dc>)
 80006c0:	4869      	ldr	r0, [pc, #420]	; (8000868 <lidarDataRecup+0x1d8>)
 80006c2:	2202      	movs	r2, #2
 80006c4:	f003 fae2 	bl	8003c8c <HAL_UART_Transmit>
	vTaskDelay(1000);
 80006c8:	23fa      	movs	r3, #250	; 0xfa
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f005 fc27 	bl	8005f20 <vTaskDelay>
	//printf("***rEsEt***\r\n");
	HAL_UART_Receive_DMA(&huart2,buffer_lidar,SIZE_BUFFER_LIDAR);
 80006d2:	23c8      	movs	r3, #200	; 0xc8
 80006d4:	005a      	lsls	r2, r3, #1
 80006d6:	4963      	ldr	r1, [pc, #396]	; (8000864 <lidarDataRecup+0x1d4>)
 80006d8:	4b63      	ldr	r3, [pc, #396]	; (8000868 <lidarDataRecup+0x1d8>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f003 fb72 	bl	8003dc4 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart2, c_scan, 2, 100);
 80006e0:	4963      	ldr	r1, [pc, #396]	; (8000870 <lidarDataRecup+0x1e0>)
 80006e2:	4861      	ldr	r0, [pc, #388]	; (8000868 <lidarDataRecup+0x1d8>)
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2202      	movs	r2, #2
 80006e8:	f003 fad0 	bl	8003c8c <HAL_UART_Transmit>
	vTaskDelay(1000);
 80006ec:	23fa      	movs	r3, #250	; 0xfa
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f005 fc15 	bl	8005f20 <vTaskDelay>

	//printf("*Lidar recup*\r\n");
	vSemaphoreCreateBinary(sem_Lidar_half_cplt);
 80006f6:	2203      	movs	r2, #3
 80006f8:	2100      	movs	r1, #0
 80006fa:	2001      	movs	r0, #1
 80006fc:	f004 ff82 	bl	8005604 <xQueueGenericCreate>
 8000700:	0002      	movs	r2, r0
 8000702:	4b5c      	ldr	r3, [pc, #368]	; (8000874 <lidarDataRecup+0x1e4>)
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	4b5b      	ldr	r3, [pc, #364]	; (8000874 <lidarDataRecup+0x1e4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d006      	beq.n	800071c <lidarDataRecup+0x8c>
 800070e:	4b59      	ldr	r3, [pc, #356]	; (8000874 <lidarDataRecup+0x1e4>)
 8000710:	6818      	ldr	r0, [r3, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	f004 ffc4 	bl	80056a4 <xQueueGenericSend>
	vSemaphoreCreateBinary(sem_Lidar_cplt);
 800071c:	2203      	movs	r2, #3
 800071e:	2100      	movs	r1, #0
 8000720:	2001      	movs	r0, #1
 8000722:	f004 ff6f 	bl	8005604 <xQueueGenericCreate>
 8000726:	0002      	movs	r2, r0
 8000728:	4b53      	ldr	r3, [pc, #332]	; (8000878 <lidarDataRecup+0x1e8>)
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	4b52      	ldr	r3, [pc, #328]	; (8000878 <lidarDataRecup+0x1e8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d006      	beq.n	8000742 <lidarDataRecup+0xb2>
 8000734:	4b50      	ldr	r3, [pc, #320]	; (8000878 <lidarDataRecup+0x1e8>)
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	f004 ffb1 	bl	80056a4 <xQueueGenericSend>
	//xHigherPriorityTaskWoken=pdFALSE;
	//HAL_Delay(100);

	for (;;)
	{
		xSemaphoreTake(sem_Lidar_half_cplt,portMAX_DELAY);
 8000742:	4b4c      	ldr	r3, [pc, #304]	; (8000874 <lidarDataRecup+0x1e4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2201      	movs	r2, #1
 8000748:	4252      	negs	r2, r2
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f005 f8d2 	bl	80058f6 <xQueueSemaphoreTake>

		for (i=0;i<(SIZE_BUFFER_LIDAR/2);i++)
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	e01c      	b.n	8000792 <lidarDataRecup+0x102>
		{
			if (buffer_lidar[i]==0xA5 && buffer_lidar[i+1]==0x5A)
 8000758:	4a42      	ldr	r2, [pc, #264]	; (8000864 <lidarDataRecup+0x1d4>)
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	18d3      	adds	r3, r2, r3
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2ba5      	cmp	r3, #165	; 0xa5
 8000762:	d113      	bne.n	800078c <lidarDataRecup+0xfc>
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	4a3e      	ldr	r2, [pc, #248]	; (8000864 <lidarDataRecup+0x1d4>)
 800076a:	5cd3      	ldrb	r3, [r2, r3]
 800076c:	2b5a      	cmp	r3, #90	; 0x5a
 800076e:	d10d      	bne.n	800078c <lidarDataRecup+0xfc>
			{
				flag_start=1;
 8000770:	2301      	movs	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
				tab_lidar[j]=buffer_lidar[i];
 8000774:	4a3b      	ldr	r2, [pc, #236]	; (8000864 <lidarDataRecup+0x1d4>)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	18d3      	adds	r3, r2, r3
 800077a:	7819      	ldrb	r1, [r3, #0]
 800077c:	4a3f      	ldr	r2, [pc, #252]	; (800087c <lidarDataRecup+0x1ec>)
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	18d3      	adds	r3, r2, r3
 8000782:	1c0a      	adds	r2, r1, #0
 8000784:	701a      	strb	r2, [r3, #0]
				j++;
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	3301      	adds	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
		for (i=0;i<(SIZE_BUFFER_LIDAR/2);i++)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	2bc7      	cmp	r3, #199	; 0xc7
 8000796:	dddf      	ble.n	8000758 <lidarDataRecup+0xc8>
		//mettre tâche qui cherche debut de trame 0xA5 et je sais plus
		//if (buffer_lidar[i-1]==0xA5 && buffer_lidar[i]==5A)
		//{
		//}

		xSemaphoreTake(sem_Lidar_cplt,portMAX_DELAY);
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <lidarDataRecup+0x1e8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2201      	movs	r2, #1
 800079e:	4252      	negs	r2, r2
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f005 f8a7 	bl	80058f6 <xQueueSemaphoreTake>

		for (i=(SIZE_BUFFER_LIDAR/2);i<SIZE_BUFFER_LIDAR;i++)
 80007a8:	23c8      	movs	r3, #200	; 0xc8
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	e03d      	b.n	800082a <lidarDataRecup+0x19a>
		{
			if (flag_start==1 && buffer_lidar[i]!=0xA5 && buffer_lidar[i+1]!=0x5A)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d118      	bne.n	80007e6 <lidarDataRecup+0x156>
 80007b4:	4a2b      	ldr	r2, [pc, #172]	; (8000864 <lidarDataRecup+0x1d4>)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2ba5      	cmp	r3, #165	; 0xa5
 80007be:	d012      	beq.n	80007e6 <lidarDataRecup+0x156>
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a27      	ldr	r2, [pc, #156]	; (8000864 <lidarDataRecup+0x1d4>)
 80007c6:	5cd3      	ldrb	r3, [r2, r3]
 80007c8:	2b5a      	cmp	r3, #90	; 0x5a
 80007ca:	d00c      	beq.n	80007e6 <lidarDataRecup+0x156>
			{
				tab_lidar[j]=buffer_lidar[i];
 80007cc:	4a25      	ldr	r2, [pc, #148]	; (8000864 <lidarDataRecup+0x1d4>)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	18d3      	adds	r3, r2, r3
 80007d2:	7819      	ldrb	r1, [r3, #0]
 80007d4:	4a29      	ldr	r2, [pc, #164]	; (800087c <lidarDataRecup+0x1ec>)
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	18d3      	adds	r3, r2, r3
 80007da:	1c0a      	adds	r2, r1, #0
 80007dc:	701a      	strb	r2, [r3, #0]
				j++;
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	3301      	adds	r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	e01e      	b.n	8000824 <lidarDataRecup+0x194>
			}

			else if (buffer_lidar[i]==0xA5 && buffer_lidar[i+1]==0x5A && flag_start==0)
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <lidarDataRecup+0x1d4>)
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	18d3      	adds	r3, r2, r3
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2ba5      	cmp	r3, #165	; 0xa5
 80007f0:	d118      	bne.n	8000824 <lidarDataRecup+0x194>
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <lidarDataRecup+0x1d4>)
 80007f8:	5cd3      	ldrb	r3, [r2, r3]
 80007fa:	2b5a      	cmp	r3, #90	; 0x5a
 80007fc:	d112      	bne.n	8000824 <lidarDataRecup+0x194>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10f      	bne.n	8000824 <lidarDataRecup+0x194>
			{
				flag_start=1;
 8000804:	2301      	movs	r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
				j=0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
				tab_lidar[i]=buffer_lidar[j];
 800080c:	4a15      	ldr	r2, [pc, #84]	; (8000864 <lidarDataRecup+0x1d4>)
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	18d3      	adds	r3, r2, r3
 8000812:	7819      	ldrb	r1, [r3, #0]
 8000814:	4a19      	ldr	r2, [pc, #100]	; (800087c <lidarDataRecup+0x1ec>)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	18d3      	adds	r3, r2, r3
 800081a:	1c0a      	adds	r2, r1, #0
 800081c:	701a      	strb	r2, [r3, #0]
				j++;
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	3301      	adds	r3, #1
 8000822:	613b      	str	r3, [r7, #16]
		for (i=(SIZE_BUFFER_LIDAR/2);i<SIZE_BUFFER_LIDAR;i++)
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	23c8      	movs	r3, #200	; 0xc8
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	429a      	cmp	r2, r3
 8000832:	dbbc      	blt.n	80007ae <lidarDataRecup+0x11e>
			}

		}

		for(i=0;i<SIZE_BUFFER_LIDAR;i++)
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e00c      	b.n	8000854 <lidarDataRecup+0x1c4>
		{
			printf("0x%02X\n\r",tab_lidar[i]);
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <lidarDataRecup+0x1ec>)
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	18d3      	adds	r3, r2, r3
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	001a      	movs	r2, r3
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <lidarDataRecup+0x1f0>)
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f006 fc45 	bl	80070d8 <iprintf>
		for(i=0;i<SIZE_BUFFER_LIDAR;i++)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3301      	adds	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	23c8      	movs	r3, #200	; 0xc8
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	429a      	cmp	r2, r3
 800085c:	dbed      	blt.n	800083a <lidarDataRecup+0x1aa>
		xSemaphoreTake(sem_Lidar_half_cplt,portMAX_DELAY);
 800085e:	e770      	b.n	8000742 <lidarDataRecup+0xb2>
 8000860:	50000c00 	.word	0x50000c00
 8000864:	20000094 	.word	0x20000094
 8000868:	2000053c 	.word	0x2000053c
 800086c:	20000000 	.word	0x20000000
 8000870:	20000004 	.word	0x20000004
 8000874:	200003b4 	.word	0x200003b4
 8000878:	200003b8 	.word	0x200003b8
 800087c:	20000224 	.word	0x20000224
 8000880:	08007f2c 	.word	0x08007f2c

08000884 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	//Attention sur carte nucleo, UART1 -> Lidar et UART2 ->Debug

	BaseType_t retLidarDataRecup;

	sem_Lidar_half_cplt = xSemaphoreCreateBinary(); //IMPORTANT!!!!!
 800088a:	2203      	movs	r2, #3
 800088c:	2100      	movs	r1, #0
 800088e:	2001      	movs	r0, #1
 8000890:	f004 feb8 	bl	8005604 <xQueueGenericCreate>
 8000894:	0002      	movs	r2, r0
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <main+0x8c>)
 8000898:	601a      	str	r2, [r3, #0]
	sem_Lidar_cplt = xSemaphoreCreateBinary();
 800089a:	2203      	movs	r2, #3
 800089c:	2100      	movs	r1, #0
 800089e:	2001      	movs	r0, #1
 80008a0:	f004 feb0 	bl	8005604 <xQueueGenericCreate>
 80008a4:	0002      	movs	r2, r0
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <main+0x90>)
 80008a8:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008aa:	f000 fdad 	bl	8001408 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008ae:	f000 f83d 	bl	800092c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008b2:	f7ff fde9 	bl	8000488 <MX_GPIO_Init>
	MX_DMA_Init();
 80008b6:	f7ff fdc9 	bl	800044c <MX_DMA_Init>
	MX_TIM17_Init();
 80008ba:	f000 fa6b 	bl	8000d94 <MX_TIM17_Init>
	MX_TIM1_Init();
 80008be:	f000 f99b 	bl	8000bf8 <MX_TIM1_Init>
	MX_TIM3_Init();
 80008c2:	f000 fa03 	bl	8000ccc <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80008c6:	f000 fc43 	bl	8001150 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 80008ca:	f000 fbef 	bl	80010ac <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	//TIM17->CCR1=850; PWM LIDAR
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <main+0x94>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f002 fa8c 	bl	8002df0 <HAL_TIM_PWM_Start>

	retLidarDataRecup = xTaskCreate(lidarDataRecup,"",STACK_DEPTH,NULL,3,&xHandleLidar);
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	005a      	lsls	r2, r3, #1
 80008dc:	490f      	ldr	r1, [pc, #60]	; (800091c <main+0x98>)
 80008de:	4810      	ldr	r0, [pc, #64]	; (8000920 <main+0x9c>)
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <main+0xa0>)
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	2303      	movs	r3, #3
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2300      	movs	r3, #0
 80008ea:	f005 f9eb 	bl	8005cc4 <xTaskCreate>
 80008ee:	0003      	movs	r3, r0
 80008f0:	607b      	str	r3, [r7, #4]
	if (retLidarDataRecup==pdPASS){
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d103      	bne.n	8000900 <main+0x7c>
		printf("****LIDAR****\r\n");
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <main+0xa4>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f006 fc52 	bl	80071a4 <puts>
	}

	vTaskStartScheduler();
 8000900:	f005 fb34 	bl	8005f6c <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000904:	f7ff fd80 	bl	8000408 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000908:	f004 fd3b 	bl	8005382 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800090c:	e7fe      	b.n	800090c <main+0x88>
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	200003b4 	.word	0x200003b4
 8000914:	200003b8 	.word	0x200003b8
 8000918:	2000045c 	.word	0x2000045c
 800091c:	08007f38 	.word	0x08007f38
 8000920:	08000691 	.word	0x08000691
 8000924:	200003bc 	.word	0x200003bc
 8000928:	08007f3c 	.word	0x08007f3c

0800092c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b093      	sub	sp, #76	; 0x4c
 8000930:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	2414      	movs	r4, #20
 8000934:	193b      	adds	r3, r7, r4
 8000936:	0018      	movs	r0, r3
 8000938:	2334      	movs	r3, #52	; 0x34
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f006 fd2d 	bl	800739c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	0018      	movs	r0, r3
 8000946:	2310      	movs	r3, #16
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f006 fd26 	bl	800739c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	0018      	movs	r0, r3
 8000956:	f001 fb5b 	bl	8002010 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	0252      	lsls	r2, r2, #9
 8000966:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000968:	0021      	movs	r1, r4
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2202      	movs	r2, #2
 800096e:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2203      	movs	r2, #3
 8000974:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 10;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	220a      	movs	r2, #10
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	0292      	lsls	r2, r2, #10
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	22c0      	movs	r2, #192	; 0xc0
 800098e:	05d2      	lsls	r2, r2, #23
 8000990:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000992:	187b      	adds	r3, r7, r1
 8000994:	0018      	movs	r0, r3
 8000996:	f001 fb87 	bl	80020a8 <HAL_RCC_OscConfig>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x76>
	{
		Error_Handler();
 800099e:	f000 f81a 	bl	80009d6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2207      	movs	r2, #7
 80009a6:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2202      	movs	r2, #2
 80009ac:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2100      	movs	r1, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 fe81 	bl	80026c8 <HAL_RCC_ClockConfig>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xa2>
	{
		Error_Handler();
 80009ca:	f000 f804 	bl	80009d6 <Error_Handler>
	}
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b013      	add	sp, #76	; 0x4c
 80009d4:	bd90      	pop	{r4, r7, pc}

080009d6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009da:	b672      	cpsid	i
}
 80009dc:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009de:	e7fe      	b.n	80009de <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_MspInit+0x50>)
 80009e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_MspInit+0x50>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	430a      	orrs	r2, r1
 80009f0:	641a      	str	r2, [r3, #64]	; 0x40
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_MspInit+0x50>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	2201      	movs	r2, #1
 80009f8:	4013      	ands	r3, r2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_MspInit+0x50>)
 8000a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_MspInit+0x50>)
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	0549      	lsls	r1, r1, #21
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_MspInit+0x50>)
 8000a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	055b      	lsls	r3, r3, #21
 8000a14:	4013      	ands	r3, r2
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	425b      	negs	r3, r3
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2103      	movs	r1, #3
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 fe22 	bl	800166c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021000 	.word	0x40021000

08000a34 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <__io_putchar+0x20>)
 8000a3e:	1d39      	adds	r1, r7, #4
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <__io_putchar+0x24>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	f003 f922 	bl	8003c8c <HAL_UART_Transmit>

  return ch;
 8000a48:	687b      	ldr	r3, [r7, #4]
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	0000ffff 	.word	0x0000ffff
 8000a58:	200004a8 	.word	0x200004a8

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 fd36 	bl	80014dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a70:	f005 fde6 	bl	8006640 <xTaskGetSchedulerState>
 8000a74:	0003      	movs	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d001      	beq.n	8000a7e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a7a:	f006 f88d 	bl	8006b98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <DMA1_Channel1_IRQHandler+0x14>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fffc 	bl	8001a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	200005d0 	.word	0x200005d0

08000a9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <USART2_IRQHandler+0x14>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f003 f9e6 	bl	8003e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	2000053c 	.word	0x2000053c

08000ab4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e00a      	b.n	8000adc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ac6:	e000      	b.n	8000aca <_read+0x16>
 8000ac8:	bf00      	nop
 8000aca:	0001      	movs	r1, r0
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	b2ca      	uxtb	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf0      	blt.n	8000ac6 <_read+0x12>
  }

  return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b006      	add	sp, #24
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e009      	b.n	8000b14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff ff93 	bl	8000a34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf1      	blt.n	8000b00 <_write+0x12>
  }
  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	0018      	movs	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b006      	add	sp, #24
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_close>:

int _close(int file)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	425b      	negs	r3, r3
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	0192      	lsls	r2, r2, #6
 8000b4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_isatty>:

int _isatty(int file)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f006 fc4a 	bl	8007448 <__errno>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	18d2      	adds	r2, r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b006      	add	sp, #24
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20009000 	.word	0x20009000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	200003c0 	.word	0x200003c0
 8000be8:	200014c8 	.word	0x200014c8

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b08d      	sub	sp, #52	; 0x34
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bfe:	240c      	movs	r4, #12
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	0018      	movs	r0, r3
 8000c04:	2324      	movs	r3, #36	; 0x24
 8000c06:	001a      	movs	r2, r3
 8000c08:	2100      	movs	r1, #0
 8000c0a:	f006 fbc7 	bl	800739c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0e:	003b      	movs	r3, r7
 8000c10:	0018      	movs	r0, r3
 8000c12:	230c      	movs	r3, #12
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	f006 fbc0 	bl	800739c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c1c:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <MX_TIM1_Init+0xc8>)
 8000c1e:	4a29      	ldr	r2, [pc, #164]	; (8000cc4 <MX_TIM1_Init+0xcc>)
 8000c20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <MX_TIM1_Init+0xc8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <MX_TIM1_Init+0xc8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <MX_TIM1_Init+0xc8>)
 8000c30:	4a25      	ldr	r2, [pc, #148]	; (8000cc8 <MX_TIM1_Init+0xd0>)
 8000c32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_TIM1_Init+0xc8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MX_TIM1_Init+0xc8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <MX_TIM1_Init+0xc8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c46:	0021      	movs	r1, r4
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2201      	movs	r2, #1
 8000c58:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2201      	movs	r2, #1
 8000c70:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c7e:	187a      	adds	r2, r7, r1
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_TIM1_Init+0xc8>)
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f002 f997 	bl	8002fb8 <HAL_TIM_Encoder_Init>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000c8e:	f7ff fea2 	bl	80009d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c92:	003b      	movs	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c98:	003b      	movs	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9e:	003b      	movs	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ca4:	003a      	movs	r2, r7
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_TIM1_Init+0xc8>)
 8000ca8:	0011      	movs	r1, r2
 8000caa:	0018      	movs	r0, r3
 8000cac:	f002 fe8a 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000cb4:	f7ff fe8f 	bl	80009d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b00d      	add	sp, #52	; 0x34
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	200003c4 	.word	0x200003c4
 8000cc4:	40012c00 	.word	0x40012c00
 8000cc8:	0000ffff 	.word	0x0000ffff

08000ccc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b08d      	sub	sp, #52	; 0x34
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cd2:	240c      	movs	r4, #12
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	2324      	movs	r3, #36	; 0x24
 8000cda:	001a      	movs	r2, r3
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f006 fb5d 	bl	800739c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f006 fb56 	bl	800739c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <MX_TIM3_Init+0xbc>)
 8000cf2:	4a26      	ldr	r2, [pc, #152]	; (8000d8c <MX_TIM3_Init+0xc0>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <MX_TIM3_Init+0xbc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <MX_TIM3_Init+0xbc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_TIM3_Init+0xbc>)
 8000d04:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <MX_TIM3_Init+0xc4>)
 8000d06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_TIM3_Init+0xbc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_TIM3_Init+0xbc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d14:	0021      	movs	r1, r4
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2201      	movs	r2, #1
 8000d26:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d4c:	187a      	adds	r2, r7, r1
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_TIM3_Init+0xbc>)
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f002 f930 	bl	8002fb8 <HAL_TIM_Encoder_Init>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d5c:	f7ff fe3b 	bl	80009d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	003b      	movs	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d66:	003b      	movs	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d6c:	003a      	movs	r2, r7
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_TIM3_Init+0xbc>)
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f002 fe26 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d7c:	f7ff fe2b 	bl	80009d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b00d      	add	sp, #52	; 0x34
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	20000410 	.word	0x20000410
 8000d8c:	40000400 	.word	0x40000400
 8000d90:	0000ffff 	.word	0x0000ffff

08000d94 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9a:	2334      	movs	r3, #52	; 0x34
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	0018      	movs	r0, r3
 8000da0:	231c      	movs	r3, #28
 8000da2:	001a      	movs	r2, r3
 8000da4:	2100      	movs	r1, #0
 8000da6:	f006 faf9 	bl	800739c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000daa:	003b      	movs	r3, r7
 8000dac:	0018      	movs	r0, r3
 8000dae:	2334      	movs	r3, #52	; 0x34
 8000db0:	001a      	movs	r2, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	f006 faf2 	bl	800739c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000db8:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000dba:	4a38      	ldr	r2, [pc, #224]	; (8000e9c <MX_TIM17_Init+0x108>)
 8000dbc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000dbe:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8000dca:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000dcc:	4a34      	ldr	r2, [pc, #208]	; (8000ea0 <MX_TIM17_Init+0x10c>)
 8000dce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000de4:	0018      	movs	r0, r3
 8000de6:	f001 ff4b 	bl	8002c80 <HAL_TIM_Base_Init>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000dee:	f7ff fdf2 	bl	80009d6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000df2:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f001 ff9b 	bl	8002d30 <HAL_TIM_PWM_Init>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000dfe:	f7ff fdea 	bl	80009d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e02:	2134      	movs	r1, #52	; 0x34
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2260      	movs	r2, #96	; 0x60
 8000e08:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e2e:	1879      	adds	r1, r7, r1
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	0018      	movs	r0, r3
 8000e36:	f002 f967 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000e3e:	f7ff fdca 	bl	80009d6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e4e:	003b      	movs	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e54:	003b      	movs	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e5a:	003b      	movs	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e60:	003b      	movs	r3, r7
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	0192      	lsls	r2, r2, #6
 8000e66:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e68:	003b      	movs	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e6e:	003b      	movs	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e74:	003a      	movs	r2, r7
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000e78:	0011      	movs	r1, r2
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f002 fe0a 	bl	8003a94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8000e84:	f7ff fda7 	bl	80009d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <MX_TIM17_Init+0x104>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 f8d0 	bl	8001030 <HAL_TIM_MspPostInit>

}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b014      	add	sp, #80	; 0x50
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	2000045c 	.word	0x2000045c
 8000e9c:	40014800 	.word	0x40014800
 8000ea0:	000003e7 	.word	0x000003e7

08000ea4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b08d      	sub	sp, #52	; 0x34
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	241c      	movs	r4, #28
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	2314      	movs	r3, #20
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f006 fa70 	bl	800739c <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d132      	bne.n	8000f2c <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec6:	4b47      	ldr	r3, [pc, #284]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eca:	4b46      	ldr	r3, [pc, #280]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	0109      	lsls	r1, r1, #4
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ed4:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b40      	ldr	r3, [pc, #256]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ee6:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ee8:	2101      	movs	r1, #1
 8000eea:	430a      	orrs	r2, r1
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
 8000eee:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encodeur_1_Pin|Driver1_REV_Pin|Driver1_FWD_Pin;
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	22f0      	movs	r2, #240	; 0xf0
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	0021      	movs	r1, r4
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2202      	movs	r2, #2
 8000f08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2202      	movs	r2, #2
 8000f1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	187a      	adds	r2, r7, r1
 8000f1e:	23a0      	movs	r3, #160	; 0xa0
 8000f20:	05db      	lsls	r3, r3, #23
 8000f22:	0011      	movs	r1, r2
 8000f24:	0018      	movs	r0, r3
 8000f26:	f000 fef1 	bl	8001d0c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f2a:	e055      	b.n	8000fd8 <HAL_TIM_Encoder_MspInit+0x134>
  else if(tim_encoderHandle->Instance==TIM3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a2d      	ldr	r2, [pc, #180]	; (8000fe8 <HAL_TIM_Encoder_MspInit+0x144>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d150      	bne.n	8000fd8 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f3a:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f42:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f46:	2202      	movs	r2, #2
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f52:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f54:	2101      	movs	r1, #1
 8000f56:	430a      	orrs	r2, r1
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	2202      	movs	r2, #2
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encodeur_2_Pin|encoder2_mais_pwm_normale_Pin;
 8000f7e:	241c      	movs	r4, #28
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	22c0      	movs	r2, #192	; 0xc0
 8000f84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2202      	movs	r2, #2
 8000f8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	193a      	adds	r2, r7, r4
 8000fa0:	23a0      	movs	r3, #160	; 0xa0
 8000fa2:	05db      	lsls	r3, r3, #23
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 feb0 	bl	8001d0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fac:	0021      	movs	r1, r4
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2201      	movs	r2, #1
 8000fca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_TIM_Encoder_MspInit+0x148>)
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	0010      	movs	r0, r2
 8000fd4:	f000 fe9a 	bl	8001d0c <HAL_GPIO_Init>
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b00d      	add	sp, #52	; 0x34
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	40012c00 	.word	0x40012c00
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40000400 	.word	0x40000400
 8000fec:	50000400 	.word	0x50000400

08000ff0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_TIM_Base_MspInit+0x38>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d10d      	bne.n	800101e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_TIM_Base_MspInit+0x3c>)
 8001004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_TIM_Base_MspInit+0x3c>)
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	02c9      	lsls	r1, r1, #11
 800100c:	430a      	orrs	r2, r1
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_TIM_Base_MspInit+0x3c>)
 8001012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	02db      	lsls	r3, r3, #11
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	40014800 	.word	0x40014800
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	240c      	movs	r4, #12
 800103a:	193b      	adds	r3, r7, r4
 800103c:	0018      	movs	r0, r3
 800103e:	2314      	movs	r3, #20
 8001040:	001a      	movs	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	f006 f9aa 	bl	800739c <memset>
  if(timHandle->Instance==TIM17)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <HAL_TIM_MspPostInit+0x70>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d121      	bne.n	8001096 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_TIM_MspPostInit+0x74>)
 8001054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_TIM_MspPostInit+0x74>)
 8001058:	2108      	movs	r1, #8
 800105a:	430a      	orrs	r2, r1
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_TIM_MspPostInit+0x74>)
 8001060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001062:	2208      	movs	r2, #8
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PD1     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = M_SCTR_Lidar_Pin;
 800106a:	0021      	movs	r1, r4
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2202      	movs	r2, #2
 8001070:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2202      	movs	r2, #2
 8001076:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2202      	movs	r2, #2
 8001088:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(M_SCTR_Lidar_GPIO_Port, &GPIO_InitStruct);
 800108a:	187b      	adds	r3, r7, r1
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_TIM_MspPostInit+0x78>)
 800108e:	0019      	movs	r1, r3
 8001090:	0010      	movs	r0, r2
 8001092:	f000 fe3b 	bl	8001d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b009      	add	sp, #36	; 0x24
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	40014800 	.word	0x40014800
 80010a4:	40021000 	.word	0x40021000
 80010a8:	50000c00 	.word	0x50000c00

080010ac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010b2:	4a26      	ldr	r2, [pc, #152]	; (800114c <MX_USART1_UART_Init+0xa0>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010b8:	22e1      	movs	r2, #225	; 0xe1
 80010ba:	0252      	lsls	r2, r2, #9
 80010bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010f0:	2208      	movs	r2, #8
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	0212      	lsls	r2, r2, #8
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 80010fe:	0018      	movs	r0, r3
 8001100:	f002 fd6e 	bl	8003be0 <HAL_UART_Init>
 8001104:	1e03      	subs	r3, r0, #0
 8001106:	d001      	beq.n	800110c <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8001108:	f7ff fc65 	bl	80009d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 800110e:	2100      	movs	r1, #0
 8001110:	0018      	movs	r0, r3
 8001112:	f004 f83d 	bl	8005190 <HAL_UARTEx_SetTxFifoThreshold>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d001      	beq.n	800111e <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 800111a:	f7ff fc5c 	bl	80009d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 8001120:	2100      	movs	r1, #0
 8001122:	0018      	movs	r0, r3
 8001124:	f004 f874 	bl	8005210 <HAL_UARTEx_SetRxFifoThreshold>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d001      	beq.n	8001130 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 800112c:	f7ff fc53 	bl	80009d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <MX_USART1_UART_Init+0x9c>)
 8001132:	0018      	movs	r0, r3
 8001134:	f003 fff2 	bl	800511c <HAL_UARTEx_DisableFifoMode>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 800113c:	f7ff fc4b 	bl	80009d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	200004a8 	.word	0x200004a8
 800114c:	40013800 	.word	0x40013800

08001150 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 8001156:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <MX_USART2_UART_Init+0xa0>)
 8001158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 128000;
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 800115c:	22fa      	movs	r2, #250	; 0xfa
 800115e:	0252      	lsls	r2, r2, #9
 8001160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 8001194:	2208      	movs	r2, #8
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	0212      	lsls	r2, r2, #8
 800119e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f002 fd1c 	bl	8003be0 <HAL_UART_Init>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80011ac:	f7ff fc13 	bl	80009d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	0018      	movs	r0, r3
 80011b6:	f003 ffeb 	bl	8005190 <HAL_UARTEx_SetTxFifoThreshold>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80011be:	f7ff fc0a 	bl	80009d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 80011c4:	2100      	movs	r1, #0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f004 f822 	bl	8005210 <HAL_UARTEx_SetRxFifoThreshold>
 80011cc:	1e03      	subs	r3, r0, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80011d0:	f7ff fc01 	bl	80009d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <MX_USART2_UART_Init+0x9c>)
 80011d6:	0018      	movs	r0, r3
 80011d8:	f003 ffa0 	bl	800511c <HAL_UARTEx_DisableFifoMode>
 80011dc:	1e03      	subs	r3, r0, #0
 80011de:	d001      	beq.n	80011e4 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 80011e0:	f7ff fbf9 	bl	80009d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	2000053c 	.word	0x2000053c
 80011f0:	40004400 	.word	0x40004400

080011f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b093      	sub	sp, #76	; 0x4c
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	2334      	movs	r3, #52	; 0x34
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	0018      	movs	r0, r3
 8001202:	2314      	movs	r3, #20
 8001204:	001a      	movs	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f006 f8c8 	bl	800739c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120c:	2418      	movs	r4, #24
 800120e:	193b      	adds	r3, r7, r4
 8001210:	0018      	movs	r0, r3
 8001212:	231c      	movs	r3, #28
 8001214:	001a      	movs	r2, r3
 8001216:	2100      	movs	r1, #0
 8001218:	f006 f8c0 	bl	800739c <memset>
  if(uartHandle->Instance==USART1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a5e      	ldr	r2, [pc, #376]	; (800139c <HAL_UART_MspInit+0x1a8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d13e      	bne.n	80012a4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001226:	193b      	adds	r3, r7, r4
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800122c:	193b      	adds	r3, r7, r4
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001232:	193b      	adds	r3, r7, r4
 8001234:	0018      	movs	r0, r3
 8001236:	f001 fbef 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 800123a:	1e03      	subs	r3, r0, #0
 800123c:	d001      	beq.n	8001242 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800123e:	f7ff fbca 	bl	80009d6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001242:	4b57      	ldr	r3, [pc, #348]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 8001244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001246:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	01c9      	lsls	r1, r1, #7
 800124c:	430a      	orrs	r2, r1
 800124e:	641a      	str	r2, [r3, #64]	; 0x40
 8001250:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 8001252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	01db      	lsls	r3, r3, #7
 8001258:	4013      	ands	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	4b50      	ldr	r3, [pc, #320]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 8001260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001262:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 8001264:	2104      	movs	r1, #4
 8001266:	430a      	orrs	r2, r1
 8001268:	635a      	str	r2, [r3, #52]	; 0x34
 800126a:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126e:	2204      	movs	r2, #4
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001276:	2134      	movs	r1, #52	; 0x34
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2230      	movs	r2, #48	; 0x30
 800127c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2202      	movs	r2, #2
 8001282:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2201      	movs	r2, #1
 8001294:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	187b      	adds	r3, r7, r1
 8001298:	4a42      	ldr	r2, [pc, #264]	; (80013a4 <HAL_UART_MspInit+0x1b0>)
 800129a:	0019      	movs	r1, r3
 800129c:	0010      	movs	r0, r2
 800129e:	f000 fd35 	bl	8001d0c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012a2:	e076      	b.n	8001392 <HAL_UART_MspInit+0x19e>
  else if(uartHandle->Instance==USART2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a3f      	ldr	r2, [pc, #252]	; (80013a8 <HAL_UART_MspInit+0x1b4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d171      	bne.n	8001392 <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012ae:	2118      	movs	r1, #24
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2202      	movs	r2, #2
 80012b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	0018      	movs	r0, r3
 80012c0:	f001 fbaa 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 80012c4:	1e03      	subs	r3, r0, #0
 80012c6:	d001      	beq.n	80012cc <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80012c8:	f7ff fb85 	bl	80009d6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012cc:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 80012ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012d0:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	0289      	lsls	r1, r1, #10
 80012d6:	430a      	orrs	r2, r1
 80012d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80012da:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 80012dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	029b      	lsls	r3, r3, #10
 80012e2:	4013      	ands	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 80012ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	430a      	orrs	r2, r1
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 80012f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f8:	2201      	movs	r2, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001300:	2134      	movs	r1, #52	; 0x34
 8001302:	187b      	adds	r3, r7, r1
 8001304:	220c      	movs	r2, #12
 8001306:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	187b      	adds	r3, r7, r1
 800130a:	2202      	movs	r2, #2
 800130c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	187b      	adds	r3, r7, r1
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2201      	movs	r2, #1
 800131e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	187a      	adds	r2, r7, r1
 8001322:	23a0      	movs	r3, #160	; 0xa0
 8001324:	05db      	lsls	r3, r3, #23
 8001326:	0011      	movs	r1, r2
 8001328:	0018      	movs	r0, r3
 800132a:	f000 fcef 	bl	8001d0c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 8001330:	4a1f      	ldr	r2, [pc, #124]	; (80013b0 <HAL_UART_MspInit+0x1bc>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 8001336:	2234      	movs	r2, #52	; 0x34
 8001338:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 800135a:	2220      	movs	r2, #32
 800135c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 8001366:	0018      	movs	r0, r3
 8001368:	f000 f9b2 	bl	80016d0 <HAL_DMA_Init>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d001      	beq.n	8001374 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8001370:	f7ff fb31 	bl	80009d6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 800137a:	505a      	str	r2, [r3, r1]
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2103      	movs	r1, #3
 8001386:	201c      	movs	r0, #28
 8001388:	f000 f970 	bl	800166c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800138c:	201c      	movs	r0, #28
 800138e:	f000 f982 	bl	8001696 <HAL_NVIC_EnableIRQ>
}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b013      	add	sp, #76	; 0x4c
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40013800 	.word	0x40013800
 80013a0:	40021000 	.word	0x40021000
 80013a4:	50000800 	.word	0x50000800
 80013a8:	40004400 	.word	0x40004400
 80013ac:	200005d0 	.word	0x200005d0
 80013b0:	40020008 	.word	0x40020008

080013b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b8:	f7ff fc18 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80013be:	490d      	ldr	r1, [pc, #52]	; (80013f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <LoopForever+0xe>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d4:	4c0a      	ldr	r4, [pc, #40]	; (8001400 <LoopForever+0x16>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013e2:	f006 f837 	bl	8007454 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013e6:	f7ff fa4d 	bl	8000884 <main>

080013ea <LoopForever>:

LoopForever:
  b LoopForever
 80013ea:	e7fe      	b.n	80013ea <LoopForever>
  ldr   r0, =_estack
 80013ec:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013f8:	0800806c 	.word	0x0800806c
  ldr r2, =_sbss
 80013fc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001400:	200014c8 	.word	0x200014c8

08001404 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC1_IRQHandler>
	...

08001408 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_Init+0x3c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_Init+0x3c>)
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	0049      	lsls	r1, r1, #1
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001422:	2003      	movs	r0, #3
 8001424:	f000 f810 	bl	8001448 <HAL_InitTick>
 8001428:	1e03      	subs	r3, r0, #0
 800142a:	d003      	beq.n	8001434 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800142c:	1dfb      	adds	r3, r7, #7
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	e001      	b.n	8001438 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f7ff fad4 	bl	80009e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	781b      	ldrb	r3, [r3, #0]
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b002      	add	sp, #8
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40022000 	.word	0x40022000

08001448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001450:	230f      	movs	r3, #15
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_InitTick+0x88>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d02b      	beq.n	80014b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_InitTick+0x8c>)
 8001462:	681c      	ldr	r4, [r3, #0]
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <HAL_InitTick+0x88>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	0019      	movs	r1, r3
 800146a:	23fa      	movs	r3, #250	; 0xfa
 800146c:	0098      	lsls	r0, r3, #2
 800146e:	f7fe fe55 	bl	800011c <__udivsi3>
 8001472:	0003      	movs	r3, r0
 8001474:	0019      	movs	r1, r3
 8001476:	0020      	movs	r0, r4
 8001478:	f7fe fe50 	bl	800011c <__udivsi3>
 800147c:	0003      	movs	r3, r0
 800147e:	0018      	movs	r0, r3
 8001480:	f000 f919 	bl	80016b6 <HAL_SYSTICK_Config>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d112      	bne.n	80014ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d80a      	bhi.n	80014a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2301      	movs	r3, #1
 8001492:	425b      	negs	r3, r3
 8001494:	2200      	movs	r2, #0
 8001496:	0018      	movs	r0, r3
 8001498:	f000 f8e8 	bl	800166c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_InitTick+0x90>)
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e00d      	b.n	80014c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80014a4:	230f      	movs	r3, #15
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	e008      	b.n	80014c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ae:	230f      	movs	r3, #15
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e003      	b.n	80014c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b8:	230f      	movs	r3, #15
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80014c0:	230f      	movs	r3, #15
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	781b      	ldrb	r3, [r3, #0]
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b005      	add	sp, #20
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	20000010 	.word	0x20000010
 80014d4:	20000008 	.word	0x20000008
 80014d8:	2000000c 	.word	0x2000000c

080014dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_IncTick+0x1c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	001a      	movs	r2, r3
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_IncTick+0x20>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	18d2      	adds	r2, r2, r3
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_IncTick+0x20>)
 80014ee:	601a      	str	r2, [r3, #0]
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	20000010 	.word	0x20000010
 80014fc:	2000062c 	.word	0x2000062c

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <HAL_GetTick+0x10>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	2000062c 	.word	0x2000062c

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	0002      	movs	r2, r0
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001520:	1dfb      	adds	r3, r7, #7
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b7f      	cmp	r3, #127	; 0x7f
 8001526:	d809      	bhi.n	800153c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	001a      	movs	r2, r3
 800152e:	231f      	movs	r3, #31
 8001530:	401a      	ands	r2, r3
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_EnableIRQ+0x30>)
 8001534:	2101      	movs	r1, #1
 8001536:	4091      	lsls	r1, r2
 8001538:	000a      	movs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	0002      	movs	r2, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b7f      	cmp	r3, #127	; 0x7f
 800155c:	d828      	bhi.n	80015b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800155e:	4a2f      	ldr	r2, [pc, #188]	; (800161c <__NVIC_SetPriority+0xd4>)
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b25b      	sxtb	r3, r3
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	33c0      	adds	r3, #192	; 0xc0
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	589b      	ldr	r3, [r3, r2]
 800156e:	1dfa      	adds	r2, r7, #7
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	0011      	movs	r1, r2
 8001574:	2203      	movs	r2, #3
 8001576:	400a      	ands	r2, r1
 8001578:	00d2      	lsls	r2, r2, #3
 800157a:	21ff      	movs	r1, #255	; 0xff
 800157c:	4091      	lsls	r1, r2
 800157e:	000a      	movs	r2, r1
 8001580:	43d2      	mvns	r2, r2
 8001582:	401a      	ands	r2, r3
 8001584:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	019b      	lsls	r3, r3, #6
 800158a:	22ff      	movs	r2, #255	; 0xff
 800158c:	401a      	ands	r2, r3
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	0018      	movs	r0, r3
 8001594:	2303      	movs	r3, #3
 8001596:	4003      	ands	r3, r0
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800159c:	481f      	ldr	r0, [pc, #124]	; (800161c <__NVIC_SetPriority+0xd4>)
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	430a      	orrs	r2, r1
 80015a8:	33c0      	adds	r3, #192	; 0xc0
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015ae:	e031      	b.n	8001614 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b0:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <__NVIC_SetPriority+0xd8>)
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	0019      	movs	r1, r3
 80015b8:	230f      	movs	r3, #15
 80015ba:	400b      	ands	r3, r1
 80015bc:	3b08      	subs	r3, #8
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3306      	adds	r3, #6
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	18d3      	adds	r3, r2, r3
 80015c6:	3304      	adds	r3, #4
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	1dfa      	adds	r2, r7, #7
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	0011      	movs	r1, r2
 80015d0:	2203      	movs	r2, #3
 80015d2:	400a      	ands	r2, r1
 80015d4:	00d2      	lsls	r2, r2, #3
 80015d6:	21ff      	movs	r1, #255	; 0xff
 80015d8:	4091      	lsls	r1, r2
 80015da:	000a      	movs	r2, r1
 80015dc:	43d2      	mvns	r2, r2
 80015de:	401a      	ands	r2, r3
 80015e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	019b      	lsls	r3, r3, #6
 80015e6:	22ff      	movs	r2, #255	; 0xff
 80015e8:	401a      	ands	r2, r3
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	0018      	movs	r0, r3
 80015f0:	2303      	movs	r3, #3
 80015f2:	4003      	ands	r3, r0
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f8:	4809      	ldr	r0, [pc, #36]	; (8001620 <__NVIC_SetPriority+0xd8>)
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	001c      	movs	r4, r3
 8001600:	230f      	movs	r3, #15
 8001602:	4023      	ands	r3, r4
 8001604:	3b08      	subs	r3, #8
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	430a      	orrs	r2, r1
 800160a:	3306      	adds	r3, #6
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	18c3      	adds	r3, r0, r3
 8001610:	3304      	adds	r3, #4
 8001612:	601a      	str	r2, [r3, #0]
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	b003      	add	sp, #12
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	045b      	lsls	r3, r3, #17
 8001634:	429a      	cmp	r2, r3
 8001636:	d301      	bcc.n	800163c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001638:	2301      	movs	r3, #1
 800163a:	e010      	b.n	800165e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <SysTick_Config+0x44>)
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	3a01      	subs	r2, #1
 8001642:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001644:	2301      	movs	r3, #1
 8001646:	425b      	negs	r3, r3
 8001648:	2103      	movs	r1, #3
 800164a:	0018      	movs	r0, r3
 800164c:	f7ff ff7c 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <SysTick_Config+0x44>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <SysTick_Config+0x44>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	210f      	movs	r1, #15
 8001678:	187b      	adds	r3, r7, r1
 800167a:	1c02      	adds	r2, r0, #0
 800167c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	187b      	adds	r3, r7, r1
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b25b      	sxtb	r3, r3
 8001686:	0011      	movs	r1, r2
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b004      	add	sp, #16
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	0002      	movs	r2, r0
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff ff33 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b002      	add	sp, #8
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff ffaf 	bl	8001624 <SysTick_Config>
 80016c6:	0003      	movs	r3, r0
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e077      	b.n	80017d2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a3d      	ldr	r2, [pc, #244]	; (80017dc <HAL_DMA_Init+0x10c>)
 80016e8:	4694      	mov	ip, r2
 80016ea:	4463      	add	r3, ip
 80016ec:	2114      	movs	r1, #20
 80016ee:	0018      	movs	r0, r3
 80016f0:	f7fe fd14 	bl	800011c <__udivsi3>
 80016f4:	0003      	movs	r3, r0
 80016f6:	009a      	lsls	r2, r3, #2
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2225      	movs	r2, #37	; 0x25
 8001700:	2102      	movs	r1, #2
 8001702:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4934      	ldr	r1, [pc, #208]	; (80017e0 <HAL_DMA_Init+0x110>)
 8001710:	400a      	ands	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6819      	ldr	r1, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	0018      	movs	r0, r3
 800174e:	f000 fa8d 	bl	8001c6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	01db      	lsls	r3, r3, #7
 800175a:	429a      	cmp	r2, r3
 800175c:	d102      	bne.n	8001764 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176c:	213f      	movs	r1, #63	; 0x3f
 800176e:	400a      	ands	r2, r1
 8001770:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800177a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d011      	beq.n	80017a8 <HAL_DMA_Init+0xd8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d80d      	bhi.n	80017a8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	0018      	movs	r0, r3
 8001790:	f000 fa98 	bl	8001cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	e008      	b.n	80017ba <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2225      	movs	r2, #37	; 0x25
 80017c4:	2101      	movs	r1, #1
 80017c6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2224      	movs	r2, #36	; 0x24
 80017cc:	2100      	movs	r1, #0
 80017ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	bffdfff8 	.word	0xbffdfff8
 80017e0:	ffff800f 	.word	0xffff800f

080017e4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f2:	2317      	movs	r3, #23
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2224      	movs	r2, #36	; 0x24
 80017fe:	5c9b      	ldrb	r3, [r3, r2]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_DMA_Start_IT+0x24>
 8001804:	2302      	movs	r3, #2
 8001806:	e06f      	b.n	80018e8 <HAL_DMA_Start_IT+0x104>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2224      	movs	r2, #36	; 0x24
 800180c:	2101      	movs	r1, #1
 800180e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2225      	movs	r2, #37	; 0x25
 8001814:	5c9b      	ldrb	r3, [r3, r2]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d157      	bne.n	80018cc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2225      	movs	r2, #37	; 0x25
 8001820:	2102      	movs	r1, #2
 8001822:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	438a      	bics	r2, r1
 8001838:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	68b9      	ldr	r1, [r7, #8]
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 f9d3 	bl	8001bec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	210e      	movs	r1, #14
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e00f      	b.n	8001880 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2104      	movs	r1, #4
 800186c:	438a      	bics	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	210a      	movs	r1, #10
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	4013      	ands	r3, r2
 800188c:	d008      	beq.n	80018a0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	0049      	lsls	r1, r1, #1
 800189c:	430a      	orrs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	0049      	lsls	r1, r1, #1
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e00a      	b.n	80018e2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2280      	movs	r2, #128	; 0x80
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2224      	movs	r2, #36	; 0x24
 80018d6:	2100      	movs	r1, #0
 80018d8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80018da:	2317      	movs	r3, #23
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80018e2:	2317      	movs	r3, #23
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	781b      	ldrb	r3, [r3, #0]
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b006      	add	sp, #24
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e050      	b.n	80019a4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2225      	movs	r2, #37	; 0x25
 8001906:	5c9b      	ldrb	r3, [r3, r2]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d008      	beq.n	8001920 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2204      	movs	r2, #4
 8001912:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2224      	movs	r2, #36	; 0x24
 8001918:	2100      	movs	r1, #0
 800191a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e041      	b.n	80019a4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	210e      	movs	r1, #14
 800192c:	438a      	bics	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	491c      	ldr	r1, [pc, #112]	; (80019ac <HAL_DMA_Abort+0xbc>)
 800193c:	400a      	ands	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2101      	movs	r1, #1
 800194c:	438a      	bics	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_DMA_Abort+0xc0>)
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	221c      	movs	r2, #28
 800195a:	4013      	ands	r3, r2
 800195c:	2201      	movs	r2, #1
 800195e:	409a      	lsls	r2, r3
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_DMA_Abort+0xc0>)
 8001962:	430a      	orrs	r2, r1
 8001964:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800196e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00c      	beq.n	8001992 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001982:	490a      	ldr	r1, [pc, #40]	; (80019ac <HAL_DMA_Abort+0xbc>)
 8001984:	400a      	ands	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001990:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2225      	movs	r2, #37	; 0x25
 8001996:	2101      	movs	r1, #1
 8001998:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2224      	movs	r2, #36	; 0x24
 800199e:	2100      	movs	r1, #0
 80019a0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	fffffeff 	.word	0xfffffeff
 80019b0:	40020000 	.word	0x40020000

080019b4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019bc:	210f      	movs	r1, #15
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2225      	movs	r2, #37	; 0x25
 80019c8:	5c9b      	ldrb	r3, [r3, r2]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d006      	beq.n	80019de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2204      	movs	r2, #4
 80019d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e049      	b.n	8001a72 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	210e      	movs	r1, #14
 80019ea:	438a      	bics	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	438a      	bics	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	491d      	ldr	r1, [pc, #116]	; (8001a80 <HAL_DMA_Abort_IT+0xcc>)
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_DMA_Abort_IT+0xd0>)
 8001a10:	6859      	ldr	r1, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	221c      	movs	r2, #28
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_DMA_Abort_IT+0xd0>)
 8001a20:	430a      	orrs	r2, r1
 8001a22:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00c      	beq.n	8001a50 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a40:	490f      	ldr	r1, [pc, #60]	; (8001a80 <HAL_DMA_Abort_IT+0xcc>)
 8001a42:	400a      	ands	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a4e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2225      	movs	r2, #37	; 0x25
 8001a54:	2101      	movs	r1, #1
 8001a56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2224      	movs	r2, #36	; 0x24
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	0010      	movs	r0, r2
 8001a70:	4798      	blx	r3
    }
  }
  return status;
 8001a72:	230f      	movs	r3, #15
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	781b      	ldrb	r3, [r3, #0]
}
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b004      	add	sp, #16
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	fffffeff 	.word	0xfffffeff
 8001a84:	40020000 	.word	0x40020000

08001a88 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001a90:	4b55      	ldr	r3, [pc, #340]	; (8001be8 <HAL_DMA_IRQHandler+0x160>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	221c      	movs	r2, #28
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	0013      	movs	r3, r2
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x7a>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d023      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d107      	bne.n	8001ad6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	438a      	bics	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001ad6:	4b44      	ldr	r3, [pc, #272]	; (8001be8 <HAL_DMA_IRQHandler+0x160>)
 8001ad8:	6859      	ldr	r1, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	221c      	movs	r2, #28
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <HAL_DMA_IRQHandler+0x160>)
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d100      	bne.n	8001af6 <HAL_DMA_IRQHandler+0x6e>
 8001af4:	e073      	b.n	8001bde <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	0010      	movs	r0, r2
 8001afe:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001b00:	e06d      	b.n	8001bde <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	221c      	movs	r2, #28
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	0013      	movs	r3, r2
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4013      	ands	r3, r2
 8001b14:	d02e      	beq.n	8001b74 <HAL_DMA_IRQHandler+0xec>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d02a      	beq.n	8001b74 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2220      	movs	r2, #32
 8001b26:	4013      	ands	r3, r2
 8001b28:	d10b      	bne.n	8001b42 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	210a      	movs	r1, #10
 8001b36:	438a      	bics	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2225      	movs	r2, #37	; 0x25
 8001b3e:	2101      	movs	r1, #1
 8001b40:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_DMA_IRQHandler+0x160>)
 8001b44:	6859      	ldr	r1, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	221c      	movs	r2, #28
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2202      	movs	r2, #2
 8001b50:	409a      	lsls	r2, r3
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_DMA_IRQHandler+0x160>)
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2224      	movs	r2, #36	; 0x24
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d03a      	beq.n	8001bde <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	0010      	movs	r0, r2
 8001b70:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001b72:	e034      	b.n	8001bde <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	221c      	movs	r2, #28
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	d02b      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x158>
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d027      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	210e      	movs	r1, #14
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_DMA_IRQHandler+0x160>)
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	221c      	movs	r2, #28
 8001baa:	4013      	ands	r3, r2
 8001bac:	2201      	movs	r2, #1
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_DMA_IRQHandler+0x160>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2225      	movs	r2, #37	; 0x25
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2224      	movs	r2, #36	; 0x24
 8001bc8:	2100      	movs	r1, #0
 8001bca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	0010      	movs	r0, r2
 8001bdc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46c0      	nop			; (mov r8, r8)
}
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b004      	add	sp, #16
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40020000 	.word	0x40020000

08001bec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c14:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <DMA_SetConfig+0x7c>)
 8001c18:	6859      	ldr	r1, [r3, #4]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	221c      	movs	r2, #28
 8001c20:	4013      	ands	r3, r2
 8001c22:	2201      	movs	r2, #1
 8001c24:	409a      	lsls	r2, r3
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <DMA_SetConfig+0x7c>)
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b10      	cmp	r3, #16
 8001c3a:	d108      	bne.n	8001c4e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c4c:	e007      	b.n	8001c5e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	60da      	str	r2, [r3, #12]
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b004      	add	sp, #16
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	40020000 	.word	0x40020000

08001c6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001c7c:	4694      	mov	ip, r2
 8001c7e:	4463      	add	r3, ip
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	001a      	movs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	23ff      	movs	r3, #255	; 0xff
 8001c90:	4013      	ands	r3, r2
 8001c92:	3b08      	subs	r3, #8
 8001c94:	2114      	movs	r1, #20
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7fe fa40 	bl	800011c <__udivsi3>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001ca4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	221f      	movs	r2, #31
 8001caa:	4013      	ands	r3, r2
 8001cac:	2201      	movs	r2, #1
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b004      	add	sp, #16
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	10008200 	.word	0x10008200
 8001cc0:	40020880 	.word	0x40020880

08001cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	223f      	movs	r2, #63	; 0x3f
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001cda:	4694      	mov	ip, r2
 8001cdc:	4463      	add	r3, ip
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b004      	add	sp, #16
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	1000823f 	.word	0x1000823f
 8001d08:	40020940 	.word	0x40020940

08001d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1a:	e147      	b.n	8001fac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4091      	lsls	r1, r2
 8001d26:	000a      	movs	r2, r1
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d100      	bne.n	8001d34 <HAL_GPIO_Init+0x28>
 8001d32:	e138      	b.n	8001fa6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d005      	beq.n	8001d4c <HAL_GPIO_Init+0x40>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2203      	movs	r2, #3
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d130      	bne.n	8001dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	0013      	movs	r3, r2
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	0013      	movs	r3, r2
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d82:	2201      	movs	r2, #1
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	2201      	movs	r2, #1
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	0013      	movs	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2203      	movs	r2, #3
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d017      	beq.n	8001dea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	0013      	movs	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2203      	movs	r2, #3
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d123      	bne.n	8001e3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3208      	adds	r2, #8
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	58d3      	ldr	r3, [r2, r3]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2207      	movs	r2, #7
 8001e08:	4013      	ands	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	43da      	mvns	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2107      	movs	r1, #7
 8001e22:	400b      	ands	r3, r1
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	08da      	lsrs	r2, r3, #3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3208      	adds	r2, #8
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	6939      	ldr	r1, [r7, #16]
 8001e3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	2203      	movs	r2, #3
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	409a      	lsls	r2, r3
 8001e64:	0013      	movs	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	23c0      	movs	r3, #192	; 0xc0
 8001e78:	029b      	lsls	r3, r3, #10
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d100      	bne.n	8001e80 <HAL_GPIO_Init+0x174>
 8001e7e:	e092      	b.n	8001fa6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e80:	4a50      	ldr	r2, [pc, #320]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3318      	adds	r3, #24
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	589b      	ldr	r3, [r3, r2]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2203      	movs	r2, #3
 8001e92:	4013      	ands	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	220f      	movs	r2, #15
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	23a0      	movs	r3, #160	; 0xa0
 8001ea8:	05db      	lsls	r3, r3, #23
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0x1ca>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <HAL_GPIO_Init+0x2bc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_GPIO_Init+0x1c6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a44      	ldr	r2, [pc, #272]	; (8001fcc <HAL_GPIO_Init+0x2c0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x1c2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a43      	ldr	r2, [pc, #268]	; (8001fd0 <HAL_GPIO_Init+0x2c4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_GPIO_Init+0x1be>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x1cc>
 8001eca:	2305      	movs	r3, #5
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_Init+0x1cc>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x1cc>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x1cc>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	2103      	movs	r1, #3
 8001edc:	400a      	ands	r2, r1
 8001ede:	00d2      	lsls	r2, r2, #3
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ee8:	4936      	ldr	r1, [pc, #216]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3318      	adds	r3, #24
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef6:	4b33      	ldr	r3, [pc, #204]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43da      	mvns	r2, r3
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	035b      	lsls	r3, r3, #13
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	039b      	lsls	r3, r3, #14
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001f4c:	2384      	movs	r3, #132	; 0x84
 8001f4e:	58d3      	ldr	r3, [r2, r3]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43da      	mvns	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	029b      	lsls	r3, r3, #10
 8001f64:	4013      	ands	r3, r2
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f70:	4914      	ldr	r1, [pc, #80]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001f72:	2284      	movs	r2, #132	; 0x84
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	58d3      	ldr	r3, [r2, r3]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43da      	mvns	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	025b      	lsls	r3, r3, #9
 8001f92:	4013      	ands	r3, r2
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f9e:	4909      	ldr	r1, [pc, #36]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	40da      	lsrs	r2, r3
 8001fb4:	1e13      	subs	r3, r2, #0
 8001fb6:	d000      	beq.n	8001fba <HAL_GPIO_Init+0x2ae>
 8001fb8:	e6b0      	b.n	8001d1c <HAL_GPIO_Init+0x10>
  }
}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b006      	add	sp, #24
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021800 	.word	0x40021800
 8001fc8:	50000400 	.word	0x50000400
 8001fcc:	50000800 	.word	0x50000800
 8001fd0:	50000c00 	.word	0x50000c00

08001fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	0008      	movs	r0, r1
 8001fde:	0011      	movs	r1, r2
 8001fe0:	1cbb      	adds	r3, r7, #2
 8001fe2:	1c02      	adds	r2, r0, #0
 8001fe4:	801a      	strh	r2, [r3, #0]
 8001fe6:	1c7b      	adds	r3, r7, #1
 8001fe8:	1c0a      	adds	r2, r1, #0
 8001fea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fec:	1c7b      	adds	r3, r7, #1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ff4:	1cbb      	adds	r3, r7, #2
 8001ff6:	881a      	ldrh	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ffc:	e003      	b.n	8002006 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ffe:	1cbb      	adds	r3, r7, #2
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800201e:	4013      	ands	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	429a      	cmp	r2, r3
 8002032:	d11f      	bne.n	8002074 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	0013      	movs	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	189b      	adds	r3, r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4912      	ldr	r1, [pc, #72]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002042:	0018      	movs	r0, r3
 8002044:	f7fe f86a 	bl	800011c <__udivsi3>
 8002048:	0003      	movs	r3, r0
 800204a:	3301      	adds	r3, #1
 800204c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800204e:	e008      	b.n	8002062 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3b01      	subs	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	e001      	b.n	8002062 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e009      	b.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	401a      	ands	r2, r3
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	429a      	cmp	r2, r3
 8002072:	d0ed      	beq.n	8002050 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	40007000 	.word	0x40007000
 8002084:	fffff9ff 	.word	0xfffff9ff
 8002088:	20000008 	.word	0x20000008
 800208c:	000f4240 	.word	0x000f4240

08002090 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	23e0      	movs	r3, #224	; 0xe0
 800209a:	01db      	lsls	r3, r3, #7
 800209c:	4013      	ands	r3, r2
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e2f3      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2201      	movs	r2, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	d100      	bne.n	80020c6 <HAL_RCC_OscConfig+0x1e>
 80020c4:	e07c      	b.n	80021c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c6:	4bc3      	ldr	r3, [pc, #780]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2238      	movs	r2, #56	; 0x38
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d0:	4bc0      	ldr	r3, [pc, #768]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2203      	movs	r2, #3
 80020d6:	4013      	ands	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d102      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3e>
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d002      	beq.n	80020ec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d10b      	bne.n	8002104 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	4bb9      	ldr	r3, [pc, #740]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	4013      	ands	r3, r2
 80020f6:	d062      	beq.n	80021be <HAL_RCC_OscConfig+0x116>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d15e      	bne.n	80021be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e2ce      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	025b      	lsls	r3, r3, #9
 800210c:	429a      	cmp	r2, r3
 800210e:	d107      	bne.n	8002120 <HAL_RCC_OscConfig+0x78>
 8002110:	4bb0      	ldr	r3, [pc, #704]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4baf      	ldr	r3, [pc, #700]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	0249      	lsls	r1, r1, #9
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	e020      	b.n	8002162 <HAL_RCC_OscConfig+0xba>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	23a0      	movs	r3, #160	; 0xa0
 8002126:	02db      	lsls	r3, r3, #11
 8002128:	429a      	cmp	r2, r3
 800212a:	d10e      	bne.n	800214a <HAL_RCC_OscConfig+0xa2>
 800212c:	4ba9      	ldr	r3, [pc, #676]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4ba8      	ldr	r3, [pc, #672]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	02c9      	lsls	r1, r1, #11
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	4ba6      	ldr	r3, [pc, #664]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4ba5      	ldr	r3, [pc, #660]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	0249      	lsls	r1, r1, #9
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0xba>
 800214a:	4ba2      	ldr	r3, [pc, #648]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4ba1      	ldr	r3, [pc, #644]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002150:	49a1      	ldr	r1, [pc, #644]	; (80023d8 <HAL_RCC_OscConfig+0x330>)
 8002152:	400a      	ands	r2, r1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	4b9f      	ldr	r3, [pc, #636]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b9e      	ldr	r3, [pc, #632]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800215c:	499f      	ldr	r1, [pc, #636]	; (80023dc <HAL_RCC_OscConfig+0x334>)
 800215e:	400a      	ands	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d014      	beq.n	8002194 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7ff f9c9 	bl	8001500 <HAL_GetTick>
 800216e:	0003      	movs	r3, r0
 8002170:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff f9c4 	bl	8001500 <HAL_GetTick>
 8002178:	0002      	movs	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e28d      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002186:	4b93      	ldr	r3, [pc, #588]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	029b      	lsls	r3, r3, #10
 800218e:	4013      	ands	r3, r2
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xcc>
 8002192:	e015      	b.n	80021c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff f9b4 	bl	8001500 <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219e:	f7ff f9af 	bl	8001500 <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b64      	cmp	r3, #100	; 0x64
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e278      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b0:	4b88      	ldr	r3, [pc, #544]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	029b      	lsls	r3, r3, #10
 80021b8:	4013      	ands	r3, r2
 80021ba:	d1f0      	bne.n	800219e <HAL_RCC_OscConfig+0xf6>
 80021bc:	e000      	b.n	80021c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2202      	movs	r2, #2
 80021c6:	4013      	ands	r3, r2
 80021c8:	d100      	bne.n	80021cc <HAL_RCC_OscConfig+0x124>
 80021ca:	e099      	b.n	8002300 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021cc:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2238      	movs	r2, #56	; 0x38
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d6:	4b7f      	ldr	r3, [pc, #508]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2203      	movs	r2, #3
 80021dc:	4013      	ands	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d102      	bne.n	80021ec <HAL_RCC_OscConfig+0x144>
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d002      	beq.n	80021f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d135      	bne.n	800225e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f2:	4b78      	ldr	r3, [pc, #480]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4013      	ands	r3, r2
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x162>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e24b      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b72      	ldr	r3, [pc, #456]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4a74      	ldr	r2, [pc, #464]	; (80023e0 <HAL_RCC_OscConfig+0x338>)
 8002210:	4013      	ands	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	021a      	lsls	r2, r3, #8
 800221a:	4b6e      	ldr	r3, [pc, #440]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d112      	bne.n	800224c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002226:	4b6b      	ldr	r3, [pc, #428]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6e      	ldr	r2, [pc, #440]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800222c:	4013      	ands	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	4b67      	ldr	r3, [pc, #412]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002236:	430a      	orrs	r2, r1
 8002238:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800223a:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	0adb      	lsrs	r3, r3, #11
 8002240:	2207      	movs	r2, #7
 8002242:	4013      	ands	r3, r2
 8002244:	4a68      	ldr	r2, [pc, #416]	; (80023e8 <HAL_RCC_OscConfig+0x340>)
 8002246:	40da      	lsrs	r2, r3
 8002248:	4b68      	ldr	r3, [pc, #416]	; (80023ec <HAL_RCC_OscConfig+0x344>)
 800224a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800224c:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x348>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0018      	movs	r0, r3
 8002252:	f7ff f8f9 	bl	8001448 <HAL_InitTick>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d051      	beq.n	80022fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e221      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d030      	beq.n	80022c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002266:	4b5b      	ldr	r3, [pc, #364]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a5e      	ldr	r2, [pc, #376]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800226c:	4013      	ands	r3, r2
 800226e:	0019      	movs	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	4b57      	ldr	r3, [pc, #348]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800227a:	4b56      	ldr	r3, [pc, #344]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	0049      	lsls	r1, r1, #1
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7ff f93a 	bl	8001500 <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002292:	f7ff f935 	bl	8001500 <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1fe      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a4:	4b4b      	ldr	r3, [pc, #300]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4013      	ands	r3, r2
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a4a      	ldr	r2, [pc, #296]	; (80023e0 <HAL_RCC_OscConfig+0x338>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	021a      	lsls	r2, r3, #8
 80022c0:	4b44      	ldr	r3, [pc, #272]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80022c2:	430a      	orrs	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	e01b      	b.n	8002300 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80022c8:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80022ce:	4949      	ldr	r1, [pc, #292]	; (80023f4 <HAL_RCC_OscConfig+0x34c>)
 80022d0:	400a      	ands	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff f914 	bl	8001500 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022de:	f7ff f90f 	bl	8001500 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1d8      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f0:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4013      	ands	r3, r2
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x236>
 80022fc:	e000      	b.n	8002300 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2208      	movs	r2, #8
 8002306:	4013      	ands	r3, r2
 8002308:	d047      	beq.n	800239a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800230a:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2238      	movs	r2, #56	; 0x38
 8002310:	4013      	ands	r3, r2
 8002312:	2b18      	cmp	r3, #24
 8002314:	d10a      	bne.n	800232c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002316:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	2202      	movs	r2, #2
 800231c:	4013      	ands	r3, r2
 800231e:	d03c      	beq.n	800239a <HAL_RCC_OscConfig+0x2f2>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d138      	bne.n	800239a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e1ba      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d019      	beq.n	8002368 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002336:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002338:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800233a:	2101      	movs	r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff f8de 	bl	8001500 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234a:	f7ff f8d9 	bl	8001500 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e1a2      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d0f1      	beq.n	800234a <HAL_RCC_OscConfig+0x2a2>
 8002366:	e018      	b.n	800239a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800236a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 800236e:	2101      	movs	r1, #1
 8002370:	438a      	bics	r2, r1
 8002372:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff f8c4 	bl	8001500 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237e:	f7ff f8bf 	bl	8001500 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e188      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 8002392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002394:	2202      	movs	r2, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d1f1      	bne.n	800237e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2204      	movs	r2, #4
 80023a0:	4013      	ands	r3, r2
 80023a2:	d100      	bne.n	80023a6 <HAL_RCC_OscConfig+0x2fe>
 80023a4:	e0c6      	b.n	8002534 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a6:	231f      	movs	r3, #31
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2238      	movs	r2, #56	; 0x38
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d11e      	bne.n	80023f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_OscConfig+0x32c>)
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	2202      	movs	r2, #2
 80023c0:	4013      	ands	r3, r2
 80023c2:	d100      	bne.n	80023c6 <HAL_RCC_OscConfig+0x31e>
 80023c4:	e0b6      	b.n	8002534 <HAL_RCC_OscConfig+0x48c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d000      	beq.n	80023d0 <HAL_RCC_OscConfig+0x328>
 80023ce:	e0b1      	b.n	8002534 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e166      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
 80023d4:	40021000 	.word	0x40021000
 80023d8:	fffeffff 	.word	0xfffeffff
 80023dc:	fffbffff 	.word	0xfffbffff
 80023e0:	ffff80ff 	.word	0xffff80ff
 80023e4:	ffffc7ff 	.word	0xffffc7ff
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	20000008 	.word	0x20000008
 80023f0:	2000000c 	.word	0x2000000c
 80023f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023f8:	4bac      	ldr	r3, [pc, #688]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80023fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	055b      	lsls	r3, r3, #21
 8002400:	4013      	ands	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_RCC_OscConfig+0x360>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x362>
 8002408:	2300      	movs	r3, #0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d011      	beq.n	8002432 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4ba7      	ldr	r3, [pc, #668]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002412:	4ba6      	ldr	r3, [pc, #664]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	0549      	lsls	r1, r1, #21
 8002418:	430a      	orrs	r2, r1
 800241a:	63da      	str	r2, [r3, #60]	; 0x3c
 800241c:	4ba3      	ldr	r3, [pc, #652]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 800241e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	055b      	lsls	r3, r3, #21
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800242a:	231f      	movs	r3, #31
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002432:	4b9f      	ldr	r3, [pc, #636]	; (80026b0 <HAL_RCC_OscConfig+0x608>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4013      	ands	r3, r2
 800243c:	d11a      	bne.n	8002474 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800243e:	4b9c      	ldr	r3, [pc, #624]	; (80026b0 <HAL_RCC_OscConfig+0x608>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b9b      	ldr	r3, [pc, #620]	; (80026b0 <HAL_RCC_OscConfig+0x608>)
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	0049      	lsls	r1, r1, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800244c:	f7ff f858 	bl	8001500 <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7ff f853 	bl	8001500 <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e11c      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002468:	4b91      	ldr	r3, [pc, #580]	; (80026b0 <HAL_RCC_OscConfig+0x608>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4013      	ands	r3, r2
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x3e2>
 800247c:	4b8b      	ldr	r3, [pc, #556]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 800247e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002480:	4b8a      	ldr	r3, [pc, #552]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002482:	2101      	movs	r1, #1
 8002484:	430a      	orrs	r2, r1
 8002486:	65da      	str	r2, [r3, #92]	; 0x5c
 8002488:	e01c      	b.n	80024c4 <HAL_RCC_OscConfig+0x41c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b05      	cmp	r3, #5
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x404>
 8002492:	4b86      	ldr	r3, [pc, #536]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002494:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002496:	4b85      	ldr	r3, [pc, #532]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002498:	2104      	movs	r1, #4
 800249a:	430a      	orrs	r2, r1
 800249c:	65da      	str	r2, [r3, #92]	; 0x5c
 800249e:	4b83      	ldr	r3, [pc, #524]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80024a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024a2:	4b82      	ldr	r3, [pc, #520]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	430a      	orrs	r2, r1
 80024a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0x41c>
 80024ac:	4b7f      	ldr	r3, [pc, #508]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80024ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024b0:	4b7e      	ldr	r3, [pc, #504]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	438a      	bics	r2, r1
 80024b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80024b8:	4b7c      	ldr	r3, [pc, #496]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80024ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024bc:	4b7b      	ldr	r3, [pc, #492]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80024be:	2104      	movs	r1, #4
 80024c0:	438a      	bics	r2, r1
 80024c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d014      	beq.n	80024f6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7ff f818 	bl	8001500 <HAL_GetTick>
 80024d0:	0003      	movs	r3, r0
 80024d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d4:	e009      	b.n	80024ea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7ff f813 	bl	8001500 <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	4a74      	ldr	r2, [pc, #464]	; (80026b4 <HAL_RCC_OscConfig+0x60c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0db      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	2202      	movs	r2, #2
 80024f0:	4013      	ands	r3, r2
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x42e>
 80024f4:	e013      	b.n	800251e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7ff f803 	bl	8001500 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024fe:	e009      	b.n	8002514 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe fffe 	bl	8001500 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <HAL_RCC_OscConfig+0x60c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0c6      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002514:	4b65      	ldr	r3, [pc, #404]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	2202      	movs	r2, #2
 800251a:	4013      	ands	r3, r2
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800251e:	231f      	movs	r3, #31
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b60      	ldr	r3, [pc, #384]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 800252a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800252c:	4b5f      	ldr	r3, [pc, #380]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 800252e:	4962      	ldr	r1, [pc, #392]	; (80026b8 <HAL_RCC_OscConfig+0x610>)
 8002530:	400a      	ands	r2, r1
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d100      	bne.n	800253e <HAL_RCC_OscConfig+0x496>
 800253c:	e0b0      	b.n	80026a0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800253e:	4b5b      	ldr	r3, [pc, #364]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2238      	movs	r2, #56	; 0x38
 8002544:	4013      	ands	r3, r2
 8002546:	2b10      	cmp	r3, #16
 8002548:	d100      	bne.n	800254c <HAL_RCC_OscConfig+0x4a4>
 800254a:	e078      	b.n	800263e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d153      	bne.n	80025fc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002554:	4b55      	ldr	r3, [pc, #340]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b54      	ldr	r3, [pc, #336]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 800255a:	4958      	ldr	r1, [pc, #352]	; (80026bc <HAL_RCC_OscConfig+0x614>)
 800255c:	400a      	ands	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe ffce 	bl	8001500 <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7fe ffc9 	bl	8001500 <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e092      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257c:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	049b      	lsls	r3, r3, #18
 8002584:	4013      	ands	r3, r2
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002588:	4b48      	ldr	r3, [pc, #288]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a4c      	ldr	r2, [pc, #304]	; (80026c0 <HAL_RCC_OscConfig+0x618>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1a      	ldr	r2, [r3, #32]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	431a      	orrs	r2, r3
 80025b0:	4b3e      	ldr	r3, [pc, #248]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80025b2:	430a      	orrs	r2, r1
 80025b4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b3c      	ldr	r3, [pc, #240]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	0449      	lsls	r1, r1, #17
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	4b38      	ldr	r3, [pc, #224]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	0549      	lsls	r1, r1, #21
 80025ce:	430a      	orrs	r2, r1
 80025d0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7fe ff95 	bl	8001500 <HAL_GetTick>
 80025d6:	0003      	movs	r3, r0
 80025d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe ff90 	bl	8001500 <HAL_GetTick>
 80025e0:	0002      	movs	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e059      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ee:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	049b      	lsls	r3, r3, #18
 80025f6:	4013      	ands	r3, r2
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x534>
 80025fa:	e051      	b.n	80026a0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002602:	492e      	ldr	r1, [pc, #184]	; (80026bc <HAL_RCC_OscConfig+0x614>)
 8002604:	400a      	ands	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe ff7a 	bl	8001500 <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe ff75 	bl	8001500 <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e03e      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	049b      	lsls	r3, r3, #18
 800262c:	4013      	ands	r3, r2
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 8002636:	4923      	ldr	r1, [pc, #140]	; (80026c4 <HAL_RCC_OscConfig+0x61c>)
 8002638:	400a      	ands	r2, r1
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	e030      	b.n	80026a0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e02b      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_RCC_OscConfig+0x604>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2203      	movs	r2, #3
 8002654:	401a      	ands	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	429a      	cmp	r2, r3
 800265c:	d11e      	bne.n	800269c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2270      	movs	r2, #112	; 0x70
 8002662:	401a      	ands	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d117      	bne.n	800269c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	23fe      	movs	r3, #254	; 0xfe
 8002670:	01db      	lsls	r3, r3, #7
 8002672:	401a      	ands	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d10e      	bne.n	800269c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	23f8      	movs	r3, #248	; 0xf8
 8002682:	039b      	lsls	r3, r3, #14
 8002684:	401a      	ands	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	0f5b      	lsrs	r3, r3, #29
 8002692:	075a      	lsls	r2, r3, #29
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b008      	add	sp, #32
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40007000 	.word	0x40007000
 80026b4:	00001388 	.word	0x00001388
 80026b8:	efffffff 	.word	0xefffffff
 80026bc:	feffffff 	.word	0xfeffffff
 80026c0:	1fc1808c 	.word	0x1fc1808c
 80026c4:	effefffc 	.word	0xeffefffc

080026c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0e9      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2207      	movs	r2, #7
 80026e2:	4013      	ands	r3, r2
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d91e      	bls.n	8002728 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b73      	ldr	r3, [pc, #460]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2207      	movs	r2, #7
 80026f0:	4393      	bics	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	4b70      	ldr	r3, [pc, #448]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026fc:	f7fe ff00 	bl	8001500 <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002704:	e009      	b.n	800271a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002706:	f7fe fefb 	bl	8001500 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	4a6a      	ldr	r2, [pc, #424]	; (80028bc <HAL_RCC_ClockConfig+0x1f4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0ca      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800271a:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2207      	movs	r2, #7
 8002720:	4013      	ands	r3, r2
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d015      	beq.n	800275e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2204      	movs	r2, #4
 8002738:	4013      	ands	r3, r2
 800273a:	d006      	beq.n	800274a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800273c:	4b60      	ldr	r3, [pc, #384]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002742:	21e0      	movs	r1, #224	; 0xe0
 8002744:	01c9      	lsls	r1, r1, #7
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274a:	4b5d      	ldr	r3, [pc, #372]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4a5d      	ldr	r2, [pc, #372]	; (80028c4 <HAL_RCC_ClockConfig+0x1fc>)
 8002750:	4013      	ands	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2201      	movs	r2, #1
 8002764:	4013      	ands	r3, r2
 8002766:	d057      	beq.n	8002818 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d107      	bne.n	8002780 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	029b      	lsls	r3, r3, #10
 8002778:	4013      	ands	r3, r2
 800277a:	d12b      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e097      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d107      	bne.n	8002798 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002788:	4b4d      	ldr	r3, [pc, #308]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	049b      	lsls	r3, r3, #18
 8002790:	4013      	ands	r3, r2
 8002792:	d11f      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e08b      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a0:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4013      	ands	r3, r2
 80027aa:	d113      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e07f      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027b8:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 80027ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027bc:	2202      	movs	r2, #2
 80027be:	4013      	ands	r3, r2
 80027c0:	d108      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e074      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c6:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	2202      	movs	r2, #2
 80027cc:	4013      	ands	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e06d      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d4:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2207      	movs	r2, #7
 80027da:	4393      	bics	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7fe fe8a 	bl	8001500 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f0:	e009      	b.n	8002806 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f2:	f7fe fe85 	bl	8001500 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	4a2f      	ldr	r2, [pc, #188]	; (80028bc <HAL_RCC_ClockConfig+0x1f4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e054      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2238      	movs	r2, #56	; 0x38
 800280c:	401a      	ands	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	429a      	cmp	r2, r3
 8002816:	d1ec      	bne.n	80027f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2207      	movs	r2, #7
 800281e:	4013      	ands	r3, r2
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d21e      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2207      	movs	r2, #7
 800282c:	4393      	bics	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002838:	f7fe fe62 	bl	8001500 <HAL_GetTick>
 800283c:	0003      	movs	r3, r0
 800283e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002840:	e009      	b.n	8002856 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002842:	f7fe fe5d 	bl	8001500 <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_RCC_ClockConfig+0x1f4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e02c      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002856:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2207      	movs	r2, #7
 800285c:	4013      	ands	r3, r2
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2204      	movs	r2, #4
 800286a:	4013      	ands	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <HAL_RCC_ClockConfig+0x200>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800287e:	430a      	orrs	r2, r1
 8002880:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002882:	f000 f829 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002886:	0001      	movs	r1, r0
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	220f      	movs	r2, #15
 8002890:	401a      	ands	r2, r3
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x204>)
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	58d3      	ldr	r3, [r2, r3]
 8002898:	221f      	movs	r2, #31
 800289a:	4013      	ands	r3, r2
 800289c:	000a      	movs	r2, r1
 800289e:	40da      	lsrs	r2, r3
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_ClockConfig+0x208>)
 80028a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_ClockConfig+0x20c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7fe fdcd 	bl	8001448 <HAL_InitTick>
 80028ae:	0003      	movs	r3, r0
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b004      	add	sp, #16
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40022000 	.word	0x40022000
 80028bc:	00001388 	.word	0x00001388
 80028c0:	40021000 	.word	0x40021000
 80028c4:	fffff0ff 	.word	0xfffff0ff
 80028c8:	ffff8fff 	.word	0xffff8fff
 80028cc:	08007f54 	.word	0x08007f54
 80028d0:	20000008 	.word	0x20000008
 80028d4:	2000000c 	.word	0x2000000c

080028d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2238      	movs	r2, #56	; 0x38
 80028e4:	4013      	ands	r3, r2
 80028e6:	d10f      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80028e8:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0adb      	lsrs	r3, r3, #11
 80028ee:	2207      	movs	r2, #7
 80028f0:	4013      	ands	r3, r2
 80028f2:	2201      	movs	r2, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	0013      	movs	r3, r2
 80028f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80028fa:	6839      	ldr	r1, [r7, #0]
 80028fc:	4835      	ldr	r0, [pc, #212]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028fe:	f7fd fc0d 	bl	800011c <__udivsi3>
 8002902:	0003      	movs	r3, r0
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	e05d      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002908:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2238      	movs	r2, #56	; 0x38
 800290e:	4013      	ands	r3, r2
 8002910:	2b08      	cmp	r3, #8
 8002912:	d102      	bne.n	800291a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002914:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	e054      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2238      	movs	r2, #56	; 0x38
 8002920:	4013      	ands	r3, r2
 8002922:	2b10      	cmp	r3, #16
 8002924:	d138      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002926:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2203      	movs	r2, #3
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	2207      	movs	r2, #7
 8002938:	4013      	ands	r3, r2
 800293a:	3301      	adds	r3, #1
 800293c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d10d      	bne.n	8002960 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	4823      	ldr	r0, [pc, #140]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002948:	f7fd fbe8 	bl	800011c <__udivsi3>
 800294c:	0003      	movs	r3, r0
 800294e:	0019      	movs	r1, r3
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	227f      	movs	r2, #127	; 0x7f
 8002958:	4013      	ands	r3, r2
 800295a:	434b      	muls	r3, r1
 800295c:	617b      	str	r3, [r7, #20]
        break;
 800295e:	e00d      	b.n	800297c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	481c      	ldr	r0, [pc, #112]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002964:	f7fd fbda 	bl	800011c <__udivsi3>
 8002968:	0003      	movs	r3, r0
 800296a:	0019      	movs	r1, r3
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	227f      	movs	r2, #127	; 0x7f
 8002974:	4013      	ands	r3, r2
 8002976:	434b      	muls	r3, r1
 8002978:	617b      	str	r3, [r7, #20]
        break;
 800297a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	0f5b      	lsrs	r3, r3, #29
 8002982:	2207      	movs	r2, #7
 8002984:	4013      	ands	r3, r2
 8002986:	3301      	adds	r3, #1
 8002988:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	6978      	ldr	r0, [r7, #20]
 800298e:	f7fd fbc5 	bl	800011c <__udivsi3>
 8002992:	0003      	movs	r3, r0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	e015      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2238      	movs	r2, #56	; 0x38
 800299e:	4013      	ands	r3, r2
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d103      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2238      	movs	r2, #56	; 0x38
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b18      	cmp	r3, #24
 80029b6:	d103      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80029b8:	23fa      	movs	r3, #250	; 0xfa
 80029ba:	01db      	lsls	r3, r3, #7
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	e001      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029c4:	693b      	ldr	r3, [r7, #16]
}
 80029c6:	0018      	movs	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b006      	add	sp, #24
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	40021000 	.word	0x40021000
 80029d4:	00f42400 	.word	0x00f42400

080029d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029dc:	4b02      	ldr	r3, [pc, #8]	; (80029e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	20000008 	.word	0x20000008

080029ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ec:	b5b0      	push	{r4, r5, r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029f0:	f7ff fff2 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 80029f4:	0004      	movs	r4, r0
 80029f6:	f7ff fb4b 	bl	8002090 <LL_RCC_GetAPB1Prescaler>
 80029fa:	0003      	movs	r3, r0
 80029fc:	0b1a      	lsrs	r2, r3, #12
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	58d3      	ldr	r3, [r2, r3]
 8002a04:	221f      	movs	r2, #31
 8002a06:	4013      	ands	r3, r2
 8002a08:	40dc      	lsrs	r4, r3
 8002a0a:	0023      	movs	r3, r4
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bdb0      	pop	{r4, r5, r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	08007f94 	.word	0x08007f94

08002a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a20:	2313      	movs	r3, #19
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a28:	2312      	movs	r3, #18
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	029b      	lsls	r3, r3, #10
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d100      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002a3c:	e0a3      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3e:	2011      	movs	r0, #17
 8002a40:	183b      	adds	r3, r7, r0
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b86      	ldr	r3, [pc, #536]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	055b      	lsls	r3, r3, #21
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d110      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a56:	4b82      	ldr	r3, [pc, #520]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	0549      	lsls	r1, r1, #21
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a60:	4b7f      	ldr	r3, [pc, #508]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	055b      	lsls	r3, r3, #21
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6e:	183b      	adds	r3, r7, r0
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a74:	4b7b      	ldr	r3, [pc, #492]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b7a      	ldr	r3, [pc, #488]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a7a:	2180      	movs	r1, #128	; 0x80
 8002a7c:	0049      	lsls	r1, r1, #1
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a82:	f7fe fd3d 	bl	8001500 <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7fe fd38 	bl	8001500 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d904      	bls.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002a9a:	2313      	movs	r3, #19
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	701a      	strb	r2, [r3, #0]
        break;
 8002aa2:	e005      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aa4:	4b6f      	ldr	r3, [pc, #444]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4013      	ands	r3, r2
 8002aae:	d0ed      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002ab0:	2313      	movs	r3, #19
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d154      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aba:	4b69      	ldr	r3, [pc, #420]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002abc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d019      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d014      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ad6:	4b62      	ldr	r3, [pc, #392]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	4a63      	ldr	r2, [pc, #396]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ae0:	4b5f      	ldr	r3, [pc, #380]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ae2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ae4:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	0249      	lsls	r1, r1, #9
 8002aea:	430a      	orrs	r2, r1
 8002aec:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aee:	4b5c      	ldr	r3, [pc, #368]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002af0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002af2:	4b5b      	ldr	r3, [pc, #364]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002af4:	495d      	ldr	r1, [pc, #372]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002af6:	400a      	ands	r2, r1
 8002af8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002afa:	4b59      	ldr	r3, [pc, #356]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2201      	movs	r2, #1
 8002b04:	4013      	ands	r3, r2
 8002b06:	d016      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fcfa 	bl	8001500 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b10:	e00c      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fe fcf5 	bl	8001500 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	4a54      	ldr	r2, [pc, #336]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d904      	bls.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002b22:	2313      	movs	r3, #19
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2203      	movs	r2, #3
 8002b28:	701a      	strb	r2, [r3, #0]
            break;
 8002b2a:	e004      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2202      	movs	r2, #2
 8002b32:	4013      	ands	r3, r2
 8002b34:	d0ed      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002b36:	2313      	movs	r3, #19
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b40:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	4a48      	ldr	r2, [pc, #288]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b50:	430a      	orrs	r2, r1
 8002b52:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b54:	e00c      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b56:	2312      	movs	r3, #18
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	2213      	movs	r2, #19
 8002b5c:	18ba      	adds	r2, r7, r2
 8002b5e:	7812      	ldrb	r2, [r2, #0]
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e005      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b64:	2312      	movs	r3, #18
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2213      	movs	r2, #19
 8002b6a:	18ba      	adds	r2, r7, r2
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b70:	2311      	movs	r3, #17
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d105      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7a:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b7e:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b80:	493c      	ldr	r1, [pc, #240]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b82:	400a      	ands	r2, r1
 8002b84:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d009      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b90:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	2203      	movs	r2, #3
 8002b96:	4393      	bics	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	4013      	ands	r3, r2
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bae:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bcc:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	01db      	lsls	r3, r3, #7
 8002be8:	4013      	ands	r3, r2
 8002bea:	d015      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bec:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	0899      	lsrs	r1, r3, #2
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	05db      	lsls	r3, r3, #23
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d106      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	0249      	lsls	r1, r1, #9
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	4013      	ands	r3, r2
 8002c22:	d016      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	01db      	lsls	r3, r3, #7
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d106      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c4a:	2180      	movs	r1, #128	; 0x80
 8002c4c:	0249      	lsls	r1, r1, #9
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002c52:	2312      	movs	r3, #18
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	781b      	ldrb	r3, [r3, #0]
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b006      	add	sp, #24
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
 8002c68:	fffffcff 	.word	0xfffffcff
 8002c6c:	fffeffff 	.word	0xfffeffff
 8002c70:	00001388 	.word	0x00001388
 8002c74:	efffffff 	.word	0xefffffff
 8002c78:	ffffcfff 	.word	0xffffcfff
 8002c7c:	ffff3fff 	.word	0xffff3fff

08002c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e04a      	b.n	8002d28 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	223d      	movs	r2, #61	; 0x3d
 8002c96:	5c9b      	ldrb	r3, [r3, r2]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	223c      	movs	r2, #60	; 0x3c
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7fe f9a1 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	223d      	movs	r2, #61	; 0x3d
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	f000 fb21 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2248      	movs	r2, #72	; 0x48
 8002cca:	2101      	movs	r1, #1
 8002ccc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	223e      	movs	r2, #62	; 0x3e
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	223f      	movs	r2, #63	; 0x3f
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2240      	movs	r2, #64	; 0x40
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2241      	movs	r2, #65	; 0x41
 8002cea:	2101      	movs	r1, #1
 8002cec:	5499      	strb	r1, [r3, r2]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2242      	movs	r2, #66	; 0x42
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2243      	movs	r2, #67	; 0x43
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2244      	movs	r2, #68	; 0x44
 8002d02:	2101      	movs	r1, #1
 8002d04:	5499      	strb	r1, [r3, r2]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2245      	movs	r2, #69	; 0x45
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	5499      	strb	r1, [r3, r2]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2246      	movs	r2, #70	; 0x46
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2247      	movs	r2, #71	; 0x47
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	223d      	movs	r2, #61	; 0x3d
 8002d22:	2101      	movs	r1, #1
 8002d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	0018      	movs	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e04a      	b.n	8002dd8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	223d      	movs	r2, #61	; 0x3d
 8002d46:	5c9b      	ldrb	r3, [r3, r2]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d107      	bne.n	8002d5e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	223c      	movs	r2, #60	; 0x3c
 8002d52:	2100      	movs	r1, #0
 8002d54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 f841 	bl	8002de0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	223d      	movs	r2, #61	; 0x3d
 8002d62:	2102      	movs	r1, #2
 8002d64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	0019      	movs	r1, r3
 8002d70:	0010      	movs	r0, r2
 8002d72:	f000 fac9 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2248      	movs	r2, #72	; 0x48
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	223e      	movs	r2, #62	; 0x3e
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	223f      	movs	r2, #63	; 0x3f
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2240      	movs	r2, #64	; 0x40
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2241      	movs	r2, #65	; 0x41
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	5499      	strb	r1, [r3, r2]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2242      	movs	r2, #66	; 0x42
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2243      	movs	r2, #67	; 0x43
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2244      	movs	r2, #68	; 0x44
 8002db2:	2101      	movs	r1, #1
 8002db4:	5499      	strb	r1, [r3, r2]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2245      	movs	r2, #69	; 0x45
 8002dba:	2101      	movs	r1, #1
 8002dbc:	5499      	strb	r1, [r3, r2]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2246      	movs	r2, #70	; 0x46
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2247      	movs	r2, #71	; 0x47
 8002dca:	2101      	movs	r1, #1
 8002dcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	223d      	movs	r2, #61	; 0x3d
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d108      	bne.n	8002e12 <HAL_TIM_PWM_Start+0x22>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	223e      	movs	r2, #62	; 0x3e
 8002e04:	5c9b      	ldrb	r3, [r3, r2]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	1e5a      	subs	r2, r3, #1
 8002e0c:	4193      	sbcs	r3, r2
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	e037      	b.n	8002e82 <HAL_TIM_PWM_Start+0x92>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d108      	bne.n	8002e2a <HAL_TIM_PWM_Start+0x3a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	223f      	movs	r2, #63	; 0x3f
 8002e1c:	5c9b      	ldrb	r3, [r3, r2]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	1e5a      	subs	r2, r3, #1
 8002e24:	4193      	sbcs	r3, r2
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	e02b      	b.n	8002e82 <HAL_TIM_PWM_Start+0x92>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d108      	bne.n	8002e42 <HAL_TIM_PWM_Start+0x52>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2240      	movs	r2, #64	; 0x40
 8002e34:	5c9b      	ldrb	r3, [r3, r2]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	1e5a      	subs	r2, r3, #1
 8002e3c:	4193      	sbcs	r3, r2
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	e01f      	b.n	8002e82 <HAL_TIM_PWM_Start+0x92>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	d108      	bne.n	8002e5a <HAL_TIM_PWM_Start+0x6a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2241      	movs	r2, #65	; 0x41
 8002e4c:	5c9b      	ldrb	r3, [r3, r2]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	1e5a      	subs	r2, r3, #1
 8002e54:	4193      	sbcs	r3, r2
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	e013      	b.n	8002e82 <HAL_TIM_PWM_Start+0x92>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d108      	bne.n	8002e72 <HAL_TIM_PWM_Start+0x82>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2242      	movs	r2, #66	; 0x42
 8002e64:	5c9b      	ldrb	r3, [r3, r2]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	1e5a      	subs	r2, r3, #1
 8002e6c:	4193      	sbcs	r3, r2
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	e007      	b.n	8002e82 <HAL_TIM_PWM_Start+0x92>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2243      	movs	r2, #67	; 0x43
 8002e76:	5c9b      	ldrb	r3, [r3, r2]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	1e5a      	subs	r2, r3, #1
 8002e7e:	4193      	sbcs	r3, r2
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e085      	b.n	8002f96 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_PWM_Start+0xaa>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	223e      	movs	r2, #62	; 0x3e
 8002e94:	2102      	movs	r1, #2
 8002e96:	5499      	strb	r1, [r3, r2]
 8002e98:	e023      	b.n	8002ee2 <HAL_TIM_PWM_Start+0xf2>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_PWM_Start+0xba>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	223f      	movs	r2, #63	; 0x3f
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	5499      	strb	r1, [r3, r2]
 8002ea8:	e01b      	b.n	8002ee2 <HAL_TIM_PWM_Start+0xf2>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_PWM_Start+0xca>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2240      	movs	r2, #64	; 0x40
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	5499      	strb	r1, [r3, r2]
 8002eb8:	e013      	b.n	8002ee2 <HAL_TIM_PWM_Start+0xf2>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_PWM_Start+0xda>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2241      	movs	r2, #65	; 0x41
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	5499      	strb	r1, [r3, r2]
 8002ec8:	e00b      	b.n	8002ee2 <HAL_TIM_PWM_Start+0xf2>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Start+0xea>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2242      	movs	r2, #66	; 0x42
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	5499      	strb	r1, [r3, r2]
 8002ed8:	e003      	b.n	8002ee2 <HAL_TIM_PWM_Start+0xf2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2243      	movs	r2, #67	; 0x43
 8002ede:	2102      	movs	r1, #2
 8002ee0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6839      	ldr	r1, [r7, #0]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 fd46 	bl	800397c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2a      	ldr	r2, [pc, #168]	; (8002fa0 <HAL_TIM_PWM_Start+0x1b0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00e      	beq.n	8002f18 <HAL_TIM_PWM_Start+0x128>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a29      	ldr	r2, [pc, #164]	; (8002fa4 <HAL_TIM_PWM_Start+0x1b4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_TIM_PWM_Start+0x128>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <HAL_TIM_PWM_Start+0x1b8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_TIM_PWM_Start+0x128>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a26      	ldr	r2, [pc, #152]	; (8002fac <HAL_TIM_PWM_Start+0x1bc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <HAL_TIM_PWM_Start+0x12c>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <HAL_TIM_PWM_Start+0x12e>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2180      	movs	r1, #128	; 0x80
 8002f2e:	0209      	lsls	r1, r1, #8
 8002f30:	430a      	orrs	r2, r1
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_TIM_PWM_Start+0x1b0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x162>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <HAL_TIM_PWM_Start+0x1c0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x162>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <HAL_TIM_PWM_Start+0x1b4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d116      	bne.n	8002f80 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <HAL_TIM_PWM_Start+0x1c4>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d016      	beq.n	8002f92 <HAL_TIM_PWM_Start+0x1a2>
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	025b      	lsls	r3, r3, #9
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d011      	beq.n	8002f92 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7e:	e008      	b.n	8002f92 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e000      	b.n	8002f94 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f92:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b004      	add	sp, #16
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40014000 	.word	0x40014000
 8002fa8:	40014400 	.word	0x40014400
 8002fac:	40014800 	.word	0x40014800
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	00010007 	.word	0x00010007

08002fb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e090      	b.n	80030ee <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	223d      	movs	r2, #61	; 0x3d
 8002fd0:	5c9b      	ldrb	r3, [r3, r2]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	223c      	movs	r2, #60	; 0x3c
 8002fdc:	2100      	movs	r1, #0
 8002fde:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7fd ff5e 	bl	8000ea4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	223d      	movs	r2, #61	; 0x3d
 8002fec:	2102      	movs	r1, #2
 8002fee:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	493f      	ldr	r1, [pc, #252]	; (80030f8 <HAL_TIM_Encoder_Init+0x140>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	0019      	movs	r1, r3
 800300a:	0010      	movs	r0, r2
 800300c:	f000 f97c 	bl	8003308 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4a31      	ldr	r2, [pc, #196]	; (80030fc <HAL_TIM_Encoder_Init+0x144>)
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	4313      	orrs	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4a2c      	ldr	r2, [pc, #176]	; (8003100 <HAL_TIM_Encoder_Init+0x148>)
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4a2b      	ldr	r2, [pc, #172]	; (8003104 <HAL_TIM_Encoder_Init+0x14c>)
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	4313      	orrs	r3, r2
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	011a      	lsls	r2, r3, #4
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	031b      	lsls	r3, r3, #12
 800307a:	4313      	orrs	r3, r2
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2222      	movs	r2, #34	; 0x22
 8003086:	4393      	bics	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2288      	movs	r2, #136	; 0x88
 800308e:	4393      	bics	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	4313      	orrs	r3, r2
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2248      	movs	r2, #72	; 0x48
 80030c0:	2101      	movs	r1, #1
 80030c2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	223e      	movs	r2, #62	; 0x3e
 80030c8:	2101      	movs	r1, #1
 80030ca:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	223f      	movs	r2, #63	; 0x3f
 80030d0:	2101      	movs	r1, #1
 80030d2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2244      	movs	r2, #68	; 0x44
 80030d8:	2101      	movs	r1, #1
 80030da:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2245      	movs	r2, #69	; 0x45
 80030e0:	2101      	movs	r1, #1
 80030e2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	223d      	movs	r2, #61	; 0x3d
 80030e8:	2101      	movs	r1, #1
 80030ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b006      	add	sp, #24
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	fffebff8 	.word	0xfffebff8
 80030fc:	fffffcfc 	.word	0xfffffcfc
 8003100:	fffff3f3 	.word	0xfffff3f3
 8003104:	ffff0f0f 	.word	0xffff0f0f

08003108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003114:	2317      	movs	r3, #23
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	223c      	movs	r2, #60	; 0x3c
 8003120:	5c9b      	ldrb	r3, [r3, r2]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003126:	2302      	movs	r3, #2
 8003128:	e0e5      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	223c      	movs	r2, #60	; 0x3c
 800312e:	2101      	movs	r1, #1
 8003130:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b14      	cmp	r3, #20
 8003136:	d900      	bls.n	800313a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003138:	e0d1      	b.n	80032de <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	009a      	lsls	r2, r3, #2
 800313e:	4b70      	ldr	r3, [pc, #448]	; (8003300 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003140:	18d3      	adds	r3, r2, r3
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	0011      	movs	r1, r2
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f950 	bl	80033f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2108      	movs	r1, #8
 8003160:	430a      	orrs	r2, r1
 8003162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2104      	movs	r1, #4
 8003170:	438a      	bics	r2, r1
 8003172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6999      	ldr	r1, [r3, #24]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	619a      	str	r2, [r3, #24]
      break;
 8003186:	e0af      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	0011      	movs	r1, r2
 8003190:	0018      	movs	r0, r3
 8003192:	f000 f9b9 	bl	8003508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	0109      	lsls	r1, r1, #4
 80031a4:	430a      	orrs	r2, r1
 80031a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4954      	ldr	r1, [pc, #336]	; (8003304 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80031b4:	400a      	ands	r2, r1
 80031b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6999      	ldr	r1, [r3, #24]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	021a      	lsls	r2, r3, #8
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	619a      	str	r2, [r3, #24]
      break;
 80031cc:	e08c      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	0011      	movs	r1, r2
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 fa1a 	bl	8003610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2108      	movs	r1, #8
 80031e8:	430a      	orrs	r2, r1
 80031ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2104      	movs	r1, #4
 80031f8:	438a      	bics	r2, r1
 80031fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69d9      	ldr	r1, [r3, #28]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	61da      	str	r2, [r3, #28]
      break;
 800320e:	e06b      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	0011      	movs	r1, r2
 8003218:	0018      	movs	r0, r3
 800321a:	f000 fa81 	bl	8003720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	0109      	lsls	r1, r1, #4
 800322c:	430a      	orrs	r2, r1
 800322e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4932      	ldr	r1, [pc, #200]	; (8003304 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800323c:	400a      	ands	r2, r1
 800323e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69d9      	ldr	r1, [r3, #28]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	021a      	lsls	r2, r3, #8
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	61da      	str	r2, [r3, #28]
      break;
 8003254:	e048      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f000 fac8 	bl	80037f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2108      	movs	r1, #8
 8003270:	430a      	orrs	r2, r1
 8003272:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2104      	movs	r1, #4
 8003280:	438a      	bics	r2, r1
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003296:	e027      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	0011      	movs	r1, r2
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 fb07 	bl	80038b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	0109      	lsls	r1, r1, #4
 80032b4:	430a      	orrs	r2, r1
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4910      	ldr	r1, [pc, #64]	; (8003304 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80032c4:	400a      	ands	r2, r1
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	021a      	lsls	r2, r3, #8
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80032dc:	e004      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80032de:	2317      	movs	r3, #23
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]
      break;
 80032e6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	223c      	movs	r2, #60	; 0x3c
 80032ec:	2100      	movs	r1, #0
 80032ee:	5499      	strb	r1, [r3, r2]

  return status;
 80032f0:	2317      	movs	r3, #23
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	781b      	ldrb	r3, [r3, #0]
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b006      	add	sp, #24
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	08007fb4 	.word	0x08007fb4
 8003304:	fffffbff 	.word	0xfffffbff

08003308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a2f      	ldr	r2, [pc, #188]	; (80033d8 <TIM_Base_SetConfig+0xd0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_Base_SetConfig+0x20>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a2e      	ldr	r2, [pc, #184]	; (80033dc <TIM_Base_SetConfig+0xd4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d108      	bne.n	800333a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2270      	movs	r2, #112	; 0x70
 800332c:	4393      	bics	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <TIM_Base_SetConfig+0xd0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <TIM_Base_SetConfig+0x62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a25      	ldr	r2, [pc, #148]	; (80033dc <TIM_Base_SetConfig+0xd4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00f      	beq.n	800336a <TIM_Base_SetConfig+0x62>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <TIM_Base_SetConfig+0xd8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00b      	beq.n	800336a <TIM_Base_SetConfig+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <TIM_Base_SetConfig+0xdc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d007      	beq.n	800336a <TIM_Base_SetConfig+0x62>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a22      	ldr	r2, [pc, #136]	; (80033e8 <TIM_Base_SetConfig+0xe0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d003      	beq.n	800336a <TIM_Base_SetConfig+0x62>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a21      	ldr	r2, [pc, #132]	; (80033ec <TIM_Base_SetConfig+0xe4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d108      	bne.n	800337c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a20      	ldr	r2, [pc, #128]	; (80033f0 <TIM_Base_SetConfig+0xe8>)
 800336e:	4013      	ands	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	4393      	bics	r3, r2
 8003382:	001a      	movs	r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <TIM_Base_SetConfig+0xd0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00b      	beq.n	80033c2 <TIM_Base_SetConfig+0xba>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <TIM_Base_SetConfig+0xdc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d007      	beq.n	80033c2 <TIM_Base_SetConfig+0xba>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a0c      	ldr	r2, [pc, #48]	; (80033e8 <TIM_Base_SetConfig+0xe0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d003      	beq.n	80033c2 <TIM_Base_SetConfig+0xba>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <TIM_Base_SetConfig+0xe4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d103      	bne.n	80033ca <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	615a      	str	r2, [r3, #20]
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b004      	add	sp, #16
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40002000 	.word	0x40002000
 80033e4:	40014000 	.word	0x40014000
 80033e8:	40014400 	.word	0x40014400
 80033ec:	40014800 	.word	0x40014800
 80033f0:	fffffcff 	.word	0xfffffcff

080033f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	2201      	movs	r2, #1
 8003404:	4393      	bics	r3, r2
 8003406:	001a      	movs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a32      	ldr	r2, [pc, #200]	; (80034ec <TIM_OC1_SetConfig+0xf8>)
 8003422:	4013      	ands	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2203      	movs	r2, #3
 800342a:	4393      	bics	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2202      	movs	r2, #2
 800343c:	4393      	bics	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a28      	ldr	r2, [pc, #160]	; (80034f0 <TIM_OC1_SetConfig+0xfc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00b      	beq.n	800346a <TIM_OC1_SetConfig+0x76>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a27      	ldr	r2, [pc, #156]	; (80034f4 <TIM_OC1_SetConfig+0x100>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <TIM_OC1_SetConfig+0x76>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a26      	ldr	r2, [pc, #152]	; (80034f8 <TIM_OC1_SetConfig+0x104>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <TIM_OC1_SetConfig+0x76>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a25      	ldr	r2, [pc, #148]	; (80034fc <TIM_OC1_SetConfig+0x108>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d10c      	bne.n	8003484 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2208      	movs	r2, #8
 800346e:	4393      	bics	r3, r2
 8003470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2204      	movs	r2, #4
 8003480:	4393      	bics	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a1a      	ldr	r2, [pc, #104]	; (80034f0 <TIM_OC1_SetConfig+0xfc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00b      	beq.n	80034a4 <TIM_OC1_SetConfig+0xb0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <TIM_OC1_SetConfig+0x100>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d007      	beq.n	80034a4 <TIM_OC1_SetConfig+0xb0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <TIM_OC1_SetConfig+0x104>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d003      	beq.n	80034a4 <TIM_OC1_SetConfig+0xb0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a17      	ldr	r2, [pc, #92]	; (80034fc <TIM_OC1_SetConfig+0x108>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d111      	bne.n	80034c8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4a16      	ldr	r2, [pc, #88]	; (8003500 <TIM_OC1_SetConfig+0x10c>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4a15      	ldr	r2, [pc, #84]	; (8003504 <TIM_OC1_SetConfig+0x110>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	621a      	str	r2, [r3, #32]
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b006      	add	sp, #24
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	fffeff8f 	.word	0xfffeff8f
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800
 8003500:	fffffeff 	.word	0xfffffeff
 8003504:	fffffdff 	.word	0xfffffdff

08003508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	2210      	movs	r2, #16
 8003518:	4393      	bics	r3, r2
 800351a:	001a      	movs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <TIM_OC2_SetConfig+0xe8>)
 8003536:	4013      	ands	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a2d      	ldr	r2, [pc, #180]	; (80035f4 <TIM_OC2_SetConfig+0xec>)
 800353e:	4013      	ands	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2220      	movs	r2, #32
 8003552:	4393      	bics	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a24      	ldr	r2, [pc, #144]	; (80035f8 <TIM_OC2_SetConfig+0xf0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10d      	bne.n	8003586 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	4393      	bics	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	4393      	bics	r3, r2
 8003584:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1b      	ldr	r2, [pc, #108]	; (80035f8 <TIM_OC2_SetConfig+0xf0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_OC2_SetConfig+0x9e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <TIM_OC2_SetConfig+0xf4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <TIM_OC2_SetConfig+0x9e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a19      	ldr	r2, [pc, #100]	; (8003600 <TIM_OC2_SetConfig+0xf8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_OC2_SetConfig+0x9e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a18      	ldr	r2, [pc, #96]	; (8003604 <TIM_OC2_SetConfig+0xfc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d113      	bne.n	80035ce <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <TIM_OC2_SetConfig+0x100>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4a16      	ldr	r2, [pc, #88]	; (800360c <TIM_OC2_SetConfig+0x104>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	621a      	str	r2, [r3, #32]
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b006      	add	sp, #24
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	feff8fff 	.word	0xfeff8fff
 80035f4:	fffffcff 	.word	0xfffffcff
 80035f8:	40012c00 	.word	0x40012c00
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800
 8003608:	fffffbff 	.word	0xfffffbff
 800360c:	fffff7ff 	.word	0xfffff7ff

08003610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4a35      	ldr	r2, [pc, #212]	; (80036f4 <TIM_OC3_SetConfig+0xe4>)
 8003620:	401a      	ands	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a2f      	ldr	r2, [pc, #188]	; (80036f8 <TIM_OC3_SetConfig+0xe8>)
 800363c:	4013      	ands	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2203      	movs	r2, #3
 8003644:	4393      	bics	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	4a29      	ldr	r2, [pc, #164]	; (80036fc <TIM_OC3_SetConfig+0xec>)
 8003656:	4013      	ands	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a25      	ldr	r2, [pc, #148]	; (8003700 <TIM_OC3_SetConfig+0xf0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10d      	bne.n	800368a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4a24      	ldr	r2, [pc, #144]	; (8003704 <TIM_OC3_SetConfig+0xf4>)
 8003672:	4013      	ands	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	4a20      	ldr	r2, [pc, #128]	; (8003708 <TIM_OC3_SetConfig+0xf8>)
 8003686:	4013      	ands	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <TIM_OC3_SetConfig+0xf0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00b      	beq.n	80036aa <TIM_OC3_SetConfig+0x9a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1d      	ldr	r2, [pc, #116]	; (800370c <TIM_OC3_SetConfig+0xfc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <TIM_OC3_SetConfig+0x9a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <TIM_OC3_SetConfig+0x100>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d003      	beq.n	80036aa <TIM_OC3_SetConfig+0x9a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <TIM_OC3_SetConfig+0x104>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d113      	bne.n	80036d2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4a1a      	ldr	r2, [pc, #104]	; (8003718 <TIM_OC3_SetConfig+0x108>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4a19      	ldr	r2, [pc, #100]	; (800371c <TIM_OC3_SetConfig+0x10c>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	621a      	str	r2, [r3, #32]
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b006      	add	sp, #24
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	fffffeff 	.word	0xfffffeff
 80036f8:	fffeff8f 	.word	0xfffeff8f
 80036fc:	fffffdff 	.word	0xfffffdff
 8003700:	40012c00 	.word	0x40012c00
 8003704:	fffff7ff 	.word	0xfffff7ff
 8003708:	fffffbff 	.word	0xfffffbff
 800370c:	40014000 	.word	0x40014000
 8003710:	40014400 	.word	0x40014400
 8003714:	40014800 	.word	0x40014800
 8003718:	ffffefff 	.word	0xffffefff
 800371c:	ffffdfff 	.word	0xffffdfff

08003720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <TIM_OC4_SetConfig+0xb0>)
 8003730:	401a      	ands	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <TIM_OC4_SetConfig+0xb4>)
 800374c:	4013      	ands	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <TIM_OC4_SetConfig+0xb8>)
 8003754:	4013      	ands	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	021b      	lsls	r3, r3, #8
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <TIM_OC4_SetConfig+0xbc>)
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	031b      	lsls	r3, r3, #12
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <TIM_OC4_SetConfig+0xc0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00b      	beq.n	8003798 <TIM_OC4_SetConfig+0x78>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <TIM_OC4_SetConfig+0xc4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d007      	beq.n	8003798 <TIM_OC4_SetConfig+0x78>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <TIM_OC4_SetConfig+0xc8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d003      	beq.n	8003798 <TIM_OC4_SetConfig+0x78>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a16      	ldr	r2, [pc, #88]	; (80037ec <TIM_OC4_SetConfig+0xcc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d109      	bne.n	80037ac <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <TIM_OC4_SetConfig+0xd0>)
 800379c:	4013      	ands	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b006      	add	sp, #24
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	ffffefff 	.word	0xffffefff
 80037d4:	feff8fff 	.word	0xfeff8fff
 80037d8:	fffffcff 	.word	0xfffffcff
 80037dc:	ffffdfff 	.word	0xffffdfff
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40014000 	.word	0x40014000
 80037e8:	40014400 	.word	0x40014400
 80037ec:	40014800 	.word	0x40014800
 80037f0:	ffffbfff 	.word	0xffffbfff

080037f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	4a25      	ldr	r2, [pc, #148]	; (8003898 <TIM_OC5_SetConfig+0xa4>)
 8003804:	401a      	ands	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a1f      	ldr	r2, [pc, #124]	; (800389c <TIM_OC5_SetConfig+0xa8>)
 8003820:	4013      	ands	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <TIM_OC5_SetConfig+0xac>)
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	041b      	lsls	r3, r3, #16
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <TIM_OC5_SetConfig+0xb0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_OC5_SetConfig+0x6e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a16      	ldr	r2, [pc, #88]	; (80038a8 <TIM_OC5_SetConfig+0xb4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_OC5_SetConfig+0x6e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a15      	ldr	r2, [pc, #84]	; (80038ac <TIM_OC5_SetConfig+0xb8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_OC5_SetConfig+0x6e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a14      	ldr	r2, [pc, #80]	; (80038b0 <TIM_OC5_SetConfig+0xbc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d109      	bne.n	8003876 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <TIM_OC5_SetConfig+0xa4>)
 8003866:	4013      	ands	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	621a      	str	r2, [r3, #32]
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b006      	add	sp, #24
 8003896:	bd80      	pop	{r7, pc}
 8003898:	fffeffff 	.word	0xfffeffff
 800389c:	fffeff8f 	.word	0xfffeff8f
 80038a0:	fffdffff 	.word	0xfffdffff
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40014000 	.word	0x40014000
 80038ac:	40014400 	.word	0x40014400
 80038b0:	40014800 	.word	0x40014800

080038b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	4a26      	ldr	r2, [pc, #152]	; (800395c <TIM_OC6_SetConfig+0xa8>)
 80038c4:	401a      	ands	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a20      	ldr	r2, [pc, #128]	; (8003960 <TIM_OC6_SetConfig+0xac>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4a1c      	ldr	r2, [pc, #112]	; (8003964 <TIM_OC6_SetConfig+0xb0>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	051b      	lsls	r3, r3, #20
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <TIM_OC6_SetConfig+0xb4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00b      	beq.n	8003924 <TIM_OC6_SetConfig+0x70>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a17      	ldr	r2, [pc, #92]	; (800396c <TIM_OC6_SetConfig+0xb8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d007      	beq.n	8003924 <TIM_OC6_SetConfig+0x70>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a16      	ldr	r2, [pc, #88]	; (8003970 <TIM_OC6_SetConfig+0xbc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_OC6_SetConfig+0x70>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a15      	ldr	r2, [pc, #84]	; (8003974 <TIM_OC6_SetConfig+0xc0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d109      	bne.n	8003938 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	4a14      	ldr	r2, [pc, #80]	; (8003978 <TIM_OC6_SetConfig+0xc4>)
 8003928:	4013      	ands	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	029b      	lsls	r3, r3, #10
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b006      	add	sp, #24
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	ffefffff 	.word	0xffefffff
 8003960:	feff8fff 	.word	0xfeff8fff
 8003964:	ffdfffff 	.word	0xffdfffff
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800
 8003978:	fffbffff 	.word	0xfffbffff

0800397c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	221f      	movs	r2, #31
 800398c:	4013      	ands	r3, r2
 800398e:	2201      	movs	r2, #1
 8003990:	409a      	lsls	r2, r3
 8003992:	0013      	movs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	43d2      	mvns	r2, r2
 800399e:	401a      	ands	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	211f      	movs	r1, #31
 80039ac:	400b      	ands	r3, r1
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4099      	lsls	r1, r3
 80039b2:	000b      	movs	r3, r1
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b006      	add	sp, #24
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	223c      	movs	r2, #60	; 0x3c
 80039d2:	5c9b      	ldrb	r3, [r3, r2]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d8:	2302      	movs	r3, #2
 80039da:	e04f      	b.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	223c      	movs	r2, #60	; 0x3c
 80039e0:	2101      	movs	r1, #1
 80039e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	223d      	movs	r2, #61	; 0x3d
 80039e8:	2102      	movs	r1, #2
 80039ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a20      	ldr	r2, [pc, #128]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d108      	bne.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2270      	movs	r2, #112	; 0x70
 8003a1c:	4393      	bics	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d009      	beq.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d004      	beq.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d10c      	bne.n	8003a6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	4393      	bics	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	223d      	movs	r2, #61	; 0x3d
 8003a6e:	2101      	movs	r1, #1
 8003a70:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	223c      	movs	r2, #60	; 0x3c
 8003a76:	2100      	movs	r1, #0
 8003a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b004      	add	sp, #16
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	ff0fffff 	.word	0xff0fffff
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40014000 	.word	0x40014000

08003a94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	223c      	movs	r2, #60	; 0x3c
 8003aa6:	5c9b      	ldrb	r3, [r3, r2]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e079      	b.n	8003ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	223c      	movs	r2, #60	; 0x3c
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	22ff      	movs	r2, #255	; 0xff
 8003abc:	4393      	bics	r3, r2
 8003abe:	001a      	movs	r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a38      	ldr	r2, [pc, #224]	; (8003bac <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003acc:	401a      	ands	r2, r3
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a35      	ldr	r2, [pc, #212]	; (8003bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003ada:	401a      	ands	r2, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a33      	ldr	r2, [pc, #204]	; (8003bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003ae8:	401a      	ands	r2, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a30      	ldr	r2, [pc, #192]	; (8003bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003af6:	401a      	ands	r2, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a2e      	ldr	r2, [pc, #184]	; (8003bbc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003b04:	401a      	ands	r2, r3
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a2b      	ldr	r2, [pc, #172]	; (8003bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003b12:	401a      	ands	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a29      	ldr	r2, [pc, #164]	; (8003bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003b20:	401a      	ands	r2, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d106      	bne.n	8003b44 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a24      	ldr	r2, [pc, #144]	; (8003bcc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d121      	bne.n	8003b92 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a1f      	ldr	r2, [pc, #124]	; (8003bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003b52:	401a      	ands	r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	051b      	lsls	r3, r3, #20
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003b62:	401a      	ands	r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a1a      	ldr	r2, [pc, #104]	; (8003bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003b70:	401a      	ands	r2, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d106      	bne.n	8003b92 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003b88:	401a      	ands	r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	223c      	movs	r2, #60	; 0x3c
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	fffffcff 	.word	0xfffffcff
 8003bb0:	fffffbff 	.word	0xfffffbff
 8003bb4:	fffff7ff 	.word	0xfffff7ff
 8003bb8:	ffffefff 	.word	0xffffefff
 8003bbc:	ffffdfff 	.word	0xffffdfff
 8003bc0:	ffffbfff 	.word	0xffffbfff
 8003bc4:	fff0ffff 	.word	0xfff0ffff
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	efffffff 	.word	0xefffffff
 8003bd0:	ff0fffff 	.word	0xff0fffff
 8003bd4:	feffffff 	.word	0xfeffffff
 8003bd8:	fdffffff 	.word	0xfdffffff
 8003bdc:	dfffffff 	.word	0xdfffffff

08003be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e046      	b.n	8003c80 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2288      	movs	r2, #136	; 0x88
 8003bf6:	589b      	ldr	r3, [r3, r2]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2284      	movs	r2, #132	; 0x84
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f7fd faf4 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2288      	movs	r2, #136	; 0x88
 8003c10:	2124      	movs	r1, #36	; 0x24
 8003c12:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2101      	movs	r1, #1
 8003c20:	438a      	bics	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 fc66 	bl	80044f8 <UART_SetConfig>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e024      	b.n	8003c80 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 fdfd 	bl	8004840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	490d      	ldr	r1, [pc, #52]	; (8003c88 <HAL_UART_Init+0xa8>)
 8003c52:	400a      	ands	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	212a      	movs	r1, #42	; 0x2a
 8003c62:	438a      	bics	r2, r1
 8003c64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2101      	movs	r1, #1
 8003c72:	430a      	orrs	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f000 fe95 	bl	80049a8 <UART_CheckIdleState>
 8003c7e:	0003      	movs	r3, r0
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	ffffb7ff 	.word	0xffffb7ff

08003c8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	; 0x28
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	1dbb      	adds	r3, r7, #6
 8003c9a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2288      	movs	r2, #136	; 0x88
 8003ca0:	589b      	ldr	r3, [r3, r2]
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d000      	beq.n	8003ca8 <HAL_UART_Transmit+0x1c>
 8003ca6:	e088      	b.n	8003dba <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_UART_Transmit+0x2a>
 8003cae:	1dbb      	adds	r3, r7, #6
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e080      	b.n	8003dbc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	015b      	lsls	r3, r3, #5
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d109      	bne.n	8003cda <HAL_UART_Transmit+0x4e>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d001      	beq.n	8003cda <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e070      	b.n	8003dbc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2290      	movs	r2, #144	; 0x90
 8003cde:	2100      	movs	r1, #0
 8003ce0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2288      	movs	r2, #136	; 0x88
 8003ce6:	2121      	movs	r1, #33	; 0x21
 8003ce8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cea:	f7fd fc09 	bl	8001500 <HAL_GetTick>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1dba      	adds	r2, r7, #6
 8003cf6:	2154      	movs	r1, #84	; 0x54
 8003cf8:	8812      	ldrh	r2, [r2, #0]
 8003cfa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1dba      	adds	r2, r7, #6
 8003d00:	2156      	movs	r1, #86	; 0x56
 8003d02:	8812      	ldrh	r2, [r2, #0]
 8003d04:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	015b      	lsls	r3, r3, #5
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d108      	bne.n	8003d24 <HAL_UART_Transmit+0x98>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	e003      	b.n	8003d2c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d2c:	e02c      	b.n	8003d88 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	0013      	movs	r3, r2
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2180      	movs	r1, #128	; 0x80
 8003d3c:	f000 fe82 	bl	8004a44 <UART_WaitOnFlagUntilTimeout>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e039      	b.n	8003dbc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	001a      	movs	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	05d2      	lsls	r2, r2, #23
 8003d5a:	0dd2      	lsrs	r2, r2, #23
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3302      	adds	r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	e007      	b.n	8003d76 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2256      	movs	r2, #86	; 0x56
 8003d7a:	5a9b      	ldrh	r3, [r3, r2]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b299      	uxth	r1, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2256      	movs	r2, #86	; 0x56
 8003d86:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2256      	movs	r2, #86	; 0x56
 8003d8c:	5a9b      	ldrh	r3, [r3, r2]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1cc      	bne.n	8003d2e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	0013      	movs	r3, r2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	f000 fe4f 	bl	8004a44 <UART_WaitOnFlagUntilTimeout>
 8003da6:	1e03      	subs	r3, r0, #0
 8003da8:	d001      	beq.n	8003dae <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e006      	b.n	8003dbc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2288      	movs	r2, #136	; 0x88
 8003db2:	2120      	movs	r1, #32
 8003db4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	e000      	b.n	8003dbc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003dba:	2302      	movs	r3, #2
  }
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b008      	add	sp, #32
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	1dbb      	adds	r3, r7, #6
 8003dd0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	228c      	movs	r2, #140	; 0x8c
 8003dd6:	589b      	ldr	r3, [r3, r2]
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d145      	bne.n	8003e68 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_UART_Receive_DMA+0x26>
 8003de2:	1dbb      	adds	r3, r7, #6
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e03d      	b.n	8003e6a <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	015b      	lsls	r3, r3, #5
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d109      	bne.n	8003e0e <HAL_UART_Receive_DMA+0x4a>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d105      	bne.n	8003e0e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2201      	movs	r2, #1
 8003e06:	4013      	ands	r3, r2
 8003e08:	d001      	beq.n	8003e0e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02d      	b.n	8003e6a <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d019      	beq.n	8003e56 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e22:	f3ef 8310 	mrs	r3, PRIMASK
 8003e26:	613b      	str	r3, [r7, #16]
  return(result);
 8003e28:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f383 8810 	msr	PRIMASK, r3
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	04c9      	lsls	r1, r1, #19
 8003e46:	430a      	orrs	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f383 8810 	msr	PRIMASK, r3
}
 8003e54:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e56:	1dbb      	adds	r3, r7, #6
 8003e58:	881a      	ldrh	r2, [r3, #0]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f000 feb8 	bl	8004bd4 <UART_Start_Receive_DMA>
 8003e64:	0003      	movs	r3, r0
 8003e66:	e000      	b.n	8003e6a <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003e68:	2302      	movs	r3, #2
  }
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b008      	add	sp, #32
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e74:	b5b0      	push	{r4, r5, r7, lr}
 8003e76:	b0aa      	sub	sp, #168	; 0xa8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	22a4      	movs	r2, #164	; 0xa4
 8003e84:	18b9      	adds	r1, r7, r2
 8003e86:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	20a0      	movs	r0, #160	; 0xa0
 8003e90:	1839      	adds	r1, r7, r0
 8003e92:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	249c      	movs	r4, #156	; 0x9c
 8003e9c:	1939      	adds	r1, r7, r4
 8003e9e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ea0:	0011      	movs	r1, r2
 8003ea2:	18bb      	adds	r3, r7, r2
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4aa2      	ldr	r2, [pc, #648]	; (8004130 <HAL_UART_IRQHandler+0x2bc>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2298      	movs	r2, #152	; 0x98
 8003eac:	18bd      	adds	r5, r7, r2
 8003eae:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003eb0:	18bb      	adds	r3, r7, r2
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d11a      	bne.n	8003eee <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d015      	beq.n	8003eee <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ec2:	183b      	adds	r3, r7, r0
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d105      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ecc:	193b      	adds	r3, r7, r4
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	055b      	lsls	r3, r3, #21
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d00a      	beq.n	8003eee <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d100      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x6e>
 8003ee0:	e2dc      	b.n	800449c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	0010      	movs	r0, r2
 8003eea:	4798      	blx	r3
      }
      return;
 8003eec:	e2d6      	b.n	800449c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003eee:	2398      	movs	r3, #152	; 0x98
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d100      	bne.n	8003efa <HAL_UART_IRQHandler+0x86>
 8003ef8:	e122      	b.n	8004140 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003efa:	239c      	movs	r3, #156	; 0x9c
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a8c      	ldr	r2, [pc, #560]	; (8004134 <HAL_UART_IRQHandler+0x2c0>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	d106      	bne.n	8003f14 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003f06:	23a0      	movs	r3, #160	; 0xa0
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a8a      	ldr	r2, [pc, #552]	; (8004138 <HAL_UART_IRQHandler+0x2c4>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d100      	bne.n	8003f14 <HAL_UART_IRQHandler+0xa0>
 8003f12:	e115      	b.n	8004140 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f14:	23a4      	movs	r3, #164	; 0xa4
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d012      	beq.n	8003f46 <HAL_UART_IRQHandler+0xd2>
 8003f20:	23a0      	movs	r3, #160	; 0xa0
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2201      	movs	r2, #1
 8003f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2290      	movs	r2, #144	; 0x90
 8003f3a:	589b      	ldr	r3, [r3, r2]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2190      	movs	r1, #144	; 0x90
 8003f44:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f46:	23a4      	movs	r3, #164	; 0xa4
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d011      	beq.n	8003f76 <HAL_UART_IRQHandler+0x102>
 8003f52:	239c      	movs	r3, #156	; 0x9c
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d00b      	beq.n	8003f76 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2202      	movs	r2, #2
 8003f64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2290      	movs	r2, #144	; 0x90
 8003f6a:	589b      	ldr	r3, [r3, r2]
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2190      	movs	r1, #144	; 0x90
 8003f74:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f76:	23a4      	movs	r3, #164	; 0xa4
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d011      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x132>
 8003f82:	239c      	movs	r3, #156	; 0x9c
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2204      	movs	r2, #4
 8003f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2290      	movs	r2, #144	; 0x90
 8003f9a:	589b      	ldr	r3, [r3, r2]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2190      	movs	r1, #144	; 0x90
 8003fa4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fa6:	23a4      	movs	r3, #164	; 0xa4
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2208      	movs	r2, #8
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d017      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003fb2:	23a0      	movs	r3, #160	; 0xa0
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d105      	bne.n	8003fca <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003fbe:	239c      	movs	r3, #156	; 0x9c
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a5b      	ldr	r2, [pc, #364]	; (8004134 <HAL_UART_IRQHandler+0x2c0>)
 8003fc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2208      	movs	r2, #8
 8003fd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2290      	movs	r2, #144	; 0x90
 8003fd6:	589b      	ldr	r3, [r3, r2]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2190      	movs	r1, #144	; 0x90
 8003fe0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fe2:	23a4      	movs	r3, #164	; 0xa4
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	4013      	ands	r3, r2
 8003fee:	d013      	beq.n	8004018 <HAL_UART_IRQHandler+0x1a4>
 8003ff0:	23a0      	movs	r3, #160	; 0xa0
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	04db      	lsls	r3, r3, #19
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d00c      	beq.n	8004018 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2280      	movs	r2, #128	; 0x80
 8004004:	0112      	lsls	r2, r2, #4
 8004006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2290      	movs	r2, #144	; 0x90
 800400c:	589b      	ldr	r3, [r3, r2]
 800400e:	2220      	movs	r2, #32
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2190      	movs	r1, #144	; 0x90
 8004016:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2290      	movs	r2, #144	; 0x90
 800401c:	589b      	ldr	r3, [r3, r2]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d100      	bne.n	8004024 <HAL_UART_IRQHandler+0x1b0>
 8004022:	e23d      	b.n	80044a0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004024:	23a4      	movs	r3, #164	; 0xa4
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2220      	movs	r2, #32
 800402c:	4013      	ands	r3, r2
 800402e:	d015      	beq.n	800405c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004030:	23a0      	movs	r3, #160	; 0xa0
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2220      	movs	r2, #32
 8004038:	4013      	ands	r3, r2
 800403a:	d106      	bne.n	800404a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800403c:	239c      	movs	r3, #156	; 0x9c
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	055b      	lsls	r3, r3, #21
 8004046:	4013      	ands	r3, r2
 8004048:	d008      	beq.n	800405c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	0010      	movs	r0, r2
 800405a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2290      	movs	r2, #144	; 0x90
 8004060:	589b      	ldr	r3, [r3, r2]
 8004062:	2194      	movs	r1, #148	; 0x94
 8004064:	187a      	adds	r2, r7, r1
 8004066:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2240      	movs	r2, #64	; 0x40
 8004070:	4013      	ands	r3, r2
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d004      	beq.n	8004080 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004076:	187b      	adds	r3, r7, r1
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2228      	movs	r2, #40	; 0x28
 800407c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800407e:	d04c      	beq.n	800411a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	0018      	movs	r0, r3
 8004084:	f000 fe8c 	bl	8004da0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2240      	movs	r2, #64	; 0x40
 8004090:	4013      	ands	r3, r2
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	d13c      	bne.n	8004110 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004096:	f3ef 8310 	mrs	r3, PRIMASK
 800409a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800409c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	2090      	movs	r0, #144	; 0x90
 80040a0:	183a      	adds	r2, r7, r0
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	2301      	movs	r3, #1
 80040a6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040aa:	f383 8810 	msr	PRIMASK, r3
}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2140      	movs	r1, #64	; 0x40
 80040bc:	438a      	bics	r2, r1
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	183b      	adds	r3, r7, r0
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c8:	f383 8810 	msr	PRIMASK, r3
}
 80040cc:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2280      	movs	r2, #128	; 0x80
 80040d2:	589b      	ldr	r3, [r3, r2]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d016      	beq.n	8004106 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2280      	movs	r2, #128	; 0x80
 80040dc:	589b      	ldr	r3, [r3, r2]
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <HAL_UART_IRQHandler+0x2c8>)
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2280      	movs	r2, #128	; 0x80
 80040e6:	589b      	ldr	r3, [r3, r2]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7fd fc63 	bl	80019b4 <HAL_DMA_Abort_IT>
 80040ee:	1e03      	subs	r3, r0, #0
 80040f0:	d01c      	beq.n	800412c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2280      	movs	r2, #128	; 0x80
 80040f6:	589b      	ldr	r3, [r3, r2]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	2180      	movs	r1, #128	; 0x80
 80040fe:	5852      	ldr	r2, [r2, r1]
 8004100:	0010      	movs	r0, r2
 8004102:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	e012      	b.n	800412c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	0018      	movs	r0, r3
 800410a:	f000 f9e1 	bl	80044d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410e:	e00d      	b.n	800412c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	0018      	movs	r0, r3
 8004114:	f000 f9dc 	bl	80044d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	e008      	b.n	800412c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	0018      	movs	r0, r3
 800411e:	f000 f9d7 	bl	80044d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2290      	movs	r2, #144	; 0x90
 8004126:	2100      	movs	r1, #0
 8004128:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800412a:	e1b9      	b.n	80044a0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800412c:	46c0      	nop			; (mov r8, r8)
    return;
 800412e:	e1b7      	b.n	80044a0 <HAL_UART_IRQHandler+0x62c>
 8004130:	0000080f 	.word	0x0000080f
 8004134:	10000001 	.word	0x10000001
 8004138:	04000120 	.word	0x04000120
 800413c:	08005065 	.word	0x08005065

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004144:	2b01      	cmp	r3, #1
 8004146:	d000      	beq.n	800414a <HAL_UART_IRQHandler+0x2d6>
 8004148:	e13e      	b.n	80043c8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800414a:	23a4      	movs	r3, #164	; 0xa4
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2210      	movs	r2, #16
 8004152:	4013      	ands	r3, r2
 8004154:	d100      	bne.n	8004158 <HAL_UART_IRQHandler+0x2e4>
 8004156:	e137      	b.n	80043c8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004158:	23a0      	movs	r3, #160	; 0xa0
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2210      	movs	r2, #16
 8004160:	4013      	ands	r3, r2
 8004162:	d100      	bne.n	8004166 <HAL_UART_IRQHandler+0x2f2>
 8004164:	e130      	b.n	80043c8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2210      	movs	r2, #16
 800416c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2240      	movs	r2, #64	; 0x40
 8004176:	4013      	ands	r3, r2
 8004178:	2b40      	cmp	r3, #64	; 0x40
 800417a:	d000      	beq.n	800417e <HAL_UART_IRQHandler+0x30a>
 800417c:	e0a4      	b.n	80042c8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2280      	movs	r2, #128	; 0x80
 8004182:	589b      	ldr	r3, [r3, r2]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	217e      	movs	r1, #126	; 0x7e
 800418a:	187b      	adds	r3, r7, r1
 800418c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800418e:	187b      	adds	r3, r7, r1
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d100      	bne.n	8004198 <HAL_UART_IRQHandler+0x324>
 8004196:	e185      	b.n	80044a4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	225c      	movs	r2, #92	; 0x5c
 800419c:	5a9b      	ldrh	r3, [r3, r2]
 800419e:	187a      	adds	r2, r7, r1
 80041a0:	8812      	ldrh	r2, [r2, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d300      	bcc.n	80041a8 <HAL_UART_IRQHandler+0x334>
 80041a6:	e17d      	b.n	80044a4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	187a      	adds	r2, r7, r1
 80041ac:	215e      	movs	r1, #94	; 0x5e
 80041ae:	8812      	ldrh	r2, [r2, #0]
 80041b0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2280      	movs	r2, #128	; 0x80
 80041b6:	589b      	ldr	r3, [r3, r2]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2220      	movs	r2, #32
 80041be:	4013      	ands	r3, r2
 80041c0:	d170      	bne.n	80042a4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80041cc:	2301      	movs	r3, #1
 80041ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	49b4      	ldr	r1, [pc, #720]	; (80044b4 <HAL_UART_IRQHandler+0x640>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f4:	f3ef 8310 	mrs	r3, PRIMASK
 80041f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80041fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fc:	677b      	str	r3, [r7, #116]	; 0x74
 80041fe:	2301      	movs	r3, #1
 8004200:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004204:	f383 8810 	msr	PRIMASK, r3
}
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2101      	movs	r1, #1
 8004216:	438a      	bics	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004220:	f383 8810 	msr	PRIMASK, r3
}
 8004224:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004226:	f3ef 8310 	mrs	r3, PRIMASK
 800422a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800422c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800422e:	673b      	str	r3, [r7, #112]	; 0x70
 8004230:	2301      	movs	r3, #1
 8004232:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004236:	f383 8810 	msr	PRIMASK, r3
}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2140      	movs	r1, #64	; 0x40
 8004248:	438a      	bics	r2, r1
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800424e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004252:	f383 8810 	msr	PRIMASK, r3
}
 8004256:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	228c      	movs	r2, #140	; 0x8c
 800425c:	2120      	movs	r1, #32
 800425e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004266:	f3ef 8310 	mrs	r3, PRIMASK
 800426a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800426c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004270:	2301      	movs	r3, #1
 8004272:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004276:	f383 8810 	msr	PRIMASK, r3
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2110      	movs	r1, #16
 8004288:	438a      	bics	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004292:	f383 8810 	msr	PRIMASK, r3
}
 8004296:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	589b      	ldr	r3, [r3, r2]
 800429e:	0018      	movs	r0, r3
 80042a0:	f7fd fb26 	bl	80018f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	225c      	movs	r2, #92	; 0x5c
 80042ae:	5a9a      	ldrh	r2, [r3, r2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	215e      	movs	r1, #94	; 0x5e
 80042b4:	5a5b      	ldrh	r3, [r3, r1]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	0011      	movs	r1, r2
 80042c0:	0018      	movs	r0, r3
 80042c2:	f000 f90d 	bl	80044e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042c6:	e0ed      	b.n	80044a4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	225c      	movs	r2, #92	; 0x5c
 80042cc:	5a99      	ldrh	r1, [r3, r2]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	225e      	movs	r2, #94	; 0x5e
 80042d2:	5a9b      	ldrh	r3, [r3, r2]
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	208e      	movs	r0, #142	; 0x8e
 80042d8:	183b      	adds	r3, r7, r0
 80042da:	1a8a      	subs	r2, r1, r2
 80042dc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	225e      	movs	r2, #94	; 0x5e
 80042e2:	5a9b      	ldrh	r3, [r3, r2]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d100      	bne.n	80042ec <HAL_UART_IRQHandler+0x478>
 80042ea:	e0dd      	b.n	80044a8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80042ec:	183b      	adds	r3, r7, r0
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d100      	bne.n	80042f6 <HAL_UART_IRQHandler+0x482>
 80042f4:	e0d8      	b.n	80044a8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f6:	f3ef 8310 	mrs	r3, PRIMASK
 80042fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80042fc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042fe:	2488      	movs	r4, #136	; 0x88
 8004300:	193a      	adds	r2, r7, r4
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	2301      	movs	r3, #1
 8004306:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4967      	ldr	r1, [pc, #412]	; (80044b8 <HAL_UART_IRQHandler+0x644>)
 800431c:	400a      	ands	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	193b      	adds	r3, r7, r4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f383 8810 	msr	PRIMASK, r3
}
 800432c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432e:	f3ef 8310 	mrs	r3, PRIMASK
 8004332:	61bb      	str	r3, [r7, #24]
  return(result);
 8004334:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004336:	2484      	movs	r4, #132	; 0x84
 8004338:	193a      	adds	r2, r7, r4
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	2301      	movs	r3, #1
 800433e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f383 8810 	msr	PRIMASK, r3
}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	495a      	ldr	r1, [pc, #360]	; (80044bc <HAL_UART_IRQHandler+0x648>)
 8004354:	400a      	ands	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	193b      	adds	r3, r7, r4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f383 8810 	msr	PRIMASK, r3
}
 8004364:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	228c      	movs	r2, #140	; 0x8c
 800436a:	2120      	movs	r1, #32
 800436c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800437a:	f3ef 8310 	mrs	r3, PRIMASK
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004382:	2480      	movs	r4, #128	; 0x80
 8004384:	193a      	adds	r2, r7, r4
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	2301      	movs	r3, #1
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	f383 8810 	msr	PRIMASK, r3
}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2110      	movs	r1, #16
 80043a0:	438a      	bics	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	193b      	adds	r3, r7, r4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	f383 8810 	msr	PRIMASK, r3
}
 80043b0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043b8:	183b      	adds	r3, r7, r0
 80043ba:	881a      	ldrh	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	0011      	movs	r1, r2
 80043c0:	0018      	movs	r0, r3
 80043c2:	f000 f88d 	bl	80044e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043c6:	e06f      	b.n	80044a8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043c8:	23a4      	movs	r3, #164	; 0xa4
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	035b      	lsls	r3, r3, #13
 80043d2:	4013      	ands	r3, r2
 80043d4:	d010      	beq.n	80043f8 <HAL_UART_IRQHandler+0x584>
 80043d6:	239c      	movs	r3, #156	; 0x9c
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	03db      	lsls	r3, r3, #15
 80043e0:	4013      	ands	r3, r2
 80043e2:	d009      	beq.n	80043f8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2280      	movs	r2, #128	; 0x80
 80043ea:	0352      	lsls	r2, r2, #13
 80043ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f000 fe7a 	bl	80050ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043f6:	e05a      	b.n	80044ae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80043f8:	23a4      	movs	r3, #164	; 0xa4
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2280      	movs	r2, #128	; 0x80
 8004400:	4013      	ands	r3, r2
 8004402:	d016      	beq.n	8004432 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004404:	23a0      	movs	r3, #160	; 0xa0
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2280      	movs	r2, #128	; 0x80
 800440c:	4013      	ands	r3, r2
 800440e:	d106      	bne.n	800441e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004410:	239c      	movs	r3, #156	; 0x9c
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	4013      	ands	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004422:	2b00      	cmp	r3, #0
 8004424:	d042      	beq.n	80044ac <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	0010      	movs	r0, r2
 800442e:	4798      	blx	r3
    }
    return;
 8004430:	e03c      	b.n	80044ac <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004432:	23a4      	movs	r3, #164	; 0xa4
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2240      	movs	r2, #64	; 0x40
 800443a:	4013      	ands	r3, r2
 800443c:	d00a      	beq.n	8004454 <HAL_UART_IRQHandler+0x5e0>
 800443e:	23a0      	movs	r3, #160	; 0xa0
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2240      	movs	r2, #64	; 0x40
 8004446:	4013      	ands	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0018      	movs	r0, r3
 800444e:	f000 fe20 	bl	8005092 <UART_EndTransmit_IT>
    return;
 8004452:	e02c      	b.n	80044ae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004454:	23a4      	movs	r3, #164	; 0xa4
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	041b      	lsls	r3, r3, #16
 800445e:	4013      	ands	r3, r2
 8004460:	d00b      	beq.n	800447a <HAL_UART_IRQHandler+0x606>
 8004462:	23a0      	movs	r3, #160	; 0xa0
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	05db      	lsls	r3, r3, #23
 800446c:	4013      	ands	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	0018      	movs	r0, r3
 8004474:	f000 fe49 	bl	800510a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004478:	e019      	b.n	80044ae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800447a:	23a4      	movs	r3, #164	; 0xa4
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	045b      	lsls	r3, r3, #17
 8004484:	4013      	ands	r3, r2
 8004486:	d012      	beq.n	80044ae <HAL_UART_IRQHandler+0x63a>
 8004488:	23a0      	movs	r3, #160	; 0xa0
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	da0d      	bge.n	80044ae <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0018      	movs	r0, r3
 8004496:	f000 fe30 	bl	80050fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800449a:	e008      	b.n	80044ae <HAL_UART_IRQHandler+0x63a>
      return;
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	e006      	b.n	80044ae <HAL_UART_IRQHandler+0x63a>
    return;
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	e004      	b.n	80044ae <HAL_UART_IRQHandler+0x63a>
      return;
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	e002      	b.n	80044ae <HAL_UART_IRQHandler+0x63a>
      return;
 80044a8:	46c0      	nop			; (mov r8, r8)
 80044aa:	e000      	b.n	80044ae <HAL_UART_IRQHandler+0x63a>
    return;
 80044ac:	46c0      	nop			; (mov r8, r8)
  }
}
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b02a      	add	sp, #168	; 0xa8
 80044b2:	bdb0      	pop	{r4, r5, r7, pc}
 80044b4:	fffffeff 	.word	0xfffffeff
 80044b8:	fffffedf 	.word	0xfffffedf
 80044bc:	effffffe 	.word	0xeffffffe

080044c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	000a      	movs	r2, r1
 80044ea:	1cbb      	adds	r3, r7, #2
 80044ec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004500:	231a      	movs	r3, #26
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	2200      	movs	r2, #0
 8004506:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4313      	orrs	r3, r2
 800451e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4abc      	ldr	r2, [pc, #752]	; (8004818 <UART_SetConfig+0x320>)
 8004528:	4013      	ands	r3, r2
 800452a:	0019      	movs	r1, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	430a      	orrs	r2, r1
 8004534:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4ab7      	ldr	r2, [pc, #732]	; (800481c <UART_SetConfig+0x324>)
 800453e:	4013      	ands	r3, r2
 8004540:	0019      	movs	r1, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	4313      	orrs	r3, r2
 800455c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4aae      	ldr	r2, [pc, #696]	; (8004820 <UART_SetConfig+0x328>)
 8004566:	4013      	ands	r3, r2
 8004568:	0019      	movs	r1, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	220f      	movs	r2, #15
 800457c:	4393      	bics	r3, r2
 800457e:	0019      	movs	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4aa4      	ldr	r2, [pc, #656]	; (8004824 <UART_SetConfig+0x32c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d127      	bne.n	80045e6 <UART_SetConfig+0xee>
 8004596:	4ba4      	ldr	r3, [pc, #656]	; (8004828 <UART_SetConfig+0x330>)
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	2203      	movs	r2, #3
 800459c:	4013      	ands	r3, r2
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d017      	beq.n	80045d2 <UART_SetConfig+0xda>
 80045a2:	d81b      	bhi.n	80045dc <UART_SetConfig+0xe4>
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d00a      	beq.n	80045be <UART_SetConfig+0xc6>
 80045a8:	d818      	bhi.n	80045dc <UART_SetConfig+0xe4>
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <UART_SetConfig+0xbc>
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d00a      	beq.n	80045c8 <UART_SetConfig+0xd0>
 80045b2:	e013      	b.n	80045dc <UART_SetConfig+0xe4>
 80045b4:	231b      	movs	r3, #27
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	e058      	b.n	8004670 <UART_SetConfig+0x178>
 80045be:	231b      	movs	r3, #27
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	2202      	movs	r2, #2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e053      	b.n	8004670 <UART_SetConfig+0x178>
 80045c8:	231b      	movs	r3, #27
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	2204      	movs	r2, #4
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e04e      	b.n	8004670 <UART_SetConfig+0x178>
 80045d2:	231b      	movs	r3, #27
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	2208      	movs	r2, #8
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e049      	b.n	8004670 <UART_SetConfig+0x178>
 80045dc:	231b      	movs	r3, #27
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	2210      	movs	r2, #16
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	e044      	b.n	8004670 <UART_SetConfig+0x178>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a90      	ldr	r2, [pc, #576]	; (800482c <UART_SetConfig+0x334>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d127      	bne.n	8004640 <UART_SetConfig+0x148>
 80045f0:	4b8d      	ldr	r3, [pc, #564]	; (8004828 <UART_SetConfig+0x330>)
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	220c      	movs	r2, #12
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b0c      	cmp	r3, #12
 80045fa:	d017      	beq.n	800462c <UART_SetConfig+0x134>
 80045fc:	d81b      	bhi.n	8004636 <UART_SetConfig+0x13e>
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d00a      	beq.n	8004618 <UART_SetConfig+0x120>
 8004602:	d818      	bhi.n	8004636 <UART_SetConfig+0x13e>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <UART_SetConfig+0x116>
 8004608:	2b04      	cmp	r3, #4
 800460a:	d00a      	beq.n	8004622 <UART_SetConfig+0x12a>
 800460c:	e013      	b.n	8004636 <UART_SetConfig+0x13e>
 800460e:	231b      	movs	r3, #27
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	e02b      	b.n	8004670 <UART_SetConfig+0x178>
 8004618:	231b      	movs	r3, #27
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	2202      	movs	r2, #2
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	e026      	b.n	8004670 <UART_SetConfig+0x178>
 8004622:	231b      	movs	r3, #27
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	2204      	movs	r2, #4
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e021      	b.n	8004670 <UART_SetConfig+0x178>
 800462c:	231b      	movs	r3, #27
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	2208      	movs	r2, #8
 8004632:	701a      	strb	r2, [r3, #0]
 8004634:	e01c      	b.n	8004670 <UART_SetConfig+0x178>
 8004636:	231b      	movs	r3, #27
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	2210      	movs	r2, #16
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e017      	b.n	8004670 <UART_SetConfig+0x178>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a7a      	ldr	r2, [pc, #488]	; (8004830 <UART_SetConfig+0x338>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d104      	bne.n	8004654 <UART_SetConfig+0x15c>
 800464a:	231b      	movs	r3, #27
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	e00d      	b.n	8004670 <UART_SetConfig+0x178>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a76      	ldr	r2, [pc, #472]	; (8004834 <UART_SetConfig+0x33c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d104      	bne.n	8004668 <UART_SetConfig+0x170>
 800465e:	231b      	movs	r3, #27
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	e003      	b.n	8004670 <UART_SetConfig+0x178>
 8004668:	231b      	movs	r3, #27
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	2210      	movs	r2, #16
 800466e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	429a      	cmp	r2, r3
 800467a:	d000      	beq.n	800467e <UART_SetConfig+0x186>
 800467c:	e065      	b.n	800474a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800467e:	231b      	movs	r3, #27
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d015      	beq.n	80046b4 <UART_SetConfig+0x1bc>
 8004688:	dc18      	bgt.n	80046bc <UART_SetConfig+0x1c4>
 800468a:	2b04      	cmp	r3, #4
 800468c:	d00d      	beq.n	80046aa <UART_SetConfig+0x1b2>
 800468e:	dc15      	bgt.n	80046bc <UART_SetConfig+0x1c4>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <UART_SetConfig+0x1a2>
 8004694:	2b02      	cmp	r3, #2
 8004696:	d005      	beq.n	80046a4 <UART_SetConfig+0x1ac>
 8004698:	e010      	b.n	80046bc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800469a:	f7fe f9a7 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 800469e:	0003      	movs	r3, r0
 80046a0:	617b      	str	r3, [r7, #20]
        break;
 80046a2:	e012      	b.n	80046ca <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a4:	4b64      	ldr	r3, [pc, #400]	; (8004838 <UART_SetConfig+0x340>)
 80046a6:	617b      	str	r3, [r7, #20]
        break;
 80046a8:	e00f      	b.n	80046ca <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046aa:	f7fe f915 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 80046ae:	0003      	movs	r3, r0
 80046b0:	617b      	str	r3, [r7, #20]
        break;
 80046b2:	e00a      	b.n	80046ca <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	617b      	str	r3, [r7, #20]
        break;
 80046ba:	e006      	b.n	80046ca <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046c0:	231a      	movs	r3, #26
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	2201      	movs	r2, #1
 80046c6:	701a      	strb	r2, [r3, #0]
        break;
 80046c8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d100      	bne.n	80046d2 <UART_SetConfig+0x1da>
 80046d0:	e08d      	b.n	80047ee <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d6:	4b59      	ldr	r3, [pc, #356]	; (800483c <UART_SetConfig+0x344>)
 80046d8:	0052      	lsls	r2, r2, #1
 80046da:	5ad3      	ldrh	r3, [r2, r3]
 80046dc:	0019      	movs	r1, r3
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f7fb fd1c 	bl	800011c <__udivsi3>
 80046e4:	0003      	movs	r3, r0
 80046e6:	005a      	lsls	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	18d2      	adds	r2, r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	0019      	movs	r1, r3
 80046f6:	0010      	movs	r0, r2
 80046f8:	f7fb fd10 	bl	800011c <__udivsi3>
 80046fc:	0003      	movs	r3, r0
 80046fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2b0f      	cmp	r3, #15
 8004704:	d91c      	bls.n	8004740 <UART_SetConfig+0x248>
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	025b      	lsls	r3, r3, #9
 800470c:	429a      	cmp	r2, r3
 800470e:	d217      	bcs.n	8004740 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	b29a      	uxth	r2, r3
 8004714:	200e      	movs	r0, #14
 8004716:	183b      	adds	r3, r7, r0
 8004718:	210f      	movs	r1, #15
 800471a:	438a      	bics	r2, r1
 800471c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	b29b      	uxth	r3, r3
 8004724:	2207      	movs	r2, #7
 8004726:	4013      	ands	r3, r2
 8004728:	b299      	uxth	r1, r3
 800472a:	183b      	adds	r3, r7, r0
 800472c:	183a      	adds	r2, r7, r0
 800472e:	8812      	ldrh	r2, [r2, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	183a      	adds	r2, r7, r0
 800473a:	8812      	ldrh	r2, [r2, #0]
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	e056      	b.n	80047ee <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004740:	231a      	movs	r3, #26
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e051      	b.n	80047ee <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800474a:	231b      	movs	r3, #27
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d015      	beq.n	8004780 <UART_SetConfig+0x288>
 8004754:	dc18      	bgt.n	8004788 <UART_SetConfig+0x290>
 8004756:	2b04      	cmp	r3, #4
 8004758:	d00d      	beq.n	8004776 <UART_SetConfig+0x27e>
 800475a:	dc15      	bgt.n	8004788 <UART_SetConfig+0x290>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <UART_SetConfig+0x26e>
 8004760:	2b02      	cmp	r3, #2
 8004762:	d005      	beq.n	8004770 <UART_SetConfig+0x278>
 8004764:	e010      	b.n	8004788 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004766:	f7fe f941 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 800476a:	0003      	movs	r3, r0
 800476c:	617b      	str	r3, [r7, #20]
        break;
 800476e:	e012      	b.n	8004796 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004770:	4b31      	ldr	r3, [pc, #196]	; (8004838 <UART_SetConfig+0x340>)
 8004772:	617b      	str	r3, [r7, #20]
        break;
 8004774:	e00f      	b.n	8004796 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004776:	f7fe f8af 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 800477a:	0003      	movs	r3, r0
 800477c:	617b      	str	r3, [r7, #20]
        break;
 800477e:	e00a      	b.n	8004796 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	617b      	str	r3, [r7, #20]
        break;
 8004786:	e006      	b.n	8004796 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800478c:	231a      	movs	r3, #26
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2201      	movs	r2, #1
 8004792:	701a      	strb	r2, [r3, #0]
        break;
 8004794:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d028      	beq.n	80047ee <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a0:	4b26      	ldr	r3, [pc, #152]	; (800483c <UART_SetConfig+0x344>)
 80047a2:	0052      	lsls	r2, r2, #1
 80047a4:	5ad3      	ldrh	r3, [r2, r3]
 80047a6:	0019      	movs	r1, r3
 80047a8:	6978      	ldr	r0, [r7, #20]
 80047aa:	f7fb fcb7 	bl	800011c <__udivsi3>
 80047ae:	0003      	movs	r3, r0
 80047b0:	001a      	movs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	085b      	lsrs	r3, r3, #1
 80047b8:	18d2      	adds	r2, r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	0019      	movs	r1, r3
 80047c0:	0010      	movs	r0, r2
 80047c2:	f7fb fcab 	bl	800011c <__udivsi3>
 80047c6:	0003      	movs	r3, r0
 80047c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b0f      	cmp	r3, #15
 80047ce:	d90a      	bls.n	80047e6 <UART_SetConfig+0x2ee>
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	025b      	lsls	r3, r3, #9
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d205      	bcs.n	80047e6 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	b29a      	uxth	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60da      	str	r2, [r3, #12]
 80047e4:	e003      	b.n	80047ee <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80047e6:	231a      	movs	r3, #26
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	2201      	movs	r2, #1
 80047ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	226a      	movs	r2, #106	; 0x6a
 80047f2:	2101      	movs	r1, #1
 80047f4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2268      	movs	r2, #104	; 0x68
 80047fa:	2101      	movs	r1, #1
 80047fc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800480a:	231a      	movs	r3, #26
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	781b      	ldrb	r3, [r3, #0]
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b008      	add	sp, #32
 8004816:	bd80      	pop	{r7, pc}
 8004818:	cfff69f3 	.word	0xcfff69f3
 800481c:	ffffcfff 	.word	0xffffcfff
 8004820:	11fff4ff 	.word	0x11fff4ff
 8004824:	40013800 	.word	0x40013800
 8004828:	40021000 	.word	0x40021000
 800482c:	40004400 	.word	0x40004400
 8004830:	40004800 	.word	0x40004800
 8004834:	40004c00 	.word	0x40004c00
 8004838:	00f42400 	.word	0x00f42400
 800483c:	08008008 	.word	0x08008008

08004840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	2201      	movs	r2, #1
 800484e:	4013      	ands	r3, r2
 8004850:	d00b      	beq.n	800486a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4a4a      	ldr	r2, [pc, #296]	; (8004984 <UART_AdvFeatureConfig+0x144>)
 800485a:	4013      	ands	r3, r2
 800485c:	0019      	movs	r1, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	2202      	movs	r2, #2
 8004870:	4013      	ands	r3, r2
 8004872:	d00b      	beq.n	800488c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4a43      	ldr	r2, [pc, #268]	; (8004988 <UART_AdvFeatureConfig+0x148>)
 800487c:	4013      	ands	r3, r2
 800487e:	0019      	movs	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	2204      	movs	r2, #4
 8004892:	4013      	ands	r3, r2
 8004894:	d00b      	beq.n	80048ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4a3b      	ldr	r2, [pc, #236]	; (800498c <UART_AdvFeatureConfig+0x14c>)
 800489e:	4013      	ands	r3, r2
 80048a0:	0019      	movs	r1, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	2208      	movs	r2, #8
 80048b4:	4013      	ands	r3, r2
 80048b6:	d00b      	beq.n	80048d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	4a34      	ldr	r2, [pc, #208]	; (8004990 <UART_AdvFeatureConfig+0x150>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	0019      	movs	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	2210      	movs	r2, #16
 80048d6:	4013      	ands	r3, r2
 80048d8:	d00b      	beq.n	80048f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4a2c      	ldr	r2, [pc, #176]	; (8004994 <UART_AdvFeatureConfig+0x154>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	0019      	movs	r1, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	2220      	movs	r2, #32
 80048f8:	4013      	ands	r3, r2
 80048fa:	d00b      	beq.n	8004914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	4a25      	ldr	r2, [pc, #148]	; (8004998 <UART_AdvFeatureConfig+0x158>)
 8004904:	4013      	ands	r3, r2
 8004906:	0019      	movs	r1, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	2240      	movs	r2, #64	; 0x40
 800491a:	4013      	ands	r3, r2
 800491c:	d01d      	beq.n	800495a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a1d      	ldr	r2, [pc, #116]	; (800499c <UART_AdvFeatureConfig+0x15c>)
 8004926:	4013      	ands	r3, r2
 8004928:	0019      	movs	r1, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	035b      	lsls	r3, r3, #13
 800493e:	429a      	cmp	r2, r3
 8004940:	d10b      	bne.n	800495a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <UART_AdvFeatureConfig+0x160>)
 800494a:	4013      	ands	r3, r2
 800494c:	0019      	movs	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	2280      	movs	r2, #128	; 0x80
 8004960:	4013      	ands	r3, r2
 8004962:	d00b      	beq.n	800497c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4a0e      	ldr	r2, [pc, #56]	; (80049a4 <UART_AdvFeatureConfig+0x164>)
 800496c:	4013      	ands	r3, r2
 800496e:	0019      	movs	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
  }
}
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}
 8004984:	fffdffff 	.word	0xfffdffff
 8004988:	fffeffff 	.word	0xfffeffff
 800498c:	fffbffff 	.word	0xfffbffff
 8004990:	ffff7fff 	.word	0xffff7fff
 8004994:	ffffefff 	.word	0xffffefff
 8004998:	ffffdfff 	.word	0xffffdfff
 800499c:	ffefffff 	.word	0xffefffff
 80049a0:	ff9fffff 	.word	0xff9fffff
 80049a4:	fff7ffff 	.word	0xfff7ffff

080049a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2290      	movs	r2, #144	; 0x90
 80049b4:	2100      	movs	r1, #0
 80049b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049b8:	f7fc fda2 	bl	8001500 <HAL_GetTick>
 80049bc:	0003      	movs	r3, r0
 80049be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2208      	movs	r2, #8
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d10c      	bne.n	80049e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2280      	movs	r2, #128	; 0x80
 80049d2:	0391      	lsls	r1, r2, #14
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4a1a      	ldr	r2, [pc, #104]	; (8004a40 <UART_CheckIdleState+0x98>)
 80049d8:	9200      	str	r2, [sp, #0]
 80049da:	2200      	movs	r2, #0
 80049dc:	f000 f832 	bl	8004a44 <UART_WaitOnFlagUntilTimeout>
 80049e0:	1e03      	subs	r3, r0, #0
 80049e2:	d001      	beq.n	80049e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e026      	b.n	8004a36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2204      	movs	r2, #4
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d10c      	bne.n	8004a10 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2280      	movs	r2, #128	; 0x80
 80049fa:	03d1      	lsls	r1, r2, #15
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4a10      	ldr	r2, [pc, #64]	; (8004a40 <UART_CheckIdleState+0x98>)
 8004a00:	9200      	str	r2, [sp, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f000 f81e 	bl	8004a44 <UART_WaitOnFlagUntilTimeout>
 8004a08:	1e03      	subs	r3, r0, #0
 8004a0a:	d001      	beq.n	8004a10 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e012      	b.n	8004a36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2288      	movs	r2, #136	; 0x88
 8004a14:	2120      	movs	r1, #32
 8004a16:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	228c      	movs	r2, #140	; 0x8c
 8004a1c:	2120      	movs	r1, #32
 8004a1e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2284      	movs	r2, #132	; 0x84
 8004a30:	2100      	movs	r1, #0
 8004a32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b004      	add	sp, #16
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	01ffffff 	.word	0x01ffffff

08004a44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b094      	sub	sp, #80	; 0x50
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	1dfb      	adds	r3, r7, #7
 8004a52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a54:	e0a7      	b.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a58:	3301      	adds	r3, #1
 8004a5a:	d100      	bne.n	8004a5e <UART_WaitOnFlagUntilTimeout+0x1a>
 8004a5c:	e0a3      	b.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5e:	f7fc fd4f 	bl	8001500 <HAL_GetTick>
 8004a62:	0002      	movs	r2, r0
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d13f      	bne.n	8004af4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a74:	f3ef 8310 	mrs	r3, PRIMASK
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a7e:	2301      	movs	r3, #1
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	f383 8810 	msr	PRIMASK, r3
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	494e      	ldr	r1, [pc, #312]	; (8004bd0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004a96:	400a      	ands	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a9c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	f383 8810 	msr	PRIMASK, r3
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aae:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	f383 8810 	msr	PRIMASK, r3
}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	438a      	bics	r2, r1
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad2:	f383 8810 	msr	PRIMASK, r3
}
 8004ad6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2288      	movs	r2, #136	; 0x88
 8004adc:	2120      	movs	r1, #32
 8004ade:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	228c      	movs	r2, #140	; 0x8c
 8004ae4:	2120      	movs	r1, #32
 8004ae6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2284      	movs	r2, #132	; 0x84
 8004aec:	2100      	movs	r1, #0
 8004aee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e069      	b.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2204      	movs	r2, #4
 8004afc:	4013      	ands	r3, r2
 8004afe:	d052      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	2380      	movs	r3, #128	; 0x80
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	401a      	ands	r2, r3
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d148      	bne.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2280      	movs	r2, #128	; 0x80
 8004b1a:	0112      	lsls	r2, r2, #4
 8004b1c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b22:	613b      	str	r3, [r7, #16]
  return(result);
 8004b24:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b28:	2301      	movs	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f383 8810 	msr	PRIMASK, r3
}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4924      	ldr	r1, [pc, #144]	; (8004bd0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004b40:	400a      	ands	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f383 8810 	msr	PRIMASK, r3
}
 8004b4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b50:	f3ef 8310 	mrs	r3, PRIMASK
 8004b54:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b56:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b58:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	f383 8810 	msr	PRIMASK, r3
}
 8004b64:	46c0      	nop			; (mov r8, r8)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2101      	movs	r1, #1
 8004b72:	438a      	bics	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
 8004b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	f383 8810 	msr	PRIMASK, r3
}
 8004b80:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2288      	movs	r2, #136	; 0x88
 8004b86:	2120      	movs	r1, #32
 8004b88:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	228c      	movs	r2, #140	; 0x8c
 8004b8e:	2120      	movs	r1, #32
 8004b90:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2290      	movs	r2, #144	; 0x90
 8004b96:	2120      	movs	r1, #32
 8004b98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2284      	movs	r2, #132	; 0x84
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e010      	b.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	425a      	negs	r2, r3
 8004bb6:	4153      	adcs	r3, r2
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	001a      	movs	r2, r3
 8004bbc:	1dfb      	adds	r3, r7, #7
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d100      	bne.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x182>
 8004bc4:	e747      	b.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	0018      	movs	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b014      	add	sp, #80	; 0x50
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	fffffe5f 	.word	0xfffffe5f

08004bd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b090      	sub	sp, #64	; 0x40
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	1dbb      	adds	r3, r7, #6
 8004be0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1dba      	adds	r2, r7, #6
 8004bec:	215c      	movs	r1, #92	; 0x5c
 8004bee:	8812      	ldrh	r2, [r2, #0]
 8004bf0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2290      	movs	r2, #144	; 0x90
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	228c      	movs	r2, #140	; 0x8c
 8004bfe:	2122      	movs	r1, #34	; 0x22
 8004c00:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2280      	movs	r2, #128	; 0x80
 8004c06:	589b      	ldr	r3, [r3, r2]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d02d      	beq.n	8004c68 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	589b      	ldr	r3, [r3, r2]
 8004c12:	4a40      	ldr	r2, [pc, #256]	; (8004d14 <UART_Start_Receive_DMA+0x140>)
 8004c14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2280      	movs	r2, #128	; 0x80
 8004c1a:	589b      	ldr	r3, [r3, r2]
 8004c1c:	4a3e      	ldr	r2, [pc, #248]	; (8004d18 <UART_Start_Receive_DMA+0x144>)
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	589b      	ldr	r3, [r3, r2]
 8004c26:	4a3d      	ldr	r2, [pc, #244]	; (8004d1c <UART_Start_Receive_DMA+0x148>)
 8004c28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2280      	movs	r2, #128	; 0x80
 8004c2e:	589b      	ldr	r3, [r3, r2]
 8004c30:	2200      	movs	r2, #0
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2280      	movs	r2, #128	; 0x80
 8004c38:	5898      	ldr	r0, [r3, r2]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3324      	adds	r3, #36	; 0x24
 8004c40:	0019      	movs	r1, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	001a      	movs	r2, r3
 8004c48:	1dbb      	adds	r3, r7, #6
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	f7fc fdca 	bl	80017e4 <HAL_DMA_Start_IT>
 8004c50:	1e03      	subs	r3, r0, #0
 8004c52:	d009      	beq.n	8004c68 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2290      	movs	r2, #144	; 0x90
 8004c58:	2110      	movs	r1, #16
 8004c5a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	228c      	movs	r2, #140	; 0x8c
 8004c60:	2120      	movs	r1, #32
 8004c62:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e050      	b.n	8004d0a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d019      	beq.n	8004ca4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c70:	f3ef 8310 	mrs	r3, PRIMASK
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	f383 8810 	msr	PRIMASK, r3
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2180      	movs	r1, #128	; 0x80
 8004c92:	0049      	lsls	r1, r1, #1
 8004c94:	430a      	orrs	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ca2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca8:	613b      	str	r3, [r7, #16]
  return(result);
 8004caa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cae:	2301      	movs	r3, #1
 8004cb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f383 8810 	msr	PRIMASK, r3
}
 8004cb8:	46c0      	nop			; (mov r8, r8)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	f383 8810 	msr	PRIMASK, r3
}
 8004cd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cda:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cdc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cde:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	f383 8810 	msr	PRIMASK, r3
}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2140      	movs	r1, #64	; 0x40
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	f383 8810 	msr	PRIMASK, r3
}
 8004d06:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b010      	add	sp, #64	; 0x40
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	08004e6d 	.word	0x08004e6d
 8004d18:	08004f9d 	.word	0x08004f9d
 8004d1c:	08004fdf 	.word	0x08004fdf

08004d20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	; 0x28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d28:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
 8004d32:	2301      	movs	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	21c0      	movs	r1, #192	; 0xc0
 8004d4a:	438a      	bics	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f383 8810 	msr	PRIMASK, r3
}
 8004d58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	617b      	str	r3, [r7, #20]
  return(result);
 8004d60:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004d62:	623b      	str	r3, [r7, #32]
 8004d64:	2301      	movs	r3, #1
 8004d66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4908      	ldr	r1, [pc, #32]	; (8004d9c <UART_EndTxTransfer+0x7c>)
 8004d7c:	400a      	ands	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f383 8810 	msr	PRIMASK, r3
}
 8004d8a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2288      	movs	r2, #136	; 0x88
 8004d90:	2120      	movs	r1, #32
 8004d92:	5099      	str	r1, [r3, r2]
}
 8004d94:	46c0      	nop			; (mov r8, r8)
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b00a      	add	sp, #40	; 0x28
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	ff7fffff 	.word	0xff7fffff

08004da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08e      	sub	sp, #56	; 0x38
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dac:	617b      	str	r3, [r7, #20]
  return(result);
 8004dae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004db0:	637b      	str	r3, [r7, #52]	; 0x34
 8004db2:	2301      	movs	r3, #1
 8004db4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f383 8810 	msr	PRIMASK, r3
}
 8004dbc:	46c0      	nop			; (mov r8, r8)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4926      	ldr	r1, [pc, #152]	; (8004e64 <UART_EndRxTransfer+0xc4>)
 8004dca:	400a      	ands	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f383 8810 	msr	PRIMASK, r3
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dda:	f3ef 8310 	mrs	r3, PRIMASK
 8004dde:	623b      	str	r3, [r7, #32]
  return(result);
 8004de0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004de2:	633b      	str	r3, [r7, #48]	; 0x30
 8004de4:	2301      	movs	r3, #1
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	f383 8810 	msr	PRIMASK, r3
}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	491b      	ldr	r1, [pc, #108]	; (8004e68 <UART_EndRxTransfer+0xc8>)
 8004dfc:	400a      	ands	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	f383 8810 	msr	PRIMASK, r3
}
 8004e0a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d118      	bne.n	8004e46 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e14:	f3ef 8310 	mrs	r3, PRIMASK
 8004e18:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1e:	2301      	movs	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f383 8810 	msr	PRIMASK, r3
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2110      	movs	r1, #16
 8004e36:	438a      	bics	r2, r1
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f383 8810 	msr	PRIMASK, r3
}
 8004e44:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	228c      	movs	r2, #140	; 0x8c
 8004e4a:	2120      	movs	r1, #32
 8004e4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b00e      	add	sp, #56	; 0x38
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	fffffedf 	.word	0xfffffedf
 8004e68:	effffffe 	.word	0xeffffffe

08004e6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b094      	sub	sp, #80	; 0x50
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2220      	movs	r2, #32
 8004e82:	4013      	ands	r3, r2
 8004e84:	d16f      	bne.n	8004f66 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e88:	225e      	movs	r2, #94	; 0x5e
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e92:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e94:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e98:	2301      	movs	r3, #1
 8004e9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	493a      	ldr	r1, [pc, #232]	; (8004f98 <UART_DMAReceiveCplt+0x12c>)
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	f383 8810 	msr	PRIMASK, r3
}
 8004ebe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eca:	2301      	movs	r3, #1
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	f383 8810 	msr	PRIMASK, r3
}
 8004ed4:	46c0      	nop			; (mov r8, r8)
 8004ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	438a      	bics	r2, r1
 8004ee4:	609a      	str	r2, [r3, #8]
 8004ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efa:	643b      	str	r3, [r7, #64]	; 0x40
 8004efc:	2301      	movs	r3, #1
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f02:	f383 8810 	msr	PRIMASK, r3
}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2140      	movs	r1, #64	; 0x40
 8004f14:	438a      	bics	r2, r1
 8004f16:	609a      	str	r2, [r3, #8]
 8004f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	f383 8810 	msr	PRIMASK, r3
}
 8004f22:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f26:	228c      	movs	r2, #140	; 0x8c
 8004f28:	2120      	movs	r1, #32
 8004f2a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d118      	bne.n	8004f66 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f34:	f3ef 8310 	mrs	r3, PRIMASK
 8004f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f3e:	2301      	movs	r3, #1
 8004f40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f383 8810 	msr	PRIMASK, r3
}
 8004f48:	46c0      	nop			; (mov r8, r8)
 8004f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2110      	movs	r1, #16
 8004f56:	438a      	bics	r2, r1
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f383 8810 	msr	PRIMASK, r3
}
 8004f64:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f68:	2200      	movs	r2, #0
 8004f6a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d108      	bne.n	8004f86 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f76:	225c      	movs	r2, #92	; 0x5c
 8004f78:	5a9a      	ldrh	r2, [r3, r2]
 8004f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7c:	0011      	movs	r1, r2
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f7ff faae 	bl	80044e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f84:	e003      	b.n	8004f8e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f7fb fb63 	bl	8000654 <HAL_UART_RxCpltCallback>
}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b014      	add	sp, #80	; 0x50
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	fffffeff 	.word	0xfffffeff

08004f9c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2201      	movs	r2, #1
 8004fae:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d10a      	bne.n	8004fce <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	225c      	movs	r2, #92	; 0x5c
 8004fbc:	5a9b      	ldrh	r3, [r3, r2]
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	0011      	movs	r1, r2
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7ff fa8a 	bl	80044e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fcc:	e003      	b.n	8004fd6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f7fb fb21 	bl	8000618 <HAL_UART_RxHalfCpltCallback>
}
 8004fd6:	46c0      	nop			; (mov r8, r8)
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b004      	add	sp, #16
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b086      	sub	sp, #24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2288      	movs	r2, #136	; 0x88
 8004ff0:	589b      	ldr	r3, [r3, r2]
 8004ff2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	228c      	movs	r2, #140	; 0x8c
 8004ff8:	589b      	ldr	r3, [r3, r2]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2280      	movs	r2, #128	; 0x80
 8005004:	4013      	ands	r3, r2
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d10a      	bne.n	8005020 <UART_DMAError+0x42>
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b21      	cmp	r3, #33	; 0x21
 800500e:	d107      	bne.n	8005020 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2256      	movs	r2, #86	; 0x56
 8005014:	2100      	movs	r1, #0
 8005016:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	0018      	movs	r0, r3
 800501c:	f7ff fe80 	bl	8004d20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2240      	movs	r2, #64	; 0x40
 8005028:	4013      	ands	r3, r2
 800502a:	2b40      	cmp	r3, #64	; 0x40
 800502c:	d10a      	bne.n	8005044 <UART_DMAError+0x66>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b22      	cmp	r3, #34	; 0x22
 8005032:	d107      	bne.n	8005044 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	225e      	movs	r2, #94	; 0x5e
 8005038:	2100      	movs	r1, #0
 800503a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	0018      	movs	r0, r3
 8005040:	f7ff feae 	bl	8004da0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2290      	movs	r2, #144	; 0x90
 8005048:	589b      	ldr	r3, [r3, r2]
 800504a:	2210      	movs	r2, #16
 800504c:	431a      	orrs	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2190      	movs	r1, #144	; 0x90
 8005052:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	0018      	movs	r0, r3
 8005058:	f7ff fa3a 	bl	80044d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	46bd      	mov	sp, r7
 8005060:	b006      	add	sp, #24
 8005062:	bd80      	pop	{r7, pc}

08005064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	225e      	movs	r2, #94	; 0x5e
 8005076:	2100      	movs	r1, #0
 8005078:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2256      	movs	r2, #86	; 0x56
 800507e:	2100      	movs	r1, #0
 8005080:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	0018      	movs	r0, r3
 8005086:	f7ff fa23 	bl	80044d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b004      	add	sp, #16
 8005090:	bd80      	pop	{r7, pc}

08005092 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b086      	sub	sp, #24
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509a:	f3ef 8310 	mrs	r3, PRIMASK
 800509e:	60bb      	str	r3, [r7, #8]
  return(result);
 80050a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	2301      	movs	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f383 8810 	msr	PRIMASK, r3
}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2140      	movs	r1, #64	; 0x40
 80050bc:	438a      	bics	r2, r1
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f383 8810 	msr	PRIMASK, r3
}
 80050ca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2288      	movs	r2, #136	; 0x88
 80050d0:	2120      	movs	r1, #32
 80050d2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	0018      	movs	r0, r3
 80050de:	f7ff f9ef 	bl	80044c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b006      	add	sp, #24
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b002      	add	sp, #8
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	46bd      	mov	sp, r7
 8005106:	b002      	add	sp, #8
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	46bd      	mov	sp, r7
 8005116:	b002      	add	sp, #8
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2284      	movs	r2, #132	; 0x84
 8005128:	5c9b      	ldrb	r3, [r3, r2]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_UARTEx_DisableFifoMode+0x16>
 800512e:	2302      	movs	r3, #2
 8005130:	e027      	b.n	8005182 <HAL_UARTEx_DisableFifoMode+0x66>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2284      	movs	r2, #132	; 0x84
 8005136:	2101      	movs	r1, #1
 8005138:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2288      	movs	r2, #136	; 0x88
 800513e:	2124      	movs	r1, #36	; 0x24
 8005140:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2101      	movs	r1, #1
 8005156:	438a      	bics	r2, r1
 8005158:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4a0b      	ldr	r2, [pc, #44]	; (800518c <HAL_UARTEx_DisableFifoMode+0x70>)
 800515e:	4013      	ands	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2288      	movs	r2, #136	; 0x88
 8005174:	2120      	movs	r1, #32
 8005176:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2284      	movs	r2, #132	; 0x84
 800517c:	2100      	movs	r1, #0
 800517e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	0018      	movs	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	b004      	add	sp, #16
 8005188:	bd80      	pop	{r7, pc}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	dfffffff 	.word	0xdfffffff

08005190 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2284      	movs	r2, #132	; 0x84
 800519e:	5c9b      	ldrb	r3, [r3, r2]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e02e      	b.n	8005206 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2284      	movs	r2, #132	; 0x84
 80051ac:	2101      	movs	r1, #1
 80051ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2288      	movs	r2, #136	; 0x88
 80051b4:	2124      	movs	r1, #36	; 0x24
 80051b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2101      	movs	r1, #1
 80051cc:	438a      	bics	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	08d9      	lsrs	r1, r3, #3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	0018      	movs	r0, r3
 80051e8:	f000 f854 	bl	8005294 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2288      	movs	r2, #136	; 0x88
 80051f8:	2120      	movs	r1, #32
 80051fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2284      	movs	r2, #132	; 0x84
 8005200:	2100      	movs	r1, #0
 8005202:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	0018      	movs	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	b004      	add	sp, #16
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2284      	movs	r2, #132	; 0x84
 800521e:	5c9b      	ldrb	r3, [r3, r2]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005224:	2302      	movs	r3, #2
 8005226:	e02f      	b.n	8005288 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2284      	movs	r2, #132	; 0x84
 800522c:	2101      	movs	r1, #1
 800522e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2288      	movs	r2, #136	; 0x88
 8005234:	2124      	movs	r1, #36	; 0x24
 8005236:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2101      	movs	r1, #1
 800524c:	438a      	bics	r2, r1
 800524e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4a0e      	ldr	r2, [pc, #56]	; (8005290 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005258:	4013      	ands	r3, r2
 800525a:	0019      	movs	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	0018      	movs	r0, r3
 800526a:	f000 f813 	bl	8005294 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2288      	movs	r2, #136	; 0x88
 800527a:	2120      	movs	r1, #32
 800527c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2284      	movs	r2, #132	; 0x84
 8005282:	2100      	movs	r1, #0
 8005284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b004      	add	sp, #16
 800528e:	bd80      	pop	{r7, pc}
 8005290:	f1ffffff 	.word	0xf1ffffff

08005294 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d108      	bne.n	80052b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	226a      	movs	r2, #106	; 0x6a
 80052a8:	2101      	movs	r1, #1
 80052aa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2268      	movs	r2, #104	; 0x68
 80052b0:	2101      	movs	r1, #1
 80052b2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052b4:	e043      	b.n	800533e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052b6:	260f      	movs	r6, #15
 80052b8:	19bb      	adds	r3, r7, r6
 80052ba:	2208      	movs	r2, #8
 80052bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052be:	200e      	movs	r0, #14
 80052c0:	183b      	adds	r3, r7, r0
 80052c2:	2208      	movs	r2, #8
 80052c4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	0e5b      	lsrs	r3, r3, #25
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	240d      	movs	r4, #13
 80052d2:	193b      	adds	r3, r7, r4
 80052d4:	2107      	movs	r1, #7
 80052d6:	400a      	ands	r2, r1
 80052d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	0f5b      	lsrs	r3, r3, #29
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	250c      	movs	r5, #12
 80052e6:	197b      	adds	r3, r7, r5
 80052e8:	2107      	movs	r1, #7
 80052ea:	400a      	ands	r2, r1
 80052ec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052ee:	183b      	adds	r3, r7, r0
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	197a      	adds	r2, r7, r5
 80052f4:	7812      	ldrb	r2, [r2, #0]
 80052f6:	4914      	ldr	r1, [pc, #80]	; (8005348 <UARTEx_SetNbDataToProcess+0xb4>)
 80052f8:	5c8a      	ldrb	r2, [r1, r2]
 80052fa:	435a      	muls	r2, r3
 80052fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80052fe:	197b      	adds	r3, r7, r5
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	4a12      	ldr	r2, [pc, #72]	; (800534c <UARTEx_SetNbDataToProcess+0xb8>)
 8005304:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005306:	0019      	movs	r1, r3
 8005308:	f7fa ff92 	bl	8000230 <__divsi3>
 800530c:	0003      	movs	r3, r0
 800530e:	b299      	uxth	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	226a      	movs	r2, #106	; 0x6a
 8005314:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005316:	19bb      	adds	r3, r7, r6
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	193a      	adds	r2, r7, r4
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	490a      	ldr	r1, [pc, #40]	; (8005348 <UARTEx_SetNbDataToProcess+0xb4>)
 8005320:	5c8a      	ldrb	r2, [r1, r2]
 8005322:	435a      	muls	r2, r3
 8005324:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005326:	193b      	adds	r3, r7, r4
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	4a08      	ldr	r2, [pc, #32]	; (800534c <UARTEx_SetNbDataToProcess+0xb8>)
 800532c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800532e:	0019      	movs	r1, r3
 8005330:	f7fa ff7e 	bl	8000230 <__divsi3>
 8005334:	0003      	movs	r3, r0
 8005336:	b299      	uxth	r1, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2268      	movs	r2, #104	; 0x68
 800533c:	5299      	strh	r1, [r3, r2]
}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	46bd      	mov	sp, r7
 8005342:	b005      	add	sp, #20
 8005344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	08008020 	.word	0x08008020
 800534c:	08008028 	.word	0x08008028

08005350 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	0002      	movs	r2, r0
 8005358:	1dbb      	adds	r3, r7, #6
 800535a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005360:	1dbb      	adds	r3, r7, #6
 8005362:	2200      	movs	r2, #0
 8005364:	5e9b      	ldrsh	r3, [r3, r2]
 8005366:	2b84      	cmp	r3, #132	; 0x84
 8005368:	d006      	beq.n	8005378 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800536a:	1dbb      	adds	r3, r7, #6
 800536c:	2200      	movs	r2, #0
 800536e:	5e9a      	ldrsh	r2, [r3, r2]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	18d3      	adds	r3, r2, r3
 8005374:	3303      	adds	r3, #3
 8005376:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005378:	68fb      	ldr	r3, [r7, #12]
}
 800537a:	0018      	movs	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	b004      	add	sp, #16
 8005380:	bd80      	pop	{r7, pc}

08005382 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005386:	f000 fdf1 	bl	8005f6c <vTaskStartScheduler>
  
  return osOK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005394:	b087      	sub	sp, #28
 8005396:	af02      	add	r7, sp, #8
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685c      	ldr	r4, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053a8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2208      	movs	r2, #8
 80053ae:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7ff ffcd 	bl	8005350 <makeFreeRtosPriority>
 80053b6:	0001      	movs	r1, r0
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	230c      	movs	r3, #12
 80053bc:	18fb      	adds	r3, r7, r3
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	9100      	str	r1, [sp, #0]
 80053c2:	0013      	movs	r3, r2
 80053c4:	0032      	movs	r2, r6
 80053c6:	0029      	movs	r1, r5
 80053c8:	0020      	movs	r0, r4
 80053ca:	f000 fc7b 	bl	8005cc4 <xTaskCreate>
 80053ce:	0003      	movs	r3, r0
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d001      	beq.n	80053d8 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e000      	b.n	80053da <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 80053d8:	68fb      	ldr	r3, [r7, #12]
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b005      	add	sp, #20
 80053e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <osDelay+0x16>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	e000      	b.n	80053fa <osDelay+0x18>
 80053f8:	2301      	movs	r3, #1
 80053fa:	0018      	movs	r0, r3
 80053fc:	f000 fd90 	bl	8005f20 <vTaskDelay>
  
  return osOK;
 8005400:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005402:	0018      	movs	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	b004      	add	sp, #16
 8005408:	bd80      	pop	{r7, pc}

0800540a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3308      	adds	r3, #8
 8005416:	001a      	movs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	4252      	negs	r2, r2
 8005422:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3308      	adds	r3, #8
 8005428:	001a      	movs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3308      	adds	r3, #8
 8005432:	001a      	movs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	46bd      	mov	sp, r7
 8005442:	b002      	add	sp, #8
 8005444:	bd80      	pop	{r7, pc}

08005446 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}

0800545c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	601a      	str	r2, [r3, #0]
}
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	46bd      	mov	sp, r7
 800549c:	b004      	add	sp, #16
 800549e:	bd80      	pop	{r7, pc}

080054a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	3301      	adds	r3, #1
 80054b4:	d103      	bne.n	80054be <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e00c      	b.n	80054d8 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3308      	adds	r3, #8
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e002      	b.n	80054cc <vListInsert+0x2c>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d2f6      	bcs.n	80054c6 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	46c0      	nop			; (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	b004      	add	sp, #16
 800550a:	bd80      	pop	{r7, pc}

0800550c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6892      	ldr	r2, [r2, #8]
 8005522:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6852      	ldr	r2, [r2, #4]
 800552c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d103      	bne.n	8005540 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	1e5a      	subs	r2, r3, #1
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
}
 8005554:	0018      	movs	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	b004      	add	sp, #16
 800555a:	bd80      	pop	{r7, pc}

0800555c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <xQueueGenericReset+0x18>
 8005570:	b672      	cpsid	i
 8005572:	e7fe      	b.n	8005572 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8005574:	f001 fab4 	bl	8006ae0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	434b      	muls	r3, r1
 8005586:	18d2      	adds	r2, r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	1e59      	subs	r1, r3, #1
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	434b      	muls	r3, r1
 80055aa:	18d2      	adds	r2, r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2244      	movs	r2, #68	; 0x44
 80055b4:	21ff      	movs	r1, #255	; 0xff
 80055b6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2245      	movs	r2, #69	; 0x45
 80055bc:	21ff      	movs	r1, #255	; 0xff
 80055be:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10d      	bne.n	80055e2 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d013      	beq.n	80055f6 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3310      	adds	r3, #16
 80055d2:	0018      	movs	r0, r3
 80055d4:	f000 feb8 	bl	8006348 <xTaskRemoveFromEventList>
 80055d8:	1e03      	subs	r3, r0, #0
 80055da:	d00c      	beq.n	80055f6 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055dc:	f001 fa70 	bl	8006ac0 <vPortYield>
 80055e0:	e009      	b.n	80055f6 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3310      	adds	r3, #16
 80055e6:	0018      	movs	r0, r3
 80055e8:	f7ff ff0f 	bl	800540a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3324      	adds	r3, #36	; 0x24
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7ff ff0a 	bl	800540a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055f6:	f001 fa85 	bl	8006b04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055fa:	2301      	movs	r3, #1
}
 80055fc:	0018      	movs	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	b004      	add	sp, #16
 8005602:	bd80      	pop	{r7, pc}

08005604 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005604:	b590      	push	{r4, r7, lr}
 8005606:	b08b      	sub	sp, #44	; 0x2c
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	1dfb      	adds	r3, r7, #7
 8005610:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <xQueueGenericCreate+0x18>
 8005618:	b672      	cpsid	i
 800561a:	e7fe      	b.n	800561a <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	4353      	muls	r3, r2
 8005622:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	3348      	adds	r3, #72	; 0x48
 8005628:	0018      	movs	r0, r3
 800562a:	f001 faf1 	bl	8006c10 <pvPortMalloc>
 800562e:	0003      	movs	r3, r0
 8005630:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00e      	beq.n	8005656 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	3348      	adds	r3, #72	; 0x48
 8005640:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005642:	1dfb      	adds	r3, r7, #7
 8005644:	781c      	ldrb	r4, [r3, #0]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	0023      	movs	r3, r4
 8005652:	f000 f805 	bl	8005660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005656:	69bb      	ldr	r3, [r7, #24]
	}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b009      	add	sp, #36	; 0x24
 800565e:	bd90      	pop	{r4, r7, pc}

08005660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	001a      	movs	r2, r3
 800566e:	1cfb      	adds	r3, r7, #3
 8005670:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e002      	b.n	8005686 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2101      	movs	r1, #1
 8005696:	0018      	movs	r0, r3
 8005698:	f7ff ff60 	bl	800555c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800569c:	46c0      	nop			; (mov r8, r8)
 800569e:	46bd      	mov	sp, r7
 80056a0:	b004      	add	sp, #16
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08a      	sub	sp, #40	; 0x28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056b2:	2300      	movs	r3, #0
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <xQueueGenericSend+0x20>
 80056c0:	b672      	cpsid	i
 80056c2:	e7fe      	b.n	80056c2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d103      	bne.n	80056d2 <xQueueGenericSend+0x2e>
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <xQueueGenericSend+0x32>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <xQueueGenericSend+0x34>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <xQueueGenericSend+0x3c>
 80056dc:	b672      	cpsid	i
 80056de:	e7fe      	b.n	80056de <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d103      	bne.n	80056ee <xQueueGenericSend+0x4a>
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <xQueueGenericSend+0x4e>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <xQueueGenericSend+0x50>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <xQueueGenericSend+0x58>
 80056f8:	b672      	cpsid	i
 80056fa:	e7fe      	b.n	80056fa <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056fc:	f000 ffa0 	bl	8006640 <xTaskGetSchedulerState>
 8005700:	1e03      	subs	r3, r0, #0
 8005702:	d102      	bne.n	800570a <xQueueGenericSend+0x66>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <xQueueGenericSend+0x6a>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <xQueueGenericSend+0x6c>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <xQueueGenericSend+0x74>
 8005714:	b672      	cpsid	i
 8005716:	e7fe      	b.n	8005716 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005718:	f001 f9e2 	bl	8006ae0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	429a      	cmp	r2, r3
 8005726:	d302      	bcc.n	800572e <xQueueGenericSend+0x8a>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d11e      	bne.n	800576c <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	0018      	movs	r0, r3
 8005736:	f000 f9ce 	bl	8005ad6 <prvCopyDataToQueue>
 800573a:	0003      	movs	r3, r0
 800573c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	3324      	adds	r3, #36	; 0x24
 800574a:	0018      	movs	r0, r3
 800574c:	f000 fdfc 	bl	8006348 <xTaskRemoveFromEventList>
 8005750:	1e03      	subs	r3, r0, #0
 8005752:	d007      	beq.n	8005764 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005754:	f001 f9b4 	bl	8006ac0 <vPortYield>
 8005758:	e004      	b.n	8005764 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005760:	f001 f9ae 	bl	8006ac0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005764:	f001 f9ce 	bl	8006b04 <vPortExitCritical>
				return pdPASS;
 8005768:	2301      	movs	r3, #1
 800576a:	e05b      	b.n	8005824 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d103      	bne.n	800577a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005772:	f001 f9c7 	bl	8006b04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005776:	2300      	movs	r3, #0
 8005778:	e054      	b.n	8005824 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005780:	2314      	movs	r3, #20
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	0018      	movs	r0, r3
 8005786:	f000 fe3b 	bl	8006400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800578a:	2301      	movs	r3, #1
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800578e:	f001 f9b9 	bl	8006b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005792:	f000 fc21 	bl	8005fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005796:	f001 f9a3 	bl	8006ae0 <vPortEnterCritical>
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	2244      	movs	r2, #68	; 0x44
 800579e:	5c9b      	ldrb	r3, [r3, r2]
 80057a0:	b25b      	sxtb	r3, r3
 80057a2:	3301      	adds	r3, #1
 80057a4:	d103      	bne.n	80057ae <xQueueGenericSend+0x10a>
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2244      	movs	r2, #68	; 0x44
 80057aa:	2100      	movs	r1, #0
 80057ac:	5499      	strb	r1, [r3, r2]
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	2245      	movs	r2, #69	; 0x45
 80057b2:	5c9b      	ldrb	r3, [r3, r2]
 80057b4:	b25b      	sxtb	r3, r3
 80057b6:	3301      	adds	r3, #1
 80057b8:	d103      	bne.n	80057c2 <xQueueGenericSend+0x11e>
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	2245      	movs	r2, #69	; 0x45
 80057be:	2100      	movs	r1, #0
 80057c0:	5499      	strb	r1, [r3, r2]
 80057c2:	f001 f99f 	bl	8006b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057c6:	1d3a      	adds	r2, r7, #4
 80057c8:	2314      	movs	r3, #20
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	0011      	movs	r1, r2
 80057ce:	0018      	movs	r0, r3
 80057d0:	f000 fe2a 	bl	8006428 <xTaskCheckForTimeOut>
 80057d4:	1e03      	subs	r3, r0, #0
 80057d6:	d11e      	bne.n	8005816 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	0018      	movs	r0, r3
 80057dc:	f000 fa5a 	bl	8005c94 <prvIsQueueFull>
 80057e0:	1e03      	subs	r3, r0, #0
 80057e2:	d011      	beq.n	8005808 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	3310      	adds	r3, #16
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	0011      	movs	r1, r2
 80057ec:	0018      	movs	r0, r3
 80057ee:	f000 fd8d 	bl	800630c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 f9d9 	bl	8005bac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057fa:	f000 fbf9 	bl	8005ff0 <xTaskResumeAll>
 80057fe:	1e03      	subs	r3, r0, #0
 8005800:	d18a      	bne.n	8005718 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8005802:	f001 f95d 	bl	8006ac0 <vPortYield>
 8005806:	e787      	b.n	8005718 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	0018      	movs	r0, r3
 800580c:	f000 f9ce 	bl	8005bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005810:	f000 fbee 	bl	8005ff0 <xTaskResumeAll>
 8005814:	e780      	b.n	8005718 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	0018      	movs	r0, r3
 800581a:	f000 f9c7 	bl	8005bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800581e:	f000 fbe7 	bl	8005ff0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005822:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005824:	0018      	movs	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	b00a      	add	sp, #40	; 0x28
 800582a:	bd80      	pop	{r7, pc}

0800582c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <xQueueGiveFromISR+0x18>
 8005840:	b672      	cpsid	i
 8005842:	e7fe      	b.n	8005842 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <xQueueGiveFromISR+0x24>
 800584c:	b672      	cpsid	i
 800584e:	e7fe      	b.n	800584e <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <xQueueGiveFromISR+0x34>
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <xQueueGiveFromISR+0x38>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <xQueueGiveFromISR+0x3a>
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <xQueueGiveFromISR+0x42>
 800586a:	b672      	cpsid	i
 800586c:	e7fe      	b.n	800586c <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800586e:	f001 f961 	bl	8006b34 <ulSetInterruptMaskFromISR>
 8005872:	0003      	movs	r3, r0
 8005874:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d22c      	bcs.n	80058e0 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005886:	200f      	movs	r0, #15
 8005888:	183b      	adds	r3, r7, r0
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	2145      	movs	r1, #69	; 0x45
 800588e:	5c52      	ldrb	r2, [r2, r1]
 8005890:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800589a:	183b      	adds	r3, r7, r0
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	b25b      	sxtb	r3, r3
 80058a0:	3301      	adds	r3, #1
 80058a2:	d111      	bne.n	80058c8 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d016      	beq.n	80058da <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	3324      	adds	r3, #36	; 0x24
 80058b0:	0018      	movs	r0, r3
 80058b2:	f000 fd49 	bl	8006348 <xTaskRemoveFromEventList>
 80058b6:	1e03      	subs	r3, r0, #0
 80058b8:	d00f      	beq.n	80058da <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00c      	beq.n	80058da <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2201      	movs	r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	e008      	b.n	80058da <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058c8:	230f      	movs	r3, #15
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	3301      	adds	r3, #1
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	b259      	sxtb	r1, r3
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2245      	movs	r2, #69	; 0x45
 80058d8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80058da:	2301      	movs	r3, #1
 80058dc:	61fb      	str	r3, [r7, #28]
 80058de:	e001      	b.n	80058e4 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	0018      	movs	r0, r3
 80058e8:	f001 f92a 	bl	8006b40 <vClearInterruptMaskFromISR>

	return xReturn;
 80058ec:	69fb      	ldr	r3, [r7, #28]
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b008      	add	sp, #32
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b08a      	sub	sp, #40	; 0x28
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005900:	2300      	movs	r3, #0
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005908:	2300      	movs	r3, #0
 800590a:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <xQueueSemaphoreTake+0x20>
 8005912:	b672      	cpsid	i
 8005914:	e7fe      	b.n	8005914 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <xQueueSemaphoreTake+0x2c>
 800591e:	b672      	cpsid	i
 8005920:	e7fe      	b.n	8005920 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005922:	f000 fe8d 	bl	8006640 <xTaskGetSchedulerState>
 8005926:	1e03      	subs	r3, r0, #0
 8005928:	d102      	bne.n	8005930 <xQueueSemaphoreTake+0x3a>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <xQueueSemaphoreTake+0x3e>
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <xQueueSemaphoreTake+0x40>
 8005934:	2300      	movs	r3, #0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <xQueueSemaphoreTake+0x48>
 800593a:	b672      	cpsid	i
 800593c:	e7fe      	b.n	800593c <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800593e:	f001 f8cf 	bl	8006ae0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01d      	beq.n	800598a <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	1e5a      	subs	r2, r3, #1
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d104      	bne.n	8005968 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800595e:	f000 ffbf 	bl	80068e0 <pvTaskIncrementMutexHeldCount>
 8005962:	0002      	movs	r2, r0
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	3310      	adds	r3, #16
 8005974:	0018      	movs	r0, r3
 8005976:	f000 fce7 	bl	8006348 <xTaskRemoveFromEventList>
 800597a:	1e03      	subs	r3, r0, #0
 800597c:	d001      	beq.n	8005982 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800597e:	f001 f89f 	bl	8006ac0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005982:	f001 f8bf 	bl	8006b04 <vPortExitCritical>
				return pdPASS;
 8005986:	2301      	movs	r3, #1
 8005988:	e08b      	b.n	8005aa2 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d108      	bne.n	80059a2 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <xQueueSemaphoreTake+0xa4>
 8005996:	b672      	cpsid	i
 8005998:	e7fe      	b.n	8005998 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800599a:	f001 f8b3 	bl	8006b04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800599e:	2300      	movs	r3, #0
 80059a0:	e07f      	b.n	8005aa2 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059a8:	230c      	movs	r3, #12
 80059aa:	18fb      	adds	r3, r7, r3
 80059ac:	0018      	movs	r0, r3
 80059ae:	f000 fd27 	bl	8006400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059b2:	2301      	movs	r3, #1
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059b6:	f001 f8a5 	bl	8006b04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059ba:	f000 fb0d 	bl	8005fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059be:	f001 f88f 	bl	8006ae0 <vPortEnterCritical>
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	2244      	movs	r2, #68	; 0x44
 80059c6:	5c9b      	ldrb	r3, [r3, r2]
 80059c8:	b25b      	sxtb	r3, r3
 80059ca:	3301      	adds	r3, #1
 80059cc:	d103      	bne.n	80059d6 <xQueueSemaphoreTake+0xe0>
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	2244      	movs	r2, #68	; 0x44
 80059d2:	2100      	movs	r1, #0
 80059d4:	5499      	strb	r1, [r3, r2]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	2245      	movs	r2, #69	; 0x45
 80059da:	5c9b      	ldrb	r3, [r3, r2]
 80059dc:	b25b      	sxtb	r3, r3
 80059de:	3301      	adds	r3, #1
 80059e0:	d103      	bne.n	80059ea <xQueueSemaphoreTake+0xf4>
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	2245      	movs	r2, #69	; 0x45
 80059e6:	2100      	movs	r1, #0
 80059e8:	5499      	strb	r1, [r3, r2]
 80059ea:	f001 f88b 	bl	8006b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ee:	003a      	movs	r2, r7
 80059f0:	230c      	movs	r3, #12
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	0011      	movs	r1, r2
 80059f6:	0018      	movs	r0, r3
 80059f8:	f000 fd16 	bl	8006428 <xTaskCheckForTimeOut>
 80059fc:	1e03      	subs	r3, r0, #0
 80059fe:	d12e      	bne.n	8005a5e <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 f930 	bl	8005c68 <prvIsQueueEmpty>
 8005a08:	1e03      	subs	r3, r0, #0
 8005a0a:	d021      	beq.n	8005a50 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8005a14:	f001 f864 	bl	8006ae0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f000 fe2b 	bl	8006678 <xTaskPriorityInherit>
 8005a22:	0003      	movs	r3, r0
 8005a24:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8005a26:	f001 f86d 	bl	8006b04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	3324      	adds	r3, #36	; 0x24
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	0011      	movs	r1, r2
 8005a32:	0018      	movs	r0, r3
 8005a34:	f000 fc6a 	bl	800630c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f000 f8b6 	bl	8005bac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a40:	f000 fad6 	bl	8005ff0 <xTaskResumeAll>
 8005a44:	1e03      	subs	r3, r0, #0
 8005a46:	d000      	beq.n	8005a4a <xQueueSemaphoreTake+0x154>
 8005a48:	e779      	b.n	800593e <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8005a4a:	f001 f839 	bl	8006ac0 <vPortYield>
 8005a4e:	e776      	b.n	800593e <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	0018      	movs	r0, r3
 8005a54:	f000 f8aa 	bl	8005bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a58:	f000 faca 	bl	8005ff0 <xTaskResumeAll>
 8005a5c:	e76f      	b.n	800593e <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	0018      	movs	r0, r3
 8005a62:	f000 f8a3 	bl	8005bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a66:	f000 fac3 	bl	8005ff0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f000 f8fb 	bl	8005c68 <prvIsQueueEmpty>
 8005a72:	1e03      	subs	r3, r0, #0
 8005a74:	d100      	bne.n	8005a78 <xQueueSemaphoreTake+0x182>
 8005a76:	e762      	b.n	800593e <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d010      	beq.n	8005aa0 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8005a7e:	f001 f82f 	bl	8006ae0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	0018      	movs	r0, r3
 8005a86:	f000 f810 	bl	8005aaa <prvGetDisinheritPriorityAfterTimeout>
 8005a8a:	0003      	movs	r3, r0
 8005a8c:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	0011      	movs	r1, r2
 8005a96:	0018      	movs	r0, r3
 8005a98:	f000 feb2 	bl	8006800 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a9c:	f001 f832 	bl	8006b04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005aa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b00a      	add	sp, #40	; 0x28
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d006      	beq.n	8005ac8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e001      	b.n	8005acc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005acc:	68fb      	ldr	r3, [r7, #12]
	}
 8005ace:	0018      	movs	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b004      	add	sp, #16
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b086      	sub	sp, #24
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10e      	bne.n	8005b12 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d14e      	bne.n	8005b9a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f000 fe21 	bl	8006748 <xTaskPriorityDisinherit>
 8005b06:	0003      	movs	r3, r0
 8005b08:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	e043      	b.n	8005b9a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d119      	bne.n	8005b4c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6858      	ldr	r0, [r3, #4]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	0019      	movs	r1, r3
 8005b24:	f001 fcbc 	bl	80074a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	18d2      	adds	r2, r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d32b      	bcc.n	8005b9a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	e026      	b.n	8005b9a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68d8      	ldr	r0, [r3, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	0019      	movs	r1, r3
 8005b58:	f001 fca2 	bl	80074a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	425b      	negs	r3, r3
 8005b66:	18d2      	adds	r2, r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d207      	bcs.n	8005b88 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	425b      	negs	r3, r3
 8005b82:	18d2      	adds	r2, r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d105      	bne.n	8005b9a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ba2:	697b      	ldr	r3, [r7, #20]
}
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b006      	add	sp, #24
 8005baa:	bd80      	pop	{r7, pc}

08005bac <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bb4:	f000 ff94 	bl	8006ae0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bb8:	230f      	movs	r3, #15
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	2145      	movs	r1, #69	; 0x45
 8005bc0:	5c52      	ldrb	r2, [r2, r1]
 8005bc2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bc4:	e013      	b.n	8005bee <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d016      	beq.n	8005bfc <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3324      	adds	r3, #36	; 0x24
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f000 fbb8 	bl	8006348 <xTaskRemoveFromEventList>
 8005bd8:	1e03      	subs	r3, r0, #0
 8005bda:	d001      	beq.n	8005be0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005bdc:	f000 fc74 	bl	80064c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005be0:	210f      	movs	r1, #15
 8005be2:	187b      	adds	r3, r7, r1
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	187b      	adds	r3, r7, r1
 8005bec:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bee:	230f      	movs	r3, #15
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	b25b      	sxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	dce5      	bgt.n	8005bc6 <prvUnlockQueue+0x1a>
 8005bfa:	e000      	b.n	8005bfe <prvUnlockQueue+0x52>
					break;
 8005bfc:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2245      	movs	r2, #69	; 0x45
 8005c02:	21ff      	movs	r1, #255	; 0xff
 8005c04:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005c06:	f000 ff7d 	bl	8006b04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c0a:	f000 ff69 	bl	8006ae0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c0e:	230e      	movs	r3, #14
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	2144      	movs	r1, #68	; 0x44
 8005c16:	5c52      	ldrb	r2, [r2, r1]
 8005c18:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c1a:	e013      	b.n	8005c44 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d016      	beq.n	8005c52 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3310      	adds	r3, #16
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f000 fb8d 	bl	8006348 <xTaskRemoveFromEventList>
 8005c2e:	1e03      	subs	r3, r0, #0
 8005c30:	d001      	beq.n	8005c36 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005c32:	f000 fc49 	bl	80064c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c36:	210e      	movs	r1, #14
 8005c38:	187b      	adds	r3, r7, r1
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	187b      	adds	r3, r7, r1
 8005c42:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c44:	230e      	movs	r3, #14
 8005c46:	18fb      	adds	r3, r7, r3
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	dce5      	bgt.n	8005c1c <prvUnlockQueue+0x70>
 8005c50:	e000      	b.n	8005c54 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005c52:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2244      	movs	r2, #68	; 0x44
 8005c58:	21ff      	movs	r1, #255	; 0xff
 8005c5a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005c5c:	f000 ff52 	bl	8006b04 <vPortExitCritical>
}
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b004      	add	sp, #16
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c70:	f000 ff36 	bl	8006ae0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d102      	bne.n	8005c82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	e001      	b.n	8005c86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c86:	f000 ff3d 	bl	8006b04 <vPortExitCritical>

	return xReturn;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b004      	add	sp, #16
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c9c:	f000 ff20 	bl	8006ae0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d102      	bne.n	8005cb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cac:	2301      	movs	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e001      	b.n	8005cb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cb6:	f000 ff25 	bl	8006b04 <vPortExitCritical>

	return xReturn;
 8005cba:	68fb      	ldr	r3, [r7, #12]
}
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	b004      	add	sp, #16
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b08d      	sub	sp, #52	; 0x34
 8005cc8:	af04      	add	r7, sp, #16
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	1dbb      	adds	r3, r7, #6
 8005cd2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cd4:	1dbb      	adds	r3, r7, #6
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f000 ff98 	bl	8006c10 <pvPortMalloc>
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d010      	beq.n	8005d0c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cea:	2054      	movs	r0, #84	; 0x54
 8005cec:	f000 ff90 	bl	8006c10 <pvPortMalloc>
 8005cf0:	0003      	movs	r3, r0
 8005cf2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8005d00:	e006      	b.n	8005d10 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	0018      	movs	r0, r3
 8005d06:	f001 f82f 	bl	8006d68 <vPortFree>
 8005d0a:	e001      	b.n	8005d10 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d016      	beq.n	8005d44 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d16:	1dbb      	adds	r3, r7, #6
 8005d18:	881a      	ldrh	r2, [r3, #0]
 8005d1a:	683c      	ldr	r4, [r7, #0]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	2300      	movs	r3, #0
 8005d22:	9303      	str	r3, [sp, #12]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	9302      	str	r3, [sp, #8]
 8005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	0023      	movs	r3, r4
 8005d32:	f000 f80f 	bl	8005d54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	0018      	movs	r0, r3
 8005d3a:	f000 f88d 	bl	8005e58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	e002      	b.n	8005d4a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d44:	2301      	movs	r3, #1
 8005d46:	425b      	negs	r3, r3
 8005d48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
	}
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	b009      	add	sp, #36	; 0x24
 8005d52:	bd90      	pop	{r4, r7, pc}

08005d54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	493a      	ldr	r1, [pc, #232]	; (8005e54 <prvInitialiseNewTask+0x100>)
 8005d6a:	468c      	mov	ip, r1
 8005d6c:	4463      	add	r3, ip
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	18d3      	adds	r3, r2, r3
 8005d72:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2207      	movs	r2, #7
 8005d78:	4393      	bics	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2207      	movs	r2, #7
 8005d80:	4013      	ands	r3, r2
 8005d82:	d001      	beq.n	8005d88 <prvInitialiseNewTask+0x34>
 8005d84:	b672      	cpsid	i
 8005d86:	e7fe      	b.n	8005d86 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d020      	beq.n	8005dd0 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e013      	b.n	8005dbc <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	18d3      	adds	r3, r2, r3
 8005d9a:	7818      	ldrb	r0, [r3, #0]
 8005d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d9e:	2134      	movs	r1, #52	; 0x34
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	18d3      	adds	r3, r2, r3
 8005da4:	185b      	adds	r3, r3, r1
 8005da6:	1c02      	adds	r2, r0, #0
 8005da8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	18d3      	adds	r3, r2, r3
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	3301      	adds	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b0f      	cmp	r3, #15
 8005dc0:	d9e8      	bls.n	8005d94 <prvInitialiseNewTask+0x40>
 8005dc2:	e000      	b.n	8005dc6 <prvInitialiseNewTask+0x72>
			{
				break;
 8005dc4:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	2243      	movs	r2, #67	; 0x43
 8005dca:	2100      	movs	r1, #0
 8005dcc:	5499      	strb	r1, [r3, r2]
 8005dce:	e003      	b.n	8005dd8 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	2234      	movs	r2, #52	; 0x34
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d901      	bls.n	8005de2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dde:	2306      	movs	r3, #6
 8005de0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	6a3a      	ldr	r2, [r7, #32]
 8005dec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	2200      	movs	r2, #0
 8005df2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	3304      	adds	r3, #4
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f7ff fb24 	bl	8005446 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	3318      	adds	r3, #24
 8005e02:	0018      	movs	r0, r3
 8005e04:	f7ff fb1f 	bl	8005446 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	2207      	movs	r2, #7
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	2200      	movs	r2, #0
 8005e22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	2250      	movs	r2, #80	; 0x50
 8005e28:	2100      	movs	r1, #0
 8005e2a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	68f9      	ldr	r1, [r7, #12]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	0018      	movs	r0, r3
 8005e34:	f000 fdba 	bl	80069ac <pxPortInitialiseStack>
 8005e38:	0002      	movs	r2, r0
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b006      	add	sp, #24
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	3fffffff 	.word	0x3fffffff

08005e58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e60:	f000 fe3e 	bl	8006ae0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e64:	4b28      	ldr	r3, [pc, #160]	; (8005f08 <prvAddNewTaskToReadyList+0xb0>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	4b27      	ldr	r3, [pc, #156]	; (8005f08 <prvAddNewTaskToReadyList+0xb0>)
 8005e6c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005e6e:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <prvAddNewTaskToReadyList+0xb4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e76:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <prvAddNewTaskToReadyList+0xb4>)
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e7c:	4b22      	ldr	r3, [pc, #136]	; (8005f08 <prvAddNewTaskToReadyList+0xb0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d110      	bne.n	8005ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e84:	f000 fb3a 	bl	80064fc <prvInitialiseTaskLists>
 8005e88:	e00d      	b.n	8005ea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e8a:	4b21      	ldr	r3, [pc, #132]	; (8005f10 <prvAddNewTaskToReadyList+0xb8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e92:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <prvAddNewTaskToReadyList+0xb4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d802      	bhi.n	8005ea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ea0:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <prvAddNewTaskToReadyList+0xb4>)
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ea6:	4b1b      	ldr	r3, [pc, #108]	; (8005f14 <prvAddNewTaskToReadyList+0xbc>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <prvAddNewTaskToReadyList+0xbc>)
 8005eae:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	4b18      	ldr	r3, [pc, #96]	; (8005f18 <prvAddNewTaskToReadyList+0xc0>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d903      	bls.n	8005ec4 <prvAddNewTaskToReadyList+0x6c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec0:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <prvAddNewTaskToReadyList+0xc0>)
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec8:	0013      	movs	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	189b      	adds	r3, r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <prvAddNewTaskToReadyList+0xc4>)
 8005ed2:	189a      	adds	r2, r3, r2
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	0019      	movs	r1, r3
 8005eda:	0010      	movs	r0, r2
 8005edc:	f7ff fabe 	bl	800545c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ee0:	f000 fe10 	bl	8006b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <prvAddNewTaskToReadyList+0xb8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d008      	beq.n	8005efe <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <prvAddNewTaskToReadyList+0xb4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d201      	bcs.n	8005efe <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005efa:	f000 fde1 	bl	8006ac0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	46bd      	mov	sp, r7
 8005f02:	b002      	add	sp, #8
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	46c0      	nop			; (mov r8, r8)
 8005f08:	20000730 	.word	0x20000730
 8005f0c:	20000630 	.word	0x20000630
 8005f10:	2000073c 	.word	0x2000073c
 8005f14:	2000074c 	.word	0x2000074c
 8005f18:	20000738 	.word	0x20000738
 8005f1c:	20000634 	.word	0x20000634

08005f20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d010      	beq.n	8005f54 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f32:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <vTaskDelay+0x48>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <vTaskDelay+0x1e>
 8005f3a:	b672      	cpsid	i
 8005f3c:	e7fe      	b.n	8005f3c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005f3e:	f000 f84b 	bl	8005fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2100      	movs	r1, #0
 8005f46:	0018      	movs	r0, r3
 8005f48:	f000 fcdc 	bl	8006904 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f4c:	f000 f850 	bl	8005ff0 <xTaskResumeAll>
 8005f50:	0003      	movs	r3, r0
 8005f52:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8005f5a:	f000 fdb1 	bl	8006ac0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b004      	add	sp, #16
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	20000758 	.word	0x20000758

08005f6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005f72:	4913      	ldr	r1, [pc, #76]	; (8005fc0 <vTaskStartScheduler+0x54>)
 8005f74:	4813      	ldr	r0, [pc, #76]	; (8005fc4 <vTaskStartScheduler+0x58>)
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <vTaskStartScheduler+0x5c>)
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2280      	movs	r2, #128	; 0x80
 8005f82:	f7ff fe9f 	bl	8005cc4 <xTaskCreate>
 8005f86:	0003      	movs	r3, r0
 8005f88:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d10d      	bne.n	8005fac <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005f90:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f92:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <vTaskStartScheduler+0x60>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	4252      	negs	r2, r2
 8005f98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <vTaskStartScheduler+0x64>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <vTaskStartScheduler+0x68>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fa6:	f000 fd67 	bl	8006a78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005faa:	e004      	b.n	8005fb6 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <vTaskStartScheduler+0x4a>
 8005fb2:	b672      	cpsid	i
 8005fb4:	e7fe      	b.n	8005fb4 <vTaskStartScheduler+0x48>
}
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	b002      	add	sp, #8
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	08007f4c 	.word	0x08007f4c
 8005fc4:	080064dd 	.word	0x080064dd
 8005fc8:	20000754 	.word	0x20000754
 8005fcc:	20000750 	.word	0x20000750
 8005fd0:	2000073c 	.word	0x2000073c
 8005fd4:	20000734 	.word	0x20000734

08005fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <vTaskSuspendAll+0x14>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	4b02      	ldr	r3, [pc, #8]	; (8005fec <vTaskSuspendAll+0x14>)
 8005fe4:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000758 	.word	0x20000758

08005ff0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ffe:	4b3a      	ldr	r3, [pc, #232]	; (80060e8 <xTaskResumeAll+0xf8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <xTaskResumeAll+0x1a>
 8006006:	b672      	cpsid	i
 8006008:	e7fe      	b.n	8006008 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800600a:	f000 fd69 	bl	8006ae0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800600e:	4b36      	ldr	r3, [pc, #216]	; (80060e8 <xTaskResumeAll+0xf8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	1e5a      	subs	r2, r3, #1
 8006014:	4b34      	ldr	r3, [pc, #208]	; (80060e8 <xTaskResumeAll+0xf8>)
 8006016:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006018:	4b33      	ldr	r3, [pc, #204]	; (80060e8 <xTaskResumeAll+0xf8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d15b      	bne.n	80060d8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006020:	4b32      	ldr	r3, [pc, #200]	; (80060ec <xTaskResumeAll+0xfc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d057      	beq.n	80060d8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006028:	e02f      	b.n	800608a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602a:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <xTaskResumeAll+0x100>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3318      	adds	r3, #24
 8006036:	0018      	movs	r0, r3
 8006038:	f7ff fa68 	bl	800550c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3304      	adds	r3, #4
 8006040:	0018      	movs	r0, r3
 8006042:	f7ff fa63 	bl	800550c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604a:	4b2a      	ldr	r3, [pc, #168]	; (80060f4 <xTaskResumeAll+0x104>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d903      	bls.n	800605a <xTaskResumeAll+0x6a>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006056:	4b27      	ldr	r3, [pc, #156]	; (80060f4 <xTaskResumeAll+0x104>)
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	0013      	movs	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	189b      	adds	r3, r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4a24      	ldr	r2, [pc, #144]	; (80060f8 <xTaskResumeAll+0x108>)
 8006068:	189a      	adds	r2, r3, r2
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3304      	adds	r3, #4
 800606e:	0019      	movs	r1, r3
 8006070:	0010      	movs	r0, r2
 8006072:	f7ff f9f3 	bl	800545c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607a:	4b20      	ldr	r3, [pc, #128]	; (80060fc <xTaskResumeAll+0x10c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	429a      	cmp	r2, r3
 8006082:	d302      	bcc.n	800608a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006084:	4b1e      	ldr	r3, [pc, #120]	; (8006100 <xTaskResumeAll+0x110>)
 8006086:	2201      	movs	r2, #1
 8006088:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800608a:	4b19      	ldr	r3, [pc, #100]	; (80060f0 <xTaskResumeAll+0x100>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1cb      	bne.n	800602a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006098:	f000 fab4 	bl	8006604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800609c:	4b19      	ldr	r3, [pc, #100]	; (8006104 <xTaskResumeAll+0x114>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00f      	beq.n	80060c8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060a8:	f000 f82e 	bl	8006108 <xTaskIncrementTick>
 80060ac:	1e03      	subs	r3, r0, #0
 80060ae:	d002      	beq.n	80060b6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80060b0:	4b13      	ldr	r3, [pc, #76]	; (8006100 <xTaskResumeAll+0x110>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f2      	bne.n	80060a8 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <xTaskResumeAll+0x114>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060c8:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <xTaskResumeAll+0x110>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060d4:	f000 fcf4 	bl	8006ac0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060d8:	f000 fd14 	bl	8006b04 <vPortExitCritical>

	return xAlreadyYielded;
 80060dc:	68bb      	ldr	r3, [r7, #8]
}
 80060de:	0018      	movs	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	b004      	add	sp, #16
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	20000758 	.word	0x20000758
 80060ec:	20000730 	.word	0x20000730
 80060f0:	200006f0 	.word	0x200006f0
 80060f4:	20000738 	.word	0x20000738
 80060f8:	20000634 	.word	0x20000634
 80060fc:	20000630 	.word	0x20000630
 8006100:	20000744 	.word	0x20000744
 8006104:	20000740 	.word	0x20000740

08006108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006112:	4b4a      	ldr	r3, [pc, #296]	; (800623c <xTaskIncrementTick+0x134>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d000      	beq.n	800611c <xTaskIncrementTick+0x14>
 800611a:	e084      	b.n	8006226 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800611c:	4b48      	ldr	r3, [pc, #288]	; (8006240 <xTaskIncrementTick+0x138>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006124:	4b46      	ldr	r3, [pc, #280]	; (8006240 <xTaskIncrementTick+0x138>)
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d117      	bne.n	8006160 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006130:	4b44      	ldr	r3, [pc, #272]	; (8006244 <xTaskIncrementTick+0x13c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <xTaskIncrementTick+0x36>
 800613a:	b672      	cpsid	i
 800613c:	e7fe      	b.n	800613c <xTaskIncrementTick+0x34>
 800613e:	4b41      	ldr	r3, [pc, #260]	; (8006244 <xTaskIncrementTick+0x13c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	4b40      	ldr	r3, [pc, #256]	; (8006248 <xTaskIncrementTick+0x140>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4b3e      	ldr	r3, [pc, #248]	; (8006244 <xTaskIncrementTick+0x13c>)
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	4b3e      	ldr	r3, [pc, #248]	; (8006248 <xTaskIncrementTick+0x140>)
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	4b3e      	ldr	r3, [pc, #248]	; (800624c <xTaskIncrementTick+0x144>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	4b3c      	ldr	r3, [pc, #240]	; (800624c <xTaskIncrementTick+0x144>)
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	f000 fa52 	bl	8006604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006160:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <xTaskIncrementTick+0x148>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	429a      	cmp	r2, r3
 8006168:	d349      	bcc.n	80061fe <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800616a:	4b36      	ldr	r3, [pc, #216]	; (8006244 <xTaskIncrementTick+0x13c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006174:	4b36      	ldr	r3, [pc, #216]	; (8006250 <xTaskIncrementTick+0x148>)
 8006176:	2201      	movs	r2, #1
 8006178:	4252      	negs	r2, r2
 800617a:	601a      	str	r2, [r3, #0]
					break;
 800617c:	e03f      	b.n	80061fe <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800617e:	4b31      	ldr	r3, [pc, #196]	; (8006244 <xTaskIncrementTick+0x13c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	d203      	bcs.n	800619e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006196:	4b2e      	ldr	r3, [pc, #184]	; (8006250 <xTaskIncrementTick+0x148>)
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800619c:	e02f      	b.n	80061fe <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	3304      	adds	r3, #4
 80061a2:	0018      	movs	r0, r3
 80061a4:	f7ff f9b2 	bl	800550c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d004      	beq.n	80061ba <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	3318      	adds	r3, #24
 80061b4:	0018      	movs	r0, r3
 80061b6:	f7ff f9a9 	bl	800550c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061be:	4b25      	ldr	r3, [pc, #148]	; (8006254 <xTaskIncrementTick+0x14c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d903      	bls.n	80061ce <xTaskIncrementTick+0xc6>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ca:	4b22      	ldr	r3, [pc, #136]	; (8006254 <xTaskIncrementTick+0x14c>)
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d2:	0013      	movs	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	189b      	adds	r3, r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4a1f      	ldr	r2, [pc, #124]	; (8006258 <xTaskIncrementTick+0x150>)
 80061dc:	189a      	adds	r2, r3, r2
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	3304      	adds	r3, #4
 80061e2:	0019      	movs	r1, r3
 80061e4:	0010      	movs	r0, r2
 80061e6:	f7ff f939 	bl	800545c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ee:	4b1b      	ldr	r3, [pc, #108]	; (800625c <xTaskIncrementTick+0x154>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d3b8      	bcc.n	800616a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80061f8:	2301      	movs	r3, #1
 80061fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061fc:	e7b5      	b.n	800616a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061fe:	4b17      	ldr	r3, [pc, #92]	; (800625c <xTaskIncrementTick+0x154>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006204:	4914      	ldr	r1, [pc, #80]	; (8006258 <xTaskIncrementTick+0x150>)
 8006206:	0013      	movs	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	189b      	adds	r3, r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	585b      	ldr	r3, [r3, r1]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d901      	bls.n	8006218 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006218:	4b11      	ldr	r3, [pc, #68]	; (8006260 <xTaskIncrementTick+0x158>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8006220:	2301      	movs	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	e004      	b.n	8006230 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006226:	4b0f      	ldr	r3, [pc, #60]	; (8006264 <xTaskIncrementTick+0x15c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <xTaskIncrementTick+0x15c>)
 800622e:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006230:	697b      	ldr	r3, [r7, #20]
}
 8006232:	0018      	movs	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	b006      	add	sp, #24
 8006238:	bd80      	pop	{r7, pc}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	20000758 	.word	0x20000758
 8006240:	20000734 	.word	0x20000734
 8006244:	200006e8 	.word	0x200006e8
 8006248:	200006ec 	.word	0x200006ec
 800624c:	20000748 	.word	0x20000748
 8006250:	20000750 	.word	0x20000750
 8006254:	20000738 	.word	0x20000738
 8006258:	20000634 	.word	0x20000634
 800625c:	20000630 	.word	0x20000630
 8006260:	20000744 	.word	0x20000744
 8006264:	20000740 	.word	0x20000740

08006268 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800626e:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <vTaskSwitchContext+0x90>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006276:	4b21      	ldr	r3, [pc, #132]	; (80062fc <vTaskSwitchContext+0x94>)
 8006278:	2201      	movs	r2, #1
 800627a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800627c:	e037      	b.n	80062ee <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800627e:	4b1f      	ldr	r3, [pc, #124]	; (80062fc <vTaskSwitchContext+0x94>)
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006284:	4b1e      	ldr	r3, [pc, #120]	; (8006300 <vTaskSwitchContext+0x98>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	e007      	b.n	800629c <vTaskSwitchContext+0x34>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <vTaskSwitchContext+0x2e>
 8006292:	b672      	cpsid	i
 8006294:	e7fe      	b.n	8006294 <vTaskSwitchContext+0x2c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3b01      	subs	r3, #1
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	4919      	ldr	r1, [pc, #100]	; (8006304 <vTaskSwitchContext+0x9c>)
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	0013      	movs	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	189b      	adds	r3, r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	585b      	ldr	r3, [r3, r1]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0ee      	beq.n	800628c <vTaskSwitchContext+0x24>
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	0013      	movs	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	189b      	adds	r3, r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4a12      	ldr	r2, [pc, #72]	; (8006304 <vTaskSwitchContext+0x9c>)
 80062ba:	189b      	adds	r3, r3, r2
 80062bc:	603b      	str	r3, [r7, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	605a      	str	r2, [r3, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d104      	bne.n	80062de <vTaskSwitchContext+0x76>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	605a      	str	r2, [r3, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	4b08      	ldr	r3, [pc, #32]	; (8006308 <vTaskSwitchContext+0xa0>)
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	4b05      	ldr	r3, [pc, #20]	; (8006300 <vTaskSwitchContext+0x98>)
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	601a      	str	r2, [r3, #0]
}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b002      	add	sp, #8
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	20000758 	.word	0x20000758
 80062fc:	20000744 	.word	0x20000744
 8006300:	20000738 	.word	0x20000738
 8006304:	20000634 	.word	0x20000634
 8006308:	20000630 	.word	0x20000630

0800630c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <vTaskPlaceOnEventList+0x14>
 800631c:	b672      	cpsid	i
 800631e:	e7fe      	b.n	800631e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006320:	4b08      	ldr	r3, [pc, #32]	; (8006344 <vTaskPlaceOnEventList+0x38>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3318      	adds	r3, #24
 8006326:	001a      	movs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	0011      	movs	r1, r2
 800632c:	0018      	movs	r0, r3
 800632e:	f7ff f8b7 	bl	80054a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2101      	movs	r1, #1
 8006336:	0018      	movs	r0, r3
 8006338:	f000 fae4 	bl	8006904 <prvAddCurrentTaskToDelayedList>
}
 800633c:	46c0      	nop			; (mov r8, r8)
 800633e:	46bd      	mov	sp, r7
 8006340:	b002      	add	sp, #8
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000630 	.word	0x20000630

08006348 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <xTaskRemoveFromEventList+0x1a>
 800635e:	b672      	cpsid	i
 8006360:	e7fe      	b.n	8006360 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	3318      	adds	r3, #24
 8006366:	0018      	movs	r0, r3
 8006368:	f7ff f8d0 	bl	800550c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800636c:	4b1e      	ldr	r3, [pc, #120]	; (80063e8 <xTaskRemoveFromEventList+0xa0>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d11d      	bne.n	80063b0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	3304      	adds	r3, #4
 8006378:	0018      	movs	r0, r3
 800637a:	f7ff f8c7 	bl	800550c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006382:	4b1a      	ldr	r3, [pc, #104]	; (80063ec <xTaskRemoveFromEventList+0xa4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d903      	bls.n	8006392 <xTaskRemoveFromEventList+0x4a>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	4b17      	ldr	r3, [pc, #92]	; (80063ec <xTaskRemoveFromEventList+0xa4>)
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006396:	0013      	movs	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	189b      	adds	r3, r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4a14      	ldr	r2, [pc, #80]	; (80063f0 <xTaskRemoveFromEventList+0xa8>)
 80063a0:	189a      	adds	r2, r3, r2
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	3304      	adds	r3, #4
 80063a6:	0019      	movs	r1, r3
 80063a8:	0010      	movs	r0, r2
 80063aa:	f7ff f857 	bl	800545c <vListInsertEnd>
 80063ae:	e007      	b.n	80063c0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	3318      	adds	r3, #24
 80063b4:	001a      	movs	r2, r3
 80063b6:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <xTaskRemoveFromEventList+0xac>)
 80063b8:	0011      	movs	r1, r2
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7ff f84e 	bl	800545c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <xTaskRemoveFromEventList+0xb0>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d905      	bls.n	80063da <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063ce:	2301      	movs	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063d2:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <xTaskRemoveFromEventList+0xb4>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	e001      	b.n	80063de <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80063de:	68fb      	ldr	r3, [r7, #12]
}
 80063e0:	0018      	movs	r0, r3
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b004      	add	sp, #16
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000758 	.word	0x20000758
 80063ec:	20000738 	.word	0x20000738
 80063f0:	20000634 	.word	0x20000634
 80063f4:	200006f0 	.word	0x200006f0
 80063f8:	20000630 	.word	0x20000630
 80063fc:	20000744 	.word	0x20000744

08006400 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <vTaskInternalSetTimeOutState+0x20>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006410:	4b04      	ldr	r3, [pc, #16]	; (8006424 <vTaskInternalSetTimeOutState+0x24>)
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	605a      	str	r2, [r3, #4]
}
 8006418:	46c0      	nop			; (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	b002      	add	sp, #8
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000748 	.word	0x20000748
 8006424:	20000734 	.word	0x20000734

08006428 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <xTaskCheckForTimeOut+0x14>
 8006438:	b672      	cpsid	i
 800643a:	e7fe      	b.n	800643a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <xTaskCheckForTimeOut+0x1e>
 8006442:	b672      	cpsid	i
 8006444:	e7fe      	b.n	8006444 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8006446:	f000 fb4b 	bl	8006ae0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800644a:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <xTaskCheckForTimeOut+0x98>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3301      	adds	r3, #1
 8006460:	d102      	bne.n	8006468 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e024      	b.n	80064b2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <xTaskCheckForTimeOut+0x9c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d007      	beq.n	8006484 <xTaskCheckForTimeOut+0x5c>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	429a      	cmp	r2, r3
 800647c:	d302      	bcc.n	8006484 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800647e:	2301      	movs	r3, #1
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	e016      	b.n	80064b2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	429a      	cmp	r2, r3
 800648c:	d20c      	bcs.n	80064a8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad2      	subs	r2, r2, r3
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	0018      	movs	r0, r3
 800649e:	f7ff ffaf 	bl	8006400 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e004      	b.n	80064b2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064ae:	2301      	movs	r3, #1
 80064b0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80064b2:	f000 fb27 	bl	8006b04 <vPortExitCritical>

	return xReturn;
 80064b6:	697b      	ldr	r3, [r7, #20]
}
 80064b8:	0018      	movs	r0, r3
 80064ba:	46bd      	mov	sp, r7
 80064bc:	b006      	add	sp, #24
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000734 	.word	0x20000734
 80064c4:	20000748 	.word	0x20000748

080064c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064cc:	4b02      	ldr	r3, [pc, #8]	; (80064d8 <vTaskMissedYield+0x10>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20000744 	.word	0x20000744

080064dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064e4:	f000 f84e 	bl	8006584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064e8:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <prvIdleTask+0x1c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d9f9      	bls.n	80064e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064f0:	f000 fae6 	bl	8006ac0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80064f4:	e7f6      	b.n	80064e4 <prvIdleTask+0x8>
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	20000634 	.word	0x20000634

080064fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006502:	2300      	movs	r3, #0
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	e00c      	b.n	8006522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	0013      	movs	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	189b      	adds	r3, r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4a14      	ldr	r2, [pc, #80]	; (8006564 <prvInitialiseTaskLists+0x68>)
 8006514:	189b      	adds	r3, r3, r2
 8006516:	0018      	movs	r0, r3
 8006518:	f7fe ff77 	bl	800540a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3301      	adds	r3, #1
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b06      	cmp	r3, #6
 8006526:	d9ef      	bls.n	8006508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006528:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <prvInitialiseTaskLists+0x6c>)
 800652a:	0018      	movs	r0, r3
 800652c:	f7fe ff6d 	bl	800540a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006530:	4b0e      	ldr	r3, [pc, #56]	; (800656c <prvInitialiseTaskLists+0x70>)
 8006532:	0018      	movs	r0, r3
 8006534:	f7fe ff69 	bl	800540a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006538:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <prvInitialiseTaskLists+0x74>)
 800653a:	0018      	movs	r0, r3
 800653c:	f7fe ff65 	bl	800540a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006540:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <prvInitialiseTaskLists+0x78>)
 8006542:	0018      	movs	r0, r3
 8006544:	f7fe ff61 	bl	800540a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006548:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <prvInitialiseTaskLists+0x7c>)
 800654a:	0018      	movs	r0, r3
 800654c:	f7fe ff5d 	bl	800540a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006550:	4b0a      	ldr	r3, [pc, #40]	; (800657c <prvInitialiseTaskLists+0x80>)
 8006552:	4a05      	ldr	r2, [pc, #20]	; (8006568 <prvInitialiseTaskLists+0x6c>)
 8006554:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006556:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <prvInitialiseTaskLists+0x84>)
 8006558:	4a04      	ldr	r2, [pc, #16]	; (800656c <prvInitialiseTaskLists+0x70>)
 800655a:	601a      	str	r2, [r3, #0]
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	46bd      	mov	sp, r7
 8006560:	b002      	add	sp, #8
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20000634 	.word	0x20000634
 8006568:	200006c0 	.word	0x200006c0
 800656c:	200006d4 	.word	0x200006d4
 8006570:	200006f0 	.word	0x200006f0
 8006574:	20000704 	.word	0x20000704
 8006578:	2000071c 	.word	0x2000071c
 800657c:	200006e8 	.word	0x200006e8
 8006580:	200006ec 	.word	0x200006ec

08006584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800658a:	e01a      	b.n	80065c2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800658c:	f000 faa8 	bl	8006ae0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006590:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <prvCheckTasksWaitingTermination+0x50>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3304      	adds	r3, #4
 800659c:	0018      	movs	r0, r3
 800659e:	f7fe ffb5 	bl	800550c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065a2:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <prvCheckTasksWaitingTermination+0x54>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	1e5a      	subs	r2, r3, #1
 80065a8:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <prvCheckTasksWaitingTermination+0x54>)
 80065aa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065ac:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <prvCheckTasksWaitingTermination+0x58>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <prvCheckTasksWaitingTermination+0x58>)
 80065b4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80065b6:	f000 faa5 	bl	8006b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	0018      	movs	r0, r3
 80065be:	f000 f80f 	bl	80065e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065c2:	4b06      	ldr	r3, [pc, #24]	; (80065dc <prvCheckTasksWaitingTermination+0x58>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e0      	bne.n	800658c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065ca:	46c0      	nop			; (mov r8, r8)
 80065cc:	46c0      	nop			; (mov r8, r8)
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b002      	add	sp, #8
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20000704 	.word	0x20000704
 80065d8:	20000730 	.word	0x20000730
 80065dc:	20000718 	.word	0x20000718

080065e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 fbbb 	bl	8006d68 <vPortFree>
			vPortFree( pxTCB );
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	0018      	movs	r0, r3
 80065f6:	f000 fbb7 	bl	8006d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	46bd      	mov	sp, r7
 80065fe:	b002      	add	sp, #8
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800660a:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <prvResetNextTaskUnblockTime+0x34>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d104      	bne.n	800661e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006614:	4b09      	ldr	r3, [pc, #36]	; (800663c <prvResetNextTaskUnblockTime+0x38>)
 8006616:	2201      	movs	r2, #1
 8006618:	4252      	negs	r2, r2
 800661a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800661c:	e008      	b.n	8006630 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800661e:	4b06      	ldr	r3, [pc, #24]	; (8006638 <prvResetNextTaskUnblockTime+0x34>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	4b03      	ldr	r3, [pc, #12]	; (800663c <prvResetNextTaskUnblockTime+0x38>)
 800662e:	601a      	str	r2, [r3, #0]
}
 8006630:	46c0      	nop			; (mov r8, r8)
 8006632:	46bd      	mov	sp, r7
 8006634:	b002      	add	sp, #8
 8006636:	bd80      	pop	{r7, pc}
 8006638:	200006e8 	.word	0x200006e8
 800663c:	20000750 	.word	0x20000750

08006640 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006646:	4b0a      	ldr	r3, [pc, #40]	; (8006670 <xTaskGetSchedulerState+0x30>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d102      	bne.n	8006654 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800664e:	2301      	movs	r3, #1
 8006650:	607b      	str	r3, [r7, #4]
 8006652:	e008      	b.n	8006666 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <xTaskGetSchedulerState+0x34>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d102      	bne.n	8006662 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800665c:	2302      	movs	r3, #2
 800665e:	607b      	str	r3, [r7, #4]
 8006660:	e001      	b.n	8006666 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006662:	2300      	movs	r3, #0
 8006664:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006666:	687b      	ldr	r3, [r7, #4]
	}
 8006668:	0018      	movs	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	b002      	add	sp, #8
 800666e:	bd80      	pop	{r7, pc}
 8006670:	2000073c 	.word	0x2000073c
 8006674:	20000758 	.word	0x20000758

08006678 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d051      	beq.n	8006732 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	4b2a      	ldr	r3, [pc, #168]	; (800673c <xTaskPriorityInherit+0xc4>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	429a      	cmp	r2, r3
 800669a:	d241      	bcs.n	8006720 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	db06      	blt.n	80066b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a4:	4b25      	ldr	r3, [pc, #148]	; (800673c <xTaskPriorityInherit+0xc4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	2207      	movs	r2, #7
 80066ac:	1ad2      	subs	r2, r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	6959      	ldr	r1, [r3, #20]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ba:	0013      	movs	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	189b      	adds	r3, r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <xTaskPriorityInherit+0xc8>)
 80066c4:	189b      	adds	r3, r3, r2
 80066c6:	4299      	cmp	r1, r3
 80066c8:	d122      	bne.n	8006710 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	3304      	adds	r3, #4
 80066ce:	0018      	movs	r0, r3
 80066d0:	f7fe ff1c 	bl	800550c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066d4:	4b19      	ldr	r3, [pc, #100]	; (800673c <xTaskPriorityInherit+0xc4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e2:	4b18      	ldr	r3, [pc, #96]	; (8006744 <xTaskPriorityInherit+0xcc>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d903      	bls.n	80066f2 <xTaskPriorityInherit+0x7a>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ee:	4b15      	ldr	r3, [pc, #84]	; (8006744 <xTaskPriorityInherit+0xcc>)
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	0013      	movs	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	189b      	adds	r3, r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4a10      	ldr	r2, [pc, #64]	; (8006740 <xTaskPriorityInherit+0xc8>)
 8006700:	189a      	adds	r2, r3, r2
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	3304      	adds	r3, #4
 8006706:	0019      	movs	r1, r3
 8006708:	0010      	movs	r0, r2
 800670a:	f7fe fea7 	bl	800545c <vListInsertEnd>
 800670e:	e004      	b.n	800671a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006710:	4b0a      	ldr	r3, [pc, #40]	; (800673c <xTaskPriorityInherit+0xc4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800671a:	2301      	movs	r3, #1
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e008      	b.n	8006732 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <xTaskPriorityInherit+0xc4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	429a      	cmp	r2, r3
 800672c:	d201      	bcs.n	8006732 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800672e:	2301      	movs	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006732:	68fb      	ldr	r3, [r7, #12]
	}
 8006734:	0018      	movs	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	b004      	add	sp, #16
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000630 	.word	0x20000630
 8006740:	20000634 	.word	0x20000634
 8006744:	20000738 	.word	0x20000738

08006748 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d044      	beq.n	80067e8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800675e:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <xTaskPriorityDisinherit+0xac>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	429a      	cmp	r2, r3
 8006766:	d001      	beq.n	800676c <xTaskPriorityDisinherit+0x24>
 8006768:	b672      	cpsid	i
 800676a:	e7fe      	b.n	800676a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <xTaskPriorityDisinherit+0x30>
 8006774:	b672      	cpsid	i
 8006776:	e7fe      	b.n	8006776 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677c:	1e5a      	subs	r2, r3, #1
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678a:	429a      	cmp	r2, r3
 800678c:	d02c      	beq.n	80067e8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006792:	2b00      	cmp	r3, #0
 8006794:	d128      	bne.n	80067e8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	3304      	adds	r3, #4
 800679a:	0018      	movs	r0, r3
 800679c:	f7fe feb6 	bl	800550c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	2207      	movs	r2, #7
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b8:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <xTaskPriorityDisinherit+0xb0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d903      	bls.n	80067c8 <xTaskPriorityDisinherit+0x80>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <xTaskPriorityDisinherit+0xb0>)
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067cc:	0013      	movs	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	189b      	adds	r3, r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4a09      	ldr	r2, [pc, #36]	; (80067fc <xTaskPriorityDisinherit+0xb4>)
 80067d6:	189a      	adds	r2, r3, r2
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	3304      	adds	r3, #4
 80067dc:	0019      	movs	r1, r3
 80067de:	0010      	movs	r0, r2
 80067e0:	f7fe fe3c 	bl	800545c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067e4:	2301      	movs	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067e8:	68fb      	ldr	r3, [r7, #12]
	}
 80067ea:	0018      	movs	r0, r3
 80067ec:	46bd      	mov	sp, r7
 80067ee:	b004      	add	sp, #16
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	46c0      	nop			; (mov r8, r8)
 80067f4:	20000630 	.word	0x20000630
 80067f8:	20000738 	.word	0x20000738
 80067fc:	20000634 	.word	0x20000634

08006800 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800680e:	2301      	movs	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d058      	beq.n	80068ca <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8006820:	b672      	cpsid	i
 8006822:	e7fe      	b.n	8006822 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d902      	bls.n	8006834 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	e002      	b.n	800683a <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006838:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	429a      	cmp	r2, r3
 8006842:	d042      	beq.n	80068ca <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	429a      	cmp	r2, r3
 800684c:	d13d      	bne.n	80068ca <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800684e:	4b21      	ldr	r3, [pc, #132]	; (80068d4 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	429a      	cmp	r2, r3
 8006856:	d101      	bne.n	800685c <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8006858:	b672      	cpsid	i
 800685a:	e7fe      	b.n	800685a <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	db04      	blt.n	800687a <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2207      	movs	r2, #7
 8006874:	1ad2      	subs	r2, r2, r3
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	6959      	ldr	r1, [r3, #20]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	0013      	movs	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	189b      	adds	r3, r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4a13      	ldr	r2, [pc, #76]	; (80068d8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800688a:	189b      	adds	r3, r3, r2
 800688c:	4299      	cmp	r1, r3
 800688e:	d11c      	bne.n	80068ca <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	3304      	adds	r3, #4
 8006894:	0018      	movs	r0, r3
 8006896:	f7fe fe39 	bl	800550c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689e:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d903      	bls.n	80068ae <vTaskPriorityDisinheritAfterTimeout+0xae>
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068aa:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b2:	0013      	movs	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	189b      	adds	r3, r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4a07      	ldr	r2, [pc, #28]	; (80068d8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80068bc:	189a      	adds	r2, r3, r2
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	3304      	adds	r3, #4
 80068c2:	0019      	movs	r1, r3
 80068c4:	0010      	movs	r0, r2
 80068c6:	f7fe fdc9 	bl	800545c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b006      	add	sp, #24
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	20000630 	.word	0x20000630
 80068d8:	20000634 	.word	0x20000634
 80068dc:	20000738 	.word	0x20000738

080068e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80068e4:	4b06      	ldr	r3, [pc, #24]	; (8006900 <pvTaskIncrementMutexHeldCount+0x20>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d004      	beq.n	80068f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80068ec:	4b04      	ldr	r3, [pc, #16]	; (8006900 <pvTaskIncrementMutexHeldCount+0x20>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068f2:	3201      	adds	r2, #1
 80068f4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80068f6:	4b02      	ldr	r3, [pc, #8]	; (8006900 <pvTaskIncrementMutexHeldCount+0x20>)
 80068f8:	681b      	ldr	r3, [r3, #0]
	}
 80068fa:	0018      	movs	r0, r3
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	20000630 	.word	0x20000630

08006904 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800690e:	4b21      	ldr	r3, [pc, #132]	; (8006994 <prvAddCurrentTaskToDelayedList+0x90>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006914:	4b20      	ldr	r3, [pc, #128]	; (8006998 <prvAddCurrentTaskToDelayedList+0x94>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3304      	adds	r3, #4
 800691a:	0018      	movs	r0, r3
 800691c:	f7fe fdf6 	bl	800550c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3301      	adds	r3, #1
 8006924:	d10b      	bne.n	800693e <prvAddCurrentTaskToDelayedList+0x3a>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800692c:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <prvAddCurrentTaskToDelayedList+0x94>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	1d1a      	adds	r2, r3, #4
 8006932:	4b1a      	ldr	r3, [pc, #104]	; (800699c <prvAddCurrentTaskToDelayedList+0x98>)
 8006934:	0011      	movs	r1, r2
 8006936:	0018      	movs	r0, r3
 8006938:	f7fe fd90 	bl	800545c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800693c:	e026      	b.n	800698c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	18d3      	adds	r3, r2, r3
 8006944:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <prvAddCurrentTaskToDelayedList+0x94>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	429a      	cmp	r2, r3
 8006954:	d209      	bcs.n	800696a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <prvAddCurrentTaskToDelayedList+0x94>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3304      	adds	r3, #4
 8006960:	0019      	movs	r1, r3
 8006962:	0010      	movs	r0, r2
 8006964:	f7fe fd9c 	bl	80054a0 <vListInsert>
}
 8006968:	e010      	b.n	800698c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800696a:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <prvAddCurrentTaskToDelayedList+0x94>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3304      	adds	r3, #4
 8006974:	0019      	movs	r1, r3
 8006976:	0010      	movs	r0, r2
 8006978:	f7fe fd92 	bl	80054a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800697c:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	429a      	cmp	r2, r3
 8006984:	d202      	bcs.n	800698c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006986:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	601a      	str	r2, [r3, #0]
}
 800698c:	46c0      	nop			; (mov r8, r8)
 800698e:	46bd      	mov	sp, r7
 8006990:	b004      	add	sp, #16
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000734 	.word	0x20000734
 8006998:	20000630 	.word	0x20000630
 800699c:	2000071c 	.word	0x2000071c
 80069a0:	200006ec 	.word	0x200006ec
 80069a4:	200006e8 	.word	0x200006e8
 80069a8:	20000750 	.word	0x20000750

080069ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3b04      	subs	r3, #4
 80069bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2280      	movs	r2, #128	; 0x80
 80069c2:	0452      	lsls	r2, r2, #17
 80069c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3b04      	subs	r3, #4
 80069ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3b04      	subs	r3, #4
 80069d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069d8:	4a08      	ldr	r2, [pc, #32]	; (80069fc <pxPortInitialiseStack+0x50>)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3b14      	subs	r3, #20
 80069e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3b20      	subs	r3, #32
 80069ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069f0:	68fb      	ldr	r3, [r7, #12]
}
 80069f2:	0018      	movs	r0, r3
 80069f4:	46bd      	mov	sp, r7
 80069f6:	b004      	add	sp, #16
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	08006a01 	.word	0x08006a01

08006a00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a0a:	4b08      	ldr	r3, [pc, #32]	; (8006a2c <prvTaskExitError+0x2c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	d001      	beq.n	8006a16 <prvTaskExitError+0x16>
 8006a12:	b672      	cpsid	i
 8006a14:	e7fe      	b.n	8006a14 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006a16:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006a18:	46c0      	nop			; (mov r8, r8)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0fc      	beq.n	8006a1a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a20:	46c0      	nop			; (mov r8, r8)
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b002      	add	sp, #8
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	20000014 	.word	0x20000014

08006a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006a34:	46c0      	nop			; (mov r8, r8)
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	0000      	movs	r0, r0
 8006a3c:	0000      	movs	r0, r0
	...

08006a40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006a40:	4a0b      	ldr	r2, [pc, #44]	; (8006a70 <pxCurrentTCBConst2>)
 8006a42:	6813      	ldr	r3, [r2, #0]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	3020      	adds	r0, #32
 8006a48:	f380 8809 	msr	PSP, r0
 8006a4c:	2002      	movs	r0, #2
 8006a4e:	f380 8814 	msr	CONTROL, r0
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006a58:	46ae      	mov	lr, r5
 8006a5a:	bc08      	pop	{r3}
 8006a5c:	bc04      	pop	{r2}
 8006a5e:	b662      	cpsie	i
 8006a60:	4718      	bx	r3
 8006a62:	46c0      	nop			; (mov r8, r8)
 8006a64:	46c0      	nop			; (mov r8, r8)
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	46c0      	nop			; (mov r8, r8)
 8006a6a:	46c0      	nop			; (mov r8, r8)
 8006a6c:	46c0      	nop			; (mov r8, r8)
 8006a6e:	46c0      	nop			; (mov r8, r8)

08006a70 <pxCurrentTCBConst2>:
 8006a70:	20000630 	.word	0x20000630
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006a74:	46c0      	nop			; (mov r8, r8)
 8006a76:	46c0      	nop			; (mov r8, r8)

08006a78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a7c:	4b0e      	ldr	r3, [pc, #56]	; (8006ab8 <xPortStartScheduler+0x40>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <xPortStartScheduler+0x40>)
 8006a82:	21ff      	movs	r1, #255	; 0xff
 8006a84:	0409      	lsls	r1, r1, #16
 8006a86:	430a      	orrs	r2, r1
 8006a88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <xPortStartScheduler+0x40>)
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <xPortStartScheduler+0x40>)
 8006a90:	21ff      	movs	r1, #255	; 0xff
 8006a92:	0609      	lsls	r1, r1, #24
 8006a94:	430a      	orrs	r2, r1
 8006a96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a98:	f000 f898 	bl	8006bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a9c:	4b07      	ldr	r3, [pc, #28]	; (8006abc <xPortStartScheduler+0x44>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006aa2:	f7ff ffcd 	bl	8006a40 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006aa6:	f7ff fbdf 	bl	8006268 <vTaskSwitchContext>
	prvTaskExitError();
 8006aaa:	f7ff ffa9 	bl	8006a00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	e000ed20 	.word	0xe000ed20
 8006abc:	20000014 	.word	0x20000014

08006ac0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <vPortYield+0x1c>)
 8006ac6:	2280      	movs	r2, #128	; 0x80
 8006ac8:	0552      	lsls	r2, r2, #21
 8006aca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8006acc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006ad0:	f3bf 8f6f 	isb	sy
}
 8006ad4:	46c0      	nop			; (mov r8, r8)
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8006ae4:	b672      	cpsid	i
	uxCriticalNesting++;
 8006ae6:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <vPortEnterCritical+0x20>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <vPortEnterCritical+0x20>)
 8006aee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006af0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006af4:	f3bf 8f6f 	isb	sy
}
 8006af8:	46c0      	nop			; (mov r8, r8)
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	20000014 	.word	0x20000014

08006b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b08:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <vPortExitCritical+0x2c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <vPortExitCritical+0x10>
 8006b10:	b672      	cpsid	i
 8006b12:	e7fe      	b.n	8006b12 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8006b14:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <vPortExitCritical+0x2c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	1e5a      	subs	r2, r3, #1
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <vPortExitCritical+0x2c>)
 8006b1c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8006b1e:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <vPortExitCritical+0x2c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d100      	bne.n	8006b28 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8006b26:	b662      	cpsie	i
	}
}
 8006b28:	46c0      	nop			; (mov r8, r8)
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	20000014 	.word	0x20000014

08006b34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006b34:	f3ef 8010 	mrs	r0, PRIMASK
 8006b38:	b672      	cpsid	i
 8006b3a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8006b3c:	46c0      	nop			; (mov r8, r8)
 8006b3e:	0018      	movs	r0, r3

08006b40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006b40:	f380 8810 	msr	PRIMASK, r0
 8006b44:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8006b46:	46c0      	nop			; (mov r8, r8)
	...

08006b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b50:	f3ef 8009 	mrs	r0, PSP
 8006b54:	4b0e      	ldr	r3, [pc, #56]	; (8006b90 <pxCurrentTCBConst>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	3820      	subs	r0, #32
 8006b5a:	6010      	str	r0, [r2, #0]
 8006b5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006b5e:	4644      	mov	r4, r8
 8006b60:	464d      	mov	r5, r9
 8006b62:	4656      	mov	r6, sl
 8006b64:	465f      	mov	r7, fp
 8006b66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006b68:	b508      	push	{r3, lr}
 8006b6a:	b672      	cpsid	i
 8006b6c:	f7ff fb7c 	bl	8006268 <vTaskSwitchContext>
 8006b70:	b662      	cpsie	i
 8006b72:	bc0c      	pop	{r2, r3}
 8006b74:	6811      	ldr	r1, [r2, #0]
 8006b76:	6808      	ldr	r0, [r1, #0]
 8006b78:	3010      	adds	r0, #16
 8006b7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006b7c:	46a0      	mov	r8, r4
 8006b7e:	46a9      	mov	r9, r5
 8006b80:	46b2      	mov	sl, r6
 8006b82:	46bb      	mov	fp, r7
 8006b84:	f380 8809 	msr	PSP, r0
 8006b88:	3820      	subs	r0, #32
 8006b8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006b8c:	4718      	bx	r3
 8006b8e:	46c0      	nop			; (mov r8, r8)

08006b90 <pxCurrentTCBConst>:
 8006b90:	20000630 	.word	0x20000630
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006b94:	46c0      	nop			; (mov r8, r8)
 8006b96:	46c0      	nop			; (mov r8, r8)

08006b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b9e:	f7ff ffc9 	bl	8006b34 <ulSetInterruptMaskFromISR>
 8006ba2:	0003      	movs	r3, r0
 8006ba4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ba6:	f7ff faaf 	bl	8006108 <xTaskIncrementTick>
 8006baa:	1e03      	subs	r3, r0, #0
 8006bac:	d003      	beq.n	8006bb6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bae:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <xPortSysTickHandler+0x30>)
 8006bb0:	2280      	movs	r2, #128	; 0x80
 8006bb2:	0552      	lsls	r2, r2, #21
 8006bb4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f7ff ffc1 	bl	8006b40 <vClearInterruptMaskFromISR>
}
 8006bbe:	46c0      	nop			; (mov r8, r8)
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b002      	add	sp, #8
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <vPortSetupTimerInterrupt+0x34>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <vPortSetupTimerInterrupt+0x38>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bdc:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <vPortSetupTimerInterrupt+0x3c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	22fa      	movs	r2, #250	; 0xfa
 8006be2:	0091      	lsls	r1, r2, #2
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7f9 fa99 	bl	800011c <__udivsi3>
 8006bea:	0003      	movs	r3, r0
 8006bec:	001a      	movs	r2, r3
 8006bee:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <vPortSetupTimerInterrupt+0x40>)
 8006bf0:	3a01      	subs	r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8006bf4:	4b02      	ldr	r3, [pc, #8]	; (8006c00 <vPortSetupTimerInterrupt+0x34>)
 8006bf6:	2207      	movs	r2, #7
 8006bf8:	601a      	str	r2, [r3, #0]
}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	e000e010 	.word	0xe000e010
 8006c04:	e000e018 	.word	0xe000e018
 8006c08:	20000008 	.word	0x20000008
 8006c0c:	e000e014 	.word	0xe000e014

08006c10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006c1c:	f7ff f9dc 	bl	8005fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c20:	4b4b      	ldr	r3, [pc, #300]	; (8006d50 <pvPortMalloc+0x140>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c28:	f000 f8ec 	bl	8006e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c2c:	4b49      	ldr	r3, [pc, #292]	; (8006d54 <pvPortMalloc+0x144>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	4013      	ands	r3, r2
 8006c34:	d000      	beq.n	8006c38 <pvPortMalloc+0x28>
 8006c36:	e07e      	b.n	8006d36 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d012      	beq.n	8006c64 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8006c3e:	2208      	movs	r2, #8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	189b      	adds	r3, r3, r2
 8006c44:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2207      	movs	r2, #7
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	d00a      	beq.n	8006c64 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2207      	movs	r2, #7
 8006c52:	4393      	bics	r3, r2
 8006c54:	3308      	adds	r3, #8
 8006c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2207      	movs	r2, #7
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d001      	beq.n	8006c64 <pvPortMalloc+0x54>
 8006c60:	b672      	cpsid	i
 8006c62:	e7fe      	b.n	8006c62 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d065      	beq.n	8006d36 <pvPortMalloc+0x126>
 8006c6a:	4b3b      	ldr	r3, [pc, #236]	; (8006d58 <pvPortMalloc+0x148>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d860      	bhi.n	8006d36 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c74:	4b39      	ldr	r3, [pc, #228]	; (8006d5c <pvPortMalloc+0x14c>)
 8006c76:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006c78:	4b38      	ldr	r3, [pc, #224]	; (8006d5c <pvPortMalloc+0x14c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c7e:	e004      	b.n	8006c8a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d903      	bls.n	8006c9c <pvPortMalloc+0x8c>
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f1      	bne.n	8006c80 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c9c:	4b2c      	ldr	r3, [pc, #176]	; (8006d50 <pvPortMalloc+0x140>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d047      	beq.n	8006d36 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2208      	movs	r2, #8
 8006cac:	189b      	adds	r3, r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	1ad2      	subs	r2, r2, r3
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d916      	bls.n	8006cf6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	18d3      	adds	r3, r2, r3
 8006cce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2207      	movs	r2, #7
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	d001      	beq.n	8006cdc <pvPortMalloc+0xcc>
 8006cd8:	b672      	cpsid	i
 8006cda:	e7fe      	b.n	8006cda <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	1ad2      	subs	r2, r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f000 f8e7 	bl	8006ec4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cf6:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <pvPortMalloc+0x148>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <pvPortMalloc+0x148>)
 8006d02:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d04:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <pvPortMalloc+0x148>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4b15      	ldr	r3, [pc, #84]	; (8006d60 <pvPortMalloc+0x150>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d203      	bcs.n	8006d18 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d10:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <pvPortMalloc+0x148>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	4b12      	ldr	r3, [pc, #72]	; (8006d60 <pvPortMalloc+0x150>)
 8006d16:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <pvPortMalloc+0x144>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d2c:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <pvPortMalloc+0x154>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <pvPortMalloc+0x154>)
 8006d34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d36:	f7ff f95b 	bl	8005ff0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2207      	movs	r2, #7
 8006d3e:	4013      	ands	r3, r2
 8006d40:	d001      	beq.n	8006d46 <pvPortMalloc+0x136>
 8006d42:	b672      	cpsid	i
 8006d44:	e7fe      	b.n	8006d44 <pvPortMalloc+0x134>
	return pvReturn;
 8006d46:	68fb      	ldr	r3, [r7, #12]
}
 8006d48:	0018      	movs	r0, r3
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b006      	add	sp, #24
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20001364 	.word	0x20001364
 8006d54:	20001378 	.word	0x20001378
 8006d58:	20001368 	.word	0x20001368
 8006d5c:	2000135c 	.word	0x2000135c
 8006d60:	2000136c 	.word	0x2000136c
 8006d64:	20001370 	.word	0x20001370

08006d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d03a      	beq.n	8006df0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	425b      	negs	r3, r3
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	18d3      	adds	r3, r2, r3
 8006d82:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <vPortFree+0x90>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4013      	ands	r3, r2
 8006d92:	d101      	bne.n	8006d98 <vPortFree+0x30>
 8006d94:	b672      	cpsid	i
 8006d96:	e7fe      	b.n	8006d96 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <vPortFree+0x3c>
 8006da0:	b672      	cpsid	i
 8006da2:	e7fe      	b.n	8006da2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <vPortFree+0x90>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4013      	ands	r3, r2
 8006dae:	d01f      	beq.n	8006df0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d11b      	bne.n	8006df0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	4b0e      	ldr	r3, [pc, #56]	; (8006df8 <vPortFree+0x90>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	401a      	ands	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dc8:	f7ff f906 	bl	8005fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <vPortFree+0x94>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	18d2      	adds	r2, r2, r3
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <vPortFree+0x94>)
 8006dd8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f000 f871 	bl	8006ec4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <vPortFree+0x98>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <vPortFree+0x98>)
 8006dea:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8006dec:	f7ff f900 	bl	8005ff0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006df0:	46c0      	nop			; (mov r8, r8)
 8006df2:	46bd      	mov	sp, r7
 8006df4:	b004      	add	sp, #16
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20001378 	.word	0x20001378
 8006dfc:	20001368 	.word	0x20001368
 8006e00:	20001374 	.word	0x20001374

08006e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e0a:	23c0      	movs	r3, #192	; 0xc0
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e10:	4b26      	ldr	r3, [pc, #152]	; (8006eac <prvHeapInit+0xa8>)
 8006e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2207      	movs	r2, #7
 8006e18:	4013      	ands	r3, r2
 8006e1a:	d00c      	beq.n	8006e36 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3307      	adds	r3, #7
 8006e20:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2207      	movs	r2, #7
 8006e26:	4393      	bics	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	1ad2      	subs	r2, r2, r3
 8006e30:	4b1e      	ldr	r3, [pc, #120]	; (8006eac <prvHeapInit+0xa8>)
 8006e32:	18d3      	adds	r3, r2, r3
 8006e34:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e3a:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <prvHeapInit+0xac>)
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e40:	4b1b      	ldr	r3, [pc, #108]	; (8006eb0 <prvHeapInit+0xac>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	18d3      	adds	r3, r2, r3
 8006e4c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e4e:	2208      	movs	r2, #8
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2207      	movs	r2, #7
 8006e5a:	4393      	bics	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	4b14      	ldr	r3, [pc, #80]	; (8006eb4 <prvHeapInit+0xb0>)
 8006e62:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006e64:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <prvHeapInit+0xb0>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e6c:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <prvHeapInit+0xb0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	1ad2      	subs	r2, r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e82:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <prvHeapInit+0xb0>)
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <prvHeapInit+0xb4>)
 8006e90:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <prvHeapInit+0xb8>)
 8006e98:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <prvHeapInit+0xbc>)
 8006e9c:	2280      	movs	r2, #128	; 0x80
 8006e9e:	0612      	lsls	r2, r2, #24
 8006ea0:	601a      	str	r2, [r3, #0]
}
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	b004      	add	sp, #16
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	2000075c 	.word	0x2000075c
 8006eb0:	2000135c 	.word	0x2000135c
 8006eb4:	20001364 	.word	0x20001364
 8006eb8:	2000136c 	.word	0x2000136c
 8006ebc:	20001368 	.word	0x20001368
 8006ec0:	20001378 	.word	0x20001378

08006ec4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ecc:	4b27      	ldr	r3, [pc, #156]	; (8006f6c <prvInsertBlockIntoFreeList+0xa8>)
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e002      	b.n	8006ed8 <prvInsertBlockIntoFreeList+0x14>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d8f7      	bhi.n	8006ed2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	18d3      	adds	r3, r2, r3
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d108      	bne.n	8006f06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	18d2      	adds	r2, r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	18d2      	adds	r2, r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d118      	bne.n	8006f4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <prvInsertBlockIntoFreeList+0xac>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d00d      	beq.n	8006f42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	18d2      	adds	r2, r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e008      	b.n	8006f54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f42:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <prvInsertBlockIntoFreeList+0xac>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	e003      	b.n	8006f54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d002      	beq.n	8006f62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	46bd      	mov	sp, r7
 8006f66:	b004      	add	sp, #16
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	2000135c 	.word	0x2000135c
 8006f70:	20001364 	.word	0x20001364

08006f74 <std>:
 8006f74:	2300      	movs	r3, #0
 8006f76:	b510      	push	{r4, lr}
 8006f78:	0004      	movs	r4, r0
 8006f7a:	6003      	str	r3, [r0, #0]
 8006f7c:	6043      	str	r3, [r0, #4]
 8006f7e:	6083      	str	r3, [r0, #8]
 8006f80:	8181      	strh	r1, [r0, #12]
 8006f82:	6643      	str	r3, [r0, #100]	; 0x64
 8006f84:	0019      	movs	r1, r3
 8006f86:	81c2      	strh	r2, [r0, #14]
 8006f88:	6103      	str	r3, [r0, #16]
 8006f8a:	6143      	str	r3, [r0, #20]
 8006f8c:	6183      	str	r3, [r0, #24]
 8006f8e:	2208      	movs	r2, #8
 8006f90:	305c      	adds	r0, #92	; 0x5c
 8006f92:	f000 fa03 	bl	800739c <memset>
 8006f96:	4b05      	ldr	r3, [pc, #20]	; (8006fac <std+0x38>)
 8006f98:	6224      	str	r4, [r4, #32]
 8006f9a:	6263      	str	r3, [r4, #36]	; 0x24
 8006f9c:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <std+0x3c>)
 8006f9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fa0:	4b04      	ldr	r3, [pc, #16]	; (8006fb4 <std+0x40>)
 8006fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fa4:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <std+0x44>)
 8006fa6:	6323      	str	r3, [r4, #48]	; 0x30
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	080071b9 	.word	0x080071b9
 8006fb0:	080071e1 	.word	0x080071e1
 8006fb4:	08007219 	.word	0x08007219
 8006fb8:	08007245 	.word	0x08007245

08006fbc <stdio_exit_handler>:
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	4a03      	ldr	r2, [pc, #12]	; (8006fcc <stdio_exit_handler+0x10>)
 8006fc0:	4903      	ldr	r1, [pc, #12]	; (8006fd0 <stdio_exit_handler+0x14>)
 8006fc2:	4804      	ldr	r0, [pc, #16]	; (8006fd4 <stdio_exit_handler+0x18>)
 8006fc4:	f000 f86c 	bl	80070a0 <_fwalk_sglue>
 8006fc8:	bd10      	pop	{r4, pc}
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	20000018 	.word	0x20000018
 8006fd0:	08007d4d 	.word	0x08007d4d
 8006fd4:	20000024 	.word	0x20000024

08006fd8 <cleanup_stdio>:
 8006fd8:	6841      	ldr	r1, [r0, #4]
 8006fda:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <cleanup_stdio+0x30>)
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	0004      	movs	r4, r0
 8006fe0:	4299      	cmp	r1, r3
 8006fe2:	d001      	beq.n	8006fe8 <cleanup_stdio+0x10>
 8006fe4:	f000 feb2 	bl	8007d4c <_fflush_r>
 8006fe8:	68a1      	ldr	r1, [r4, #8]
 8006fea:	4b08      	ldr	r3, [pc, #32]	; (800700c <cleanup_stdio+0x34>)
 8006fec:	4299      	cmp	r1, r3
 8006fee:	d002      	beq.n	8006ff6 <cleanup_stdio+0x1e>
 8006ff0:	0020      	movs	r0, r4
 8006ff2:	f000 feab 	bl	8007d4c <_fflush_r>
 8006ff6:	68e1      	ldr	r1, [r4, #12]
 8006ff8:	4b05      	ldr	r3, [pc, #20]	; (8007010 <cleanup_stdio+0x38>)
 8006ffa:	4299      	cmp	r1, r3
 8006ffc:	d002      	beq.n	8007004 <cleanup_stdio+0x2c>
 8006ffe:	0020      	movs	r0, r4
 8007000:	f000 fea4 	bl	8007d4c <_fflush_r>
 8007004:	bd10      	pop	{r4, pc}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	2000137c 	.word	0x2000137c
 800700c:	200013e4 	.word	0x200013e4
 8007010:	2000144c 	.word	0x2000144c

08007014 <global_stdio_init.part.0>:
 8007014:	b510      	push	{r4, lr}
 8007016:	4b09      	ldr	r3, [pc, #36]	; (800703c <global_stdio_init.part.0+0x28>)
 8007018:	4a09      	ldr	r2, [pc, #36]	; (8007040 <global_stdio_init.part.0+0x2c>)
 800701a:	2104      	movs	r1, #4
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	4809      	ldr	r0, [pc, #36]	; (8007044 <global_stdio_init.part.0+0x30>)
 8007020:	2200      	movs	r2, #0
 8007022:	f7ff ffa7 	bl	8006f74 <std>
 8007026:	2201      	movs	r2, #1
 8007028:	2109      	movs	r1, #9
 800702a:	4807      	ldr	r0, [pc, #28]	; (8007048 <global_stdio_init.part.0+0x34>)
 800702c:	f7ff ffa2 	bl	8006f74 <std>
 8007030:	2202      	movs	r2, #2
 8007032:	2112      	movs	r1, #18
 8007034:	4805      	ldr	r0, [pc, #20]	; (800704c <global_stdio_init.part.0+0x38>)
 8007036:	f7ff ff9d 	bl	8006f74 <std>
 800703a:	bd10      	pop	{r4, pc}
 800703c:	200014b4 	.word	0x200014b4
 8007040:	08006fbd 	.word	0x08006fbd
 8007044:	2000137c 	.word	0x2000137c
 8007048:	200013e4 	.word	0x200013e4
 800704c:	2000144c 	.word	0x2000144c

08007050 <__sfp_lock_acquire>:
 8007050:	b510      	push	{r4, lr}
 8007052:	4802      	ldr	r0, [pc, #8]	; (800705c <__sfp_lock_acquire+0xc>)
 8007054:	f000 fa22 	bl	800749c <__retarget_lock_acquire_recursive>
 8007058:	bd10      	pop	{r4, pc}
 800705a:	46c0      	nop			; (mov r8, r8)
 800705c:	200014bd 	.word	0x200014bd

08007060 <__sfp_lock_release>:
 8007060:	b510      	push	{r4, lr}
 8007062:	4802      	ldr	r0, [pc, #8]	; (800706c <__sfp_lock_release+0xc>)
 8007064:	f000 fa1b 	bl	800749e <__retarget_lock_release_recursive>
 8007068:	bd10      	pop	{r4, pc}
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	200014bd 	.word	0x200014bd

08007070 <__sinit>:
 8007070:	b510      	push	{r4, lr}
 8007072:	0004      	movs	r4, r0
 8007074:	f7ff ffec 	bl	8007050 <__sfp_lock_acquire>
 8007078:	6a23      	ldr	r3, [r4, #32]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <__sinit+0x14>
 800707e:	f7ff ffef 	bl	8007060 <__sfp_lock_release>
 8007082:	bd10      	pop	{r4, pc}
 8007084:	4b04      	ldr	r3, [pc, #16]	; (8007098 <__sinit+0x28>)
 8007086:	6223      	str	r3, [r4, #32]
 8007088:	4b04      	ldr	r3, [pc, #16]	; (800709c <__sinit+0x2c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1f6      	bne.n	800707e <__sinit+0xe>
 8007090:	f7ff ffc0 	bl	8007014 <global_stdio_init.part.0>
 8007094:	e7f3      	b.n	800707e <__sinit+0xe>
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	08006fd9 	.word	0x08006fd9
 800709c:	200014b4 	.word	0x200014b4

080070a0 <_fwalk_sglue>:
 80070a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070a2:	0014      	movs	r4, r2
 80070a4:	2600      	movs	r6, #0
 80070a6:	9000      	str	r0, [sp, #0]
 80070a8:	9101      	str	r1, [sp, #4]
 80070aa:	68a5      	ldr	r5, [r4, #8]
 80070ac:	6867      	ldr	r7, [r4, #4]
 80070ae:	3f01      	subs	r7, #1
 80070b0:	d504      	bpl.n	80070bc <_fwalk_sglue+0x1c>
 80070b2:	6824      	ldr	r4, [r4, #0]
 80070b4:	2c00      	cmp	r4, #0
 80070b6:	d1f8      	bne.n	80070aa <_fwalk_sglue+0xa>
 80070b8:	0030      	movs	r0, r6
 80070ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070bc:	89ab      	ldrh	r3, [r5, #12]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d908      	bls.n	80070d4 <_fwalk_sglue+0x34>
 80070c2:	220e      	movs	r2, #14
 80070c4:	5eab      	ldrsh	r3, [r5, r2]
 80070c6:	3301      	adds	r3, #1
 80070c8:	d004      	beq.n	80070d4 <_fwalk_sglue+0x34>
 80070ca:	0029      	movs	r1, r5
 80070cc:	9800      	ldr	r0, [sp, #0]
 80070ce:	9b01      	ldr	r3, [sp, #4]
 80070d0:	4798      	blx	r3
 80070d2:	4306      	orrs	r6, r0
 80070d4:	3568      	adds	r5, #104	; 0x68
 80070d6:	e7ea      	b.n	80070ae <_fwalk_sglue+0xe>

080070d8 <iprintf>:
 80070d8:	b40f      	push	{r0, r1, r2, r3}
 80070da:	b507      	push	{r0, r1, r2, lr}
 80070dc:	4905      	ldr	r1, [pc, #20]	; (80070f4 <iprintf+0x1c>)
 80070de:	ab04      	add	r3, sp, #16
 80070e0:	6808      	ldr	r0, [r1, #0]
 80070e2:	cb04      	ldmia	r3!, {r2}
 80070e4:	6881      	ldr	r1, [r0, #8]
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	f000 fb0a 	bl	8007700 <_vfiprintf_r>
 80070ec:	b003      	add	sp, #12
 80070ee:	bc08      	pop	{r3}
 80070f0:	b004      	add	sp, #16
 80070f2:	4718      	bx	r3
 80070f4:	20000070 	.word	0x20000070

080070f8 <_puts_r>:
 80070f8:	6a03      	ldr	r3, [r0, #32]
 80070fa:	b570      	push	{r4, r5, r6, lr}
 80070fc:	0005      	movs	r5, r0
 80070fe:	000e      	movs	r6, r1
 8007100:	6884      	ldr	r4, [r0, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <_puts_r+0x12>
 8007106:	f7ff ffb3 	bl	8007070 <__sinit>
 800710a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800710c:	07db      	lsls	r3, r3, #31
 800710e:	d405      	bmi.n	800711c <_puts_r+0x24>
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	059b      	lsls	r3, r3, #22
 8007114:	d402      	bmi.n	800711c <_puts_r+0x24>
 8007116:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007118:	f000 f9c0 	bl	800749c <__retarget_lock_acquire_recursive>
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	071b      	lsls	r3, r3, #28
 8007120:	d502      	bpl.n	8007128 <_puts_r+0x30>
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d11f      	bne.n	8007168 <_puts_r+0x70>
 8007128:	0021      	movs	r1, r4
 800712a:	0028      	movs	r0, r5
 800712c:	f000 f8d2 	bl	80072d4 <__swsetup_r>
 8007130:	2800      	cmp	r0, #0
 8007132:	d019      	beq.n	8007168 <_puts_r+0x70>
 8007134:	2501      	movs	r5, #1
 8007136:	426d      	negs	r5, r5
 8007138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800713a:	07db      	lsls	r3, r3, #31
 800713c:	d405      	bmi.n	800714a <_puts_r+0x52>
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	059b      	lsls	r3, r3, #22
 8007142:	d402      	bmi.n	800714a <_puts_r+0x52>
 8007144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007146:	f000 f9aa 	bl	800749e <__retarget_lock_release_recursive>
 800714a:	0028      	movs	r0, r5
 800714c:	bd70      	pop	{r4, r5, r6, pc}
 800714e:	3601      	adds	r6, #1
 8007150:	60a3      	str	r3, [r4, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	da04      	bge.n	8007160 <_puts_r+0x68>
 8007156:	69a2      	ldr	r2, [r4, #24]
 8007158:	429a      	cmp	r2, r3
 800715a:	dc16      	bgt.n	800718a <_puts_r+0x92>
 800715c:	290a      	cmp	r1, #10
 800715e:	d014      	beq.n	800718a <_puts_r+0x92>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	6022      	str	r2, [r4, #0]
 8007166:	7019      	strb	r1, [r3, #0]
 8007168:	68a3      	ldr	r3, [r4, #8]
 800716a:	7831      	ldrb	r1, [r6, #0]
 800716c:	3b01      	subs	r3, #1
 800716e:	2900      	cmp	r1, #0
 8007170:	d1ed      	bne.n	800714e <_puts_r+0x56>
 8007172:	60a3      	str	r3, [r4, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	da0f      	bge.n	8007198 <_puts_r+0xa0>
 8007178:	0028      	movs	r0, r5
 800717a:	0022      	movs	r2, r4
 800717c:	310a      	adds	r1, #10
 800717e:	f000 f867 	bl	8007250 <__swbuf_r>
 8007182:	250a      	movs	r5, #10
 8007184:	3001      	adds	r0, #1
 8007186:	d1d7      	bne.n	8007138 <_puts_r+0x40>
 8007188:	e7d4      	b.n	8007134 <_puts_r+0x3c>
 800718a:	0022      	movs	r2, r4
 800718c:	0028      	movs	r0, r5
 800718e:	f000 f85f 	bl	8007250 <__swbuf_r>
 8007192:	3001      	adds	r0, #1
 8007194:	d1e8      	bne.n	8007168 <_puts_r+0x70>
 8007196:	e7cd      	b.n	8007134 <_puts_r+0x3c>
 8007198:	250a      	movs	r5, #10
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	6022      	str	r2, [r4, #0]
 80071a0:	701d      	strb	r5, [r3, #0]
 80071a2:	e7c9      	b.n	8007138 <_puts_r+0x40>

080071a4 <puts>:
 80071a4:	b510      	push	{r4, lr}
 80071a6:	4b03      	ldr	r3, [pc, #12]	; (80071b4 <puts+0x10>)
 80071a8:	0001      	movs	r1, r0
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	f7ff ffa4 	bl	80070f8 <_puts_r>
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20000070 	.word	0x20000070

080071b8 <__sread>:
 80071b8:	b570      	push	{r4, r5, r6, lr}
 80071ba:	000c      	movs	r4, r1
 80071bc:	250e      	movs	r5, #14
 80071be:	5f49      	ldrsh	r1, [r1, r5]
 80071c0:	f000 f91a 	bl	80073f8 <_read_r>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	db03      	blt.n	80071d0 <__sread+0x18>
 80071c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80071ca:	181b      	adds	r3, r3, r0
 80071cc:	6563      	str	r3, [r4, #84]	; 0x54
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	4a02      	ldr	r2, [pc, #8]	; (80071dc <__sread+0x24>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	81a3      	strh	r3, [r4, #12]
 80071d8:	e7f9      	b.n	80071ce <__sread+0x16>
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	ffffefff 	.word	0xffffefff

080071e0 <__swrite>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	001f      	movs	r7, r3
 80071e4:	898b      	ldrh	r3, [r1, #12]
 80071e6:	0005      	movs	r5, r0
 80071e8:	000c      	movs	r4, r1
 80071ea:	0016      	movs	r6, r2
 80071ec:	05db      	lsls	r3, r3, #23
 80071ee:	d505      	bpl.n	80071fc <__swrite+0x1c>
 80071f0:	230e      	movs	r3, #14
 80071f2:	5ec9      	ldrsh	r1, [r1, r3]
 80071f4:	2200      	movs	r2, #0
 80071f6:	2302      	movs	r3, #2
 80071f8:	f000 f8ea 	bl	80073d0 <_lseek_r>
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	4a05      	ldr	r2, [pc, #20]	; (8007214 <__swrite+0x34>)
 8007200:	0028      	movs	r0, r5
 8007202:	4013      	ands	r3, r2
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	0032      	movs	r2, r6
 8007208:	230e      	movs	r3, #14
 800720a:	5ee1      	ldrsh	r1, [r4, r3]
 800720c:	003b      	movs	r3, r7
 800720e:	f000 f907 	bl	8007420 <_write_r>
 8007212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007214:	ffffefff 	.word	0xffffefff

08007218 <__sseek>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	000c      	movs	r4, r1
 800721c:	250e      	movs	r5, #14
 800721e:	5f49      	ldrsh	r1, [r1, r5]
 8007220:	f000 f8d6 	bl	80073d0 <_lseek_r>
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	1c42      	adds	r2, r0, #1
 8007228:	d103      	bne.n	8007232 <__sseek+0x1a>
 800722a:	4a05      	ldr	r2, [pc, #20]	; (8007240 <__sseek+0x28>)
 800722c:	4013      	ands	r3, r2
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	bd70      	pop	{r4, r5, r6, pc}
 8007232:	2280      	movs	r2, #128	; 0x80
 8007234:	0152      	lsls	r2, r2, #5
 8007236:	4313      	orrs	r3, r2
 8007238:	81a3      	strh	r3, [r4, #12]
 800723a:	6560      	str	r0, [r4, #84]	; 0x54
 800723c:	e7f8      	b.n	8007230 <__sseek+0x18>
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	ffffefff 	.word	0xffffefff

08007244 <__sclose>:
 8007244:	b510      	push	{r4, lr}
 8007246:	230e      	movs	r3, #14
 8007248:	5ec9      	ldrsh	r1, [r1, r3]
 800724a:	f000 f8af 	bl	80073ac <_close_r>
 800724e:	bd10      	pop	{r4, pc}

08007250 <__swbuf_r>:
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	0006      	movs	r6, r0
 8007254:	000d      	movs	r5, r1
 8007256:	0014      	movs	r4, r2
 8007258:	2800      	cmp	r0, #0
 800725a:	d004      	beq.n	8007266 <__swbuf_r+0x16>
 800725c:	6a03      	ldr	r3, [r0, #32]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <__swbuf_r+0x16>
 8007262:	f7ff ff05 	bl	8007070 <__sinit>
 8007266:	69a3      	ldr	r3, [r4, #24]
 8007268:	60a3      	str	r3, [r4, #8]
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	071b      	lsls	r3, r3, #28
 800726e:	d528      	bpl.n	80072c2 <__swbuf_r+0x72>
 8007270:	6923      	ldr	r3, [r4, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d025      	beq.n	80072c2 <__swbuf_r+0x72>
 8007276:	6923      	ldr	r3, [r4, #16]
 8007278:	6820      	ldr	r0, [r4, #0]
 800727a:	b2ef      	uxtb	r7, r5
 800727c:	1ac0      	subs	r0, r0, r3
 800727e:	6963      	ldr	r3, [r4, #20]
 8007280:	b2ed      	uxtb	r5, r5
 8007282:	4283      	cmp	r3, r0
 8007284:	dc05      	bgt.n	8007292 <__swbuf_r+0x42>
 8007286:	0021      	movs	r1, r4
 8007288:	0030      	movs	r0, r6
 800728a:	f000 fd5f 	bl	8007d4c <_fflush_r>
 800728e:	2800      	cmp	r0, #0
 8007290:	d11d      	bne.n	80072ce <__swbuf_r+0x7e>
 8007292:	68a3      	ldr	r3, [r4, #8]
 8007294:	3001      	adds	r0, #1
 8007296:	3b01      	subs	r3, #1
 8007298:	60a3      	str	r3, [r4, #8]
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	6022      	str	r2, [r4, #0]
 80072a0:	701f      	strb	r7, [r3, #0]
 80072a2:	6963      	ldr	r3, [r4, #20]
 80072a4:	4283      	cmp	r3, r0
 80072a6:	d004      	beq.n	80072b2 <__swbuf_r+0x62>
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	07db      	lsls	r3, r3, #31
 80072ac:	d507      	bpl.n	80072be <__swbuf_r+0x6e>
 80072ae:	2d0a      	cmp	r5, #10
 80072b0:	d105      	bne.n	80072be <__swbuf_r+0x6e>
 80072b2:	0021      	movs	r1, r4
 80072b4:	0030      	movs	r0, r6
 80072b6:	f000 fd49 	bl	8007d4c <_fflush_r>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d107      	bne.n	80072ce <__swbuf_r+0x7e>
 80072be:	0028      	movs	r0, r5
 80072c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c2:	0021      	movs	r1, r4
 80072c4:	0030      	movs	r0, r6
 80072c6:	f000 f805 	bl	80072d4 <__swsetup_r>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d0d3      	beq.n	8007276 <__swbuf_r+0x26>
 80072ce:	2501      	movs	r5, #1
 80072d0:	426d      	negs	r5, r5
 80072d2:	e7f4      	b.n	80072be <__swbuf_r+0x6e>

080072d4 <__swsetup_r>:
 80072d4:	4b30      	ldr	r3, [pc, #192]	; (8007398 <__swsetup_r+0xc4>)
 80072d6:	b570      	push	{r4, r5, r6, lr}
 80072d8:	0005      	movs	r5, r0
 80072da:	6818      	ldr	r0, [r3, #0]
 80072dc:	000c      	movs	r4, r1
 80072de:	2800      	cmp	r0, #0
 80072e0:	d004      	beq.n	80072ec <__swsetup_r+0x18>
 80072e2:	6a03      	ldr	r3, [r0, #32]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <__swsetup_r+0x18>
 80072e8:	f7ff fec2 	bl	8007070 <__sinit>
 80072ec:	230c      	movs	r3, #12
 80072ee:	5ee2      	ldrsh	r2, [r4, r3]
 80072f0:	b293      	uxth	r3, r2
 80072f2:	0711      	lsls	r1, r2, #28
 80072f4:	d423      	bmi.n	800733e <__swsetup_r+0x6a>
 80072f6:	06d9      	lsls	r1, r3, #27
 80072f8:	d407      	bmi.n	800730a <__swsetup_r+0x36>
 80072fa:	2309      	movs	r3, #9
 80072fc:	2001      	movs	r0, #1
 80072fe:	602b      	str	r3, [r5, #0]
 8007300:	3337      	adds	r3, #55	; 0x37
 8007302:	4313      	orrs	r3, r2
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	4240      	negs	r0, r0
 8007308:	bd70      	pop	{r4, r5, r6, pc}
 800730a:	075b      	lsls	r3, r3, #29
 800730c:	d513      	bpl.n	8007336 <__swsetup_r+0x62>
 800730e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007310:	2900      	cmp	r1, #0
 8007312:	d008      	beq.n	8007326 <__swsetup_r+0x52>
 8007314:	0023      	movs	r3, r4
 8007316:	3344      	adds	r3, #68	; 0x44
 8007318:	4299      	cmp	r1, r3
 800731a:	d002      	beq.n	8007322 <__swsetup_r+0x4e>
 800731c:	0028      	movs	r0, r5
 800731e:	f000 f8c9 	bl	80074b4 <_free_r>
 8007322:	2300      	movs	r3, #0
 8007324:	6363      	str	r3, [r4, #52]	; 0x34
 8007326:	2224      	movs	r2, #36	; 0x24
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	4393      	bics	r3, r2
 800732c:	81a3      	strh	r3, [r4, #12]
 800732e:	2300      	movs	r3, #0
 8007330:	6063      	str	r3, [r4, #4]
 8007332:	6923      	ldr	r3, [r4, #16]
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	2308      	movs	r3, #8
 8007338:	89a2      	ldrh	r2, [r4, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	81a3      	strh	r3, [r4, #12]
 800733e:	6923      	ldr	r3, [r4, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10b      	bne.n	800735c <__swsetup_r+0x88>
 8007344:	21a0      	movs	r1, #160	; 0xa0
 8007346:	2280      	movs	r2, #128	; 0x80
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	0089      	lsls	r1, r1, #2
 800734c:	0092      	lsls	r2, r2, #2
 800734e:	400b      	ands	r3, r1
 8007350:	4293      	cmp	r3, r2
 8007352:	d003      	beq.n	800735c <__swsetup_r+0x88>
 8007354:	0021      	movs	r1, r4
 8007356:	0028      	movs	r0, r5
 8007358:	f000 fd4c 	bl	8007df4 <__smakebuf_r>
 800735c:	220c      	movs	r2, #12
 800735e:	5ea3      	ldrsh	r3, [r4, r2]
 8007360:	2001      	movs	r0, #1
 8007362:	001a      	movs	r2, r3
 8007364:	b299      	uxth	r1, r3
 8007366:	4002      	ands	r2, r0
 8007368:	4203      	tst	r3, r0
 800736a:	d00f      	beq.n	800738c <__swsetup_r+0xb8>
 800736c:	2200      	movs	r2, #0
 800736e:	60a2      	str	r2, [r4, #8]
 8007370:	6962      	ldr	r2, [r4, #20]
 8007372:	4252      	negs	r2, r2
 8007374:	61a2      	str	r2, [r4, #24]
 8007376:	2000      	movs	r0, #0
 8007378:	6922      	ldr	r2, [r4, #16]
 800737a:	4282      	cmp	r2, r0
 800737c:	d1c4      	bne.n	8007308 <__swsetup_r+0x34>
 800737e:	0609      	lsls	r1, r1, #24
 8007380:	d5c2      	bpl.n	8007308 <__swsetup_r+0x34>
 8007382:	2240      	movs	r2, #64	; 0x40
 8007384:	4313      	orrs	r3, r2
 8007386:	81a3      	strh	r3, [r4, #12]
 8007388:	3801      	subs	r0, #1
 800738a:	e7bd      	b.n	8007308 <__swsetup_r+0x34>
 800738c:	0788      	lsls	r0, r1, #30
 800738e:	d400      	bmi.n	8007392 <__swsetup_r+0xbe>
 8007390:	6962      	ldr	r2, [r4, #20]
 8007392:	60a2      	str	r2, [r4, #8]
 8007394:	e7ef      	b.n	8007376 <__swsetup_r+0xa2>
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	20000070 	.word	0x20000070

0800739c <memset>:
 800739c:	0003      	movs	r3, r0
 800739e:	1882      	adds	r2, r0, r2
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d100      	bne.n	80073a6 <memset+0xa>
 80073a4:	4770      	bx	lr
 80073a6:	7019      	strb	r1, [r3, #0]
 80073a8:	3301      	adds	r3, #1
 80073aa:	e7f9      	b.n	80073a0 <memset+0x4>

080073ac <_close_r>:
 80073ac:	2300      	movs	r3, #0
 80073ae:	b570      	push	{r4, r5, r6, lr}
 80073b0:	4d06      	ldr	r5, [pc, #24]	; (80073cc <_close_r+0x20>)
 80073b2:	0004      	movs	r4, r0
 80073b4:	0008      	movs	r0, r1
 80073b6:	602b      	str	r3, [r5, #0]
 80073b8:	f7f9 fbb5 	bl	8000b26 <_close>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d103      	bne.n	80073c8 <_close_r+0x1c>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d000      	beq.n	80073c8 <_close_r+0x1c>
 80073c6:	6023      	str	r3, [r4, #0]
 80073c8:	bd70      	pop	{r4, r5, r6, pc}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	200014b8 	.word	0x200014b8

080073d0 <_lseek_r>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	0004      	movs	r4, r0
 80073d4:	0008      	movs	r0, r1
 80073d6:	0011      	movs	r1, r2
 80073d8:	001a      	movs	r2, r3
 80073da:	2300      	movs	r3, #0
 80073dc:	4d05      	ldr	r5, [pc, #20]	; (80073f4 <_lseek_r+0x24>)
 80073de:	602b      	str	r3, [r5, #0]
 80073e0:	f7f9 fbc2 	bl	8000b68 <_lseek>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d103      	bne.n	80073f0 <_lseek_r+0x20>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d000      	beq.n	80073f0 <_lseek_r+0x20>
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	bd70      	pop	{r4, r5, r6, pc}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	200014b8 	.word	0x200014b8

080073f8 <_read_r>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	0004      	movs	r4, r0
 80073fc:	0008      	movs	r0, r1
 80073fe:	0011      	movs	r1, r2
 8007400:	001a      	movs	r2, r3
 8007402:	2300      	movs	r3, #0
 8007404:	4d05      	ldr	r5, [pc, #20]	; (800741c <_read_r+0x24>)
 8007406:	602b      	str	r3, [r5, #0]
 8007408:	f7f9 fb54 	bl	8000ab4 <_read>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d103      	bne.n	8007418 <_read_r+0x20>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d000      	beq.n	8007418 <_read_r+0x20>
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	bd70      	pop	{r4, r5, r6, pc}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	200014b8 	.word	0x200014b8

08007420 <_write_r>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	0004      	movs	r4, r0
 8007424:	0008      	movs	r0, r1
 8007426:	0011      	movs	r1, r2
 8007428:	001a      	movs	r2, r3
 800742a:	2300      	movs	r3, #0
 800742c:	4d05      	ldr	r5, [pc, #20]	; (8007444 <_write_r+0x24>)
 800742e:	602b      	str	r3, [r5, #0]
 8007430:	f7f9 fb5d 	bl	8000aee <_write>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d103      	bne.n	8007440 <_write_r+0x20>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d000      	beq.n	8007440 <_write_r+0x20>
 800743e:	6023      	str	r3, [r4, #0]
 8007440:	bd70      	pop	{r4, r5, r6, pc}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	200014b8 	.word	0x200014b8

08007448 <__errno>:
 8007448:	4b01      	ldr	r3, [pc, #4]	; (8007450 <__errno+0x8>)
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	4770      	bx	lr
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	20000070 	.word	0x20000070

08007454 <__libc_init_array>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	2600      	movs	r6, #0
 8007458:	4c0c      	ldr	r4, [pc, #48]	; (800748c <__libc_init_array+0x38>)
 800745a:	4d0d      	ldr	r5, [pc, #52]	; (8007490 <__libc_init_array+0x3c>)
 800745c:	1b64      	subs	r4, r4, r5
 800745e:	10a4      	asrs	r4, r4, #2
 8007460:	42a6      	cmp	r6, r4
 8007462:	d109      	bne.n	8007478 <__libc_init_array+0x24>
 8007464:	2600      	movs	r6, #0
 8007466:	f000 fd45 	bl	8007ef4 <_init>
 800746a:	4c0a      	ldr	r4, [pc, #40]	; (8007494 <__libc_init_array+0x40>)
 800746c:	4d0a      	ldr	r5, [pc, #40]	; (8007498 <__libc_init_array+0x44>)
 800746e:	1b64      	subs	r4, r4, r5
 8007470:	10a4      	asrs	r4, r4, #2
 8007472:	42a6      	cmp	r6, r4
 8007474:	d105      	bne.n	8007482 <__libc_init_array+0x2e>
 8007476:	bd70      	pop	{r4, r5, r6, pc}
 8007478:	00b3      	lsls	r3, r6, #2
 800747a:	58eb      	ldr	r3, [r5, r3]
 800747c:	4798      	blx	r3
 800747e:	3601      	adds	r6, #1
 8007480:	e7ee      	b.n	8007460 <__libc_init_array+0xc>
 8007482:	00b3      	lsls	r3, r6, #2
 8007484:	58eb      	ldr	r3, [r5, r3]
 8007486:	4798      	blx	r3
 8007488:	3601      	adds	r6, #1
 800748a:	e7f2      	b.n	8007472 <__libc_init_array+0x1e>
 800748c:	08008064 	.word	0x08008064
 8007490:	08008064 	.word	0x08008064
 8007494:	08008068 	.word	0x08008068
 8007498:	08008064 	.word	0x08008064

0800749c <__retarget_lock_acquire_recursive>:
 800749c:	4770      	bx	lr

0800749e <__retarget_lock_release_recursive>:
 800749e:	4770      	bx	lr

080074a0 <memcpy>:
 80074a0:	2300      	movs	r3, #0
 80074a2:	b510      	push	{r4, lr}
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d100      	bne.n	80074aa <memcpy+0xa>
 80074a8:	bd10      	pop	{r4, pc}
 80074aa:	5ccc      	ldrb	r4, [r1, r3]
 80074ac:	54c4      	strb	r4, [r0, r3]
 80074ae:	3301      	adds	r3, #1
 80074b0:	e7f8      	b.n	80074a4 <memcpy+0x4>
	...

080074b4 <_free_r>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	0005      	movs	r5, r0
 80074b8:	2900      	cmp	r1, #0
 80074ba:	d010      	beq.n	80074de <_free_r+0x2a>
 80074bc:	1f0c      	subs	r4, r1, #4
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	da00      	bge.n	80074c6 <_free_r+0x12>
 80074c4:	18e4      	adds	r4, r4, r3
 80074c6:	0028      	movs	r0, r5
 80074c8:	f000 f8e2 	bl	8007690 <__malloc_lock>
 80074cc:	4a1d      	ldr	r2, [pc, #116]	; (8007544 <_free_r+0x90>)
 80074ce:	6813      	ldr	r3, [r2, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d105      	bne.n	80074e0 <_free_r+0x2c>
 80074d4:	6063      	str	r3, [r4, #4]
 80074d6:	6014      	str	r4, [r2, #0]
 80074d8:	0028      	movs	r0, r5
 80074da:	f000 f8e1 	bl	80076a0 <__malloc_unlock>
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	d908      	bls.n	80074f6 <_free_r+0x42>
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	1821      	adds	r1, r4, r0
 80074e8:	428b      	cmp	r3, r1
 80074ea:	d1f3      	bne.n	80074d4 <_free_r+0x20>
 80074ec:	6819      	ldr	r1, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	1809      	adds	r1, r1, r0
 80074f2:	6021      	str	r1, [r4, #0]
 80074f4:	e7ee      	b.n	80074d4 <_free_r+0x20>
 80074f6:	001a      	movs	r2, r3
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <_free_r+0x4e>
 80074fe:	42a3      	cmp	r3, r4
 8007500:	d9f9      	bls.n	80074f6 <_free_r+0x42>
 8007502:	6811      	ldr	r1, [r2, #0]
 8007504:	1850      	adds	r0, r2, r1
 8007506:	42a0      	cmp	r0, r4
 8007508:	d10b      	bne.n	8007522 <_free_r+0x6e>
 800750a:	6820      	ldr	r0, [r4, #0]
 800750c:	1809      	adds	r1, r1, r0
 800750e:	1850      	adds	r0, r2, r1
 8007510:	6011      	str	r1, [r2, #0]
 8007512:	4283      	cmp	r3, r0
 8007514:	d1e0      	bne.n	80074d8 <_free_r+0x24>
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	1841      	adds	r1, r0, r1
 800751c:	6011      	str	r1, [r2, #0]
 800751e:	6053      	str	r3, [r2, #4]
 8007520:	e7da      	b.n	80074d8 <_free_r+0x24>
 8007522:	42a0      	cmp	r0, r4
 8007524:	d902      	bls.n	800752c <_free_r+0x78>
 8007526:	230c      	movs	r3, #12
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	e7d5      	b.n	80074d8 <_free_r+0x24>
 800752c:	6820      	ldr	r0, [r4, #0]
 800752e:	1821      	adds	r1, r4, r0
 8007530:	428b      	cmp	r3, r1
 8007532:	d103      	bne.n	800753c <_free_r+0x88>
 8007534:	6819      	ldr	r1, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	1809      	adds	r1, r1, r0
 800753a:	6021      	str	r1, [r4, #0]
 800753c:	6063      	str	r3, [r4, #4]
 800753e:	6054      	str	r4, [r2, #4]
 8007540:	e7ca      	b.n	80074d8 <_free_r+0x24>
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	200014c0 	.word	0x200014c0

08007548 <sbrk_aligned>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	4e0f      	ldr	r6, [pc, #60]	; (8007588 <sbrk_aligned+0x40>)
 800754c:	000d      	movs	r5, r1
 800754e:	6831      	ldr	r1, [r6, #0]
 8007550:	0004      	movs	r4, r0
 8007552:	2900      	cmp	r1, #0
 8007554:	d102      	bne.n	800755c <sbrk_aligned+0x14>
 8007556:	f000 fcaf 	bl	8007eb8 <_sbrk_r>
 800755a:	6030      	str	r0, [r6, #0]
 800755c:	0029      	movs	r1, r5
 800755e:	0020      	movs	r0, r4
 8007560:	f000 fcaa 	bl	8007eb8 <_sbrk_r>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d00a      	beq.n	800757e <sbrk_aligned+0x36>
 8007568:	2303      	movs	r3, #3
 800756a:	1cc5      	adds	r5, r0, #3
 800756c:	439d      	bics	r5, r3
 800756e:	42a8      	cmp	r0, r5
 8007570:	d007      	beq.n	8007582 <sbrk_aligned+0x3a>
 8007572:	1a29      	subs	r1, r5, r0
 8007574:	0020      	movs	r0, r4
 8007576:	f000 fc9f 	bl	8007eb8 <_sbrk_r>
 800757a:	3001      	adds	r0, #1
 800757c:	d101      	bne.n	8007582 <sbrk_aligned+0x3a>
 800757e:	2501      	movs	r5, #1
 8007580:	426d      	negs	r5, r5
 8007582:	0028      	movs	r0, r5
 8007584:	bd70      	pop	{r4, r5, r6, pc}
 8007586:	46c0      	nop			; (mov r8, r8)
 8007588:	200014c4 	.word	0x200014c4

0800758c <_malloc_r>:
 800758c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800758e:	2203      	movs	r2, #3
 8007590:	1ccb      	adds	r3, r1, #3
 8007592:	4393      	bics	r3, r2
 8007594:	3308      	adds	r3, #8
 8007596:	0006      	movs	r6, r0
 8007598:	001f      	movs	r7, r3
 800759a:	2b0c      	cmp	r3, #12
 800759c:	d238      	bcs.n	8007610 <_malloc_r+0x84>
 800759e:	270c      	movs	r7, #12
 80075a0:	42b9      	cmp	r1, r7
 80075a2:	d837      	bhi.n	8007614 <_malloc_r+0x88>
 80075a4:	0030      	movs	r0, r6
 80075a6:	f000 f873 	bl	8007690 <__malloc_lock>
 80075aa:	4b38      	ldr	r3, [pc, #224]	; (800768c <_malloc_r+0x100>)
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	001c      	movs	r4, r3
 80075b2:	2c00      	cmp	r4, #0
 80075b4:	d133      	bne.n	800761e <_malloc_r+0x92>
 80075b6:	0039      	movs	r1, r7
 80075b8:	0030      	movs	r0, r6
 80075ba:	f7ff ffc5 	bl	8007548 <sbrk_aligned>
 80075be:	0004      	movs	r4, r0
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d15e      	bne.n	8007682 <_malloc_r+0xf6>
 80075c4:	9b00      	ldr	r3, [sp, #0]
 80075c6:	681c      	ldr	r4, [r3, #0]
 80075c8:	0025      	movs	r5, r4
 80075ca:	2d00      	cmp	r5, #0
 80075cc:	d14e      	bne.n	800766c <_malloc_r+0xe0>
 80075ce:	2c00      	cmp	r4, #0
 80075d0:	d051      	beq.n	8007676 <_malloc_r+0xea>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	0029      	movs	r1, r5
 80075d6:	18e3      	adds	r3, r4, r3
 80075d8:	0030      	movs	r0, r6
 80075da:	9301      	str	r3, [sp, #4]
 80075dc:	f000 fc6c 	bl	8007eb8 <_sbrk_r>
 80075e0:	9b01      	ldr	r3, [sp, #4]
 80075e2:	4283      	cmp	r3, r0
 80075e4:	d147      	bne.n	8007676 <_malloc_r+0xea>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	0030      	movs	r0, r6
 80075ea:	1aff      	subs	r7, r7, r3
 80075ec:	0039      	movs	r1, r7
 80075ee:	f7ff ffab 	bl	8007548 <sbrk_aligned>
 80075f2:	3001      	adds	r0, #1
 80075f4:	d03f      	beq.n	8007676 <_malloc_r+0xea>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	19db      	adds	r3, r3, r7
 80075fa:	6023      	str	r3, [r4, #0]
 80075fc:	9b00      	ldr	r3, [sp, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d040      	beq.n	8007686 <_malloc_r+0xfa>
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	42a2      	cmp	r2, r4
 8007608:	d133      	bne.n	8007672 <_malloc_r+0xe6>
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	e014      	b.n	800763a <_malloc_r+0xae>
 8007610:	2b00      	cmp	r3, #0
 8007612:	dac5      	bge.n	80075a0 <_malloc_r+0x14>
 8007614:	230c      	movs	r3, #12
 8007616:	2500      	movs	r5, #0
 8007618:	6033      	str	r3, [r6, #0]
 800761a:	0028      	movs	r0, r5
 800761c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800761e:	6821      	ldr	r1, [r4, #0]
 8007620:	1bc9      	subs	r1, r1, r7
 8007622:	d420      	bmi.n	8007666 <_malloc_r+0xda>
 8007624:	290b      	cmp	r1, #11
 8007626:	d918      	bls.n	800765a <_malloc_r+0xce>
 8007628:	19e2      	adds	r2, r4, r7
 800762a:	6027      	str	r7, [r4, #0]
 800762c:	42a3      	cmp	r3, r4
 800762e:	d112      	bne.n	8007656 <_malloc_r+0xca>
 8007630:	9b00      	ldr	r3, [sp, #0]
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	6011      	str	r1, [r2, #0]
 8007638:	6053      	str	r3, [r2, #4]
 800763a:	0030      	movs	r0, r6
 800763c:	0025      	movs	r5, r4
 800763e:	f000 f82f 	bl	80076a0 <__malloc_unlock>
 8007642:	2207      	movs	r2, #7
 8007644:	350b      	adds	r5, #11
 8007646:	1d23      	adds	r3, r4, #4
 8007648:	4395      	bics	r5, r2
 800764a:	1aea      	subs	r2, r5, r3
 800764c:	429d      	cmp	r5, r3
 800764e:	d0e4      	beq.n	800761a <_malloc_r+0x8e>
 8007650:	1b5b      	subs	r3, r3, r5
 8007652:	50a3      	str	r3, [r4, r2]
 8007654:	e7e1      	b.n	800761a <_malloc_r+0x8e>
 8007656:	605a      	str	r2, [r3, #4]
 8007658:	e7ec      	b.n	8007634 <_malloc_r+0xa8>
 800765a:	6862      	ldr	r2, [r4, #4]
 800765c:	42a3      	cmp	r3, r4
 800765e:	d1d5      	bne.n	800760c <_malloc_r+0x80>
 8007660:	9b00      	ldr	r3, [sp, #0]
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	e7e9      	b.n	800763a <_malloc_r+0xae>
 8007666:	0023      	movs	r3, r4
 8007668:	6864      	ldr	r4, [r4, #4]
 800766a:	e7a2      	b.n	80075b2 <_malloc_r+0x26>
 800766c:	002c      	movs	r4, r5
 800766e:	686d      	ldr	r5, [r5, #4]
 8007670:	e7ab      	b.n	80075ca <_malloc_r+0x3e>
 8007672:	0013      	movs	r3, r2
 8007674:	e7c4      	b.n	8007600 <_malloc_r+0x74>
 8007676:	230c      	movs	r3, #12
 8007678:	0030      	movs	r0, r6
 800767a:	6033      	str	r3, [r6, #0]
 800767c:	f000 f810 	bl	80076a0 <__malloc_unlock>
 8007680:	e7cb      	b.n	800761a <_malloc_r+0x8e>
 8007682:	6027      	str	r7, [r4, #0]
 8007684:	e7d9      	b.n	800763a <_malloc_r+0xae>
 8007686:	605b      	str	r3, [r3, #4]
 8007688:	deff      	udf	#255	; 0xff
 800768a:	46c0      	nop			; (mov r8, r8)
 800768c:	200014c0 	.word	0x200014c0

08007690 <__malloc_lock>:
 8007690:	b510      	push	{r4, lr}
 8007692:	4802      	ldr	r0, [pc, #8]	; (800769c <__malloc_lock+0xc>)
 8007694:	f7ff ff02 	bl	800749c <__retarget_lock_acquire_recursive>
 8007698:	bd10      	pop	{r4, pc}
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	200014bc 	.word	0x200014bc

080076a0 <__malloc_unlock>:
 80076a0:	b510      	push	{r4, lr}
 80076a2:	4802      	ldr	r0, [pc, #8]	; (80076ac <__malloc_unlock+0xc>)
 80076a4:	f7ff fefb 	bl	800749e <__retarget_lock_release_recursive>
 80076a8:	bd10      	pop	{r4, pc}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	200014bc 	.word	0x200014bc

080076b0 <__sfputc_r>:
 80076b0:	6893      	ldr	r3, [r2, #8]
 80076b2:	b510      	push	{r4, lr}
 80076b4:	3b01      	subs	r3, #1
 80076b6:	6093      	str	r3, [r2, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da04      	bge.n	80076c6 <__sfputc_r+0x16>
 80076bc:	6994      	ldr	r4, [r2, #24]
 80076be:	42a3      	cmp	r3, r4
 80076c0:	db07      	blt.n	80076d2 <__sfputc_r+0x22>
 80076c2:	290a      	cmp	r1, #10
 80076c4:	d005      	beq.n	80076d2 <__sfputc_r+0x22>
 80076c6:	6813      	ldr	r3, [r2, #0]
 80076c8:	1c58      	adds	r0, r3, #1
 80076ca:	6010      	str	r0, [r2, #0]
 80076cc:	7019      	strb	r1, [r3, #0]
 80076ce:	0008      	movs	r0, r1
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	f7ff fdbd 	bl	8007250 <__swbuf_r>
 80076d6:	0001      	movs	r1, r0
 80076d8:	e7f9      	b.n	80076ce <__sfputc_r+0x1e>

080076da <__sfputs_r>:
 80076da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076dc:	0006      	movs	r6, r0
 80076de:	000f      	movs	r7, r1
 80076e0:	0014      	movs	r4, r2
 80076e2:	18d5      	adds	r5, r2, r3
 80076e4:	42ac      	cmp	r4, r5
 80076e6:	d101      	bne.n	80076ec <__sfputs_r+0x12>
 80076e8:	2000      	movs	r0, #0
 80076ea:	e007      	b.n	80076fc <__sfputs_r+0x22>
 80076ec:	7821      	ldrb	r1, [r4, #0]
 80076ee:	003a      	movs	r2, r7
 80076f0:	0030      	movs	r0, r6
 80076f2:	f7ff ffdd 	bl	80076b0 <__sfputc_r>
 80076f6:	3401      	adds	r4, #1
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d1f3      	bne.n	80076e4 <__sfputs_r+0xa>
 80076fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007700 <_vfiprintf_r>:
 8007700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007702:	b0a1      	sub	sp, #132	; 0x84
 8007704:	000f      	movs	r7, r1
 8007706:	0015      	movs	r5, r2
 8007708:	001e      	movs	r6, r3
 800770a:	9003      	str	r0, [sp, #12]
 800770c:	2800      	cmp	r0, #0
 800770e:	d004      	beq.n	800771a <_vfiprintf_r+0x1a>
 8007710:	6a03      	ldr	r3, [r0, #32]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <_vfiprintf_r+0x1a>
 8007716:	f7ff fcab 	bl	8007070 <__sinit>
 800771a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800771c:	07db      	lsls	r3, r3, #31
 800771e:	d405      	bmi.n	800772c <_vfiprintf_r+0x2c>
 8007720:	89bb      	ldrh	r3, [r7, #12]
 8007722:	059b      	lsls	r3, r3, #22
 8007724:	d402      	bmi.n	800772c <_vfiprintf_r+0x2c>
 8007726:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007728:	f7ff feb8 	bl	800749c <__retarget_lock_acquire_recursive>
 800772c:	89bb      	ldrh	r3, [r7, #12]
 800772e:	071b      	lsls	r3, r3, #28
 8007730:	d502      	bpl.n	8007738 <_vfiprintf_r+0x38>
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d113      	bne.n	8007760 <_vfiprintf_r+0x60>
 8007738:	0039      	movs	r1, r7
 800773a:	9803      	ldr	r0, [sp, #12]
 800773c:	f7ff fdca 	bl	80072d4 <__swsetup_r>
 8007740:	2800      	cmp	r0, #0
 8007742:	d00d      	beq.n	8007760 <_vfiprintf_r+0x60>
 8007744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007746:	07db      	lsls	r3, r3, #31
 8007748:	d503      	bpl.n	8007752 <_vfiprintf_r+0x52>
 800774a:	2001      	movs	r0, #1
 800774c:	4240      	negs	r0, r0
 800774e:	b021      	add	sp, #132	; 0x84
 8007750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007752:	89bb      	ldrh	r3, [r7, #12]
 8007754:	059b      	lsls	r3, r3, #22
 8007756:	d4f8      	bmi.n	800774a <_vfiprintf_r+0x4a>
 8007758:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800775a:	f7ff fea0 	bl	800749e <__retarget_lock_release_recursive>
 800775e:	e7f4      	b.n	800774a <_vfiprintf_r+0x4a>
 8007760:	2300      	movs	r3, #0
 8007762:	ac08      	add	r4, sp, #32
 8007764:	6163      	str	r3, [r4, #20]
 8007766:	3320      	adds	r3, #32
 8007768:	7663      	strb	r3, [r4, #25]
 800776a:	3310      	adds	r3, #16
 800776c:	76a3      	strb	r3, [r4, #26]
 800776e:	9607      	str	r6, [sp, #28]
 8007770:	002e      	movs	r6, r5
 8007772:	7833      	ldrb	r3, [r6, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <_vfiprintf_r+0x7c>
 8007778:	2b25      	cmp	r3, #37	; 0x25
 800777a:	d148      	bne.n	800780e <_vfiprintf_r+0x10e>
 800777c:	1b73      	subs	r3, r6, r5
 800777e:	9305      	str	r3, [sp, #20]
 8007780:	42ae      	cmp	r6, r5
 8007782:	d00b      	beq.n	800779c <_vfiprintf_r+0x9c>
 8007784:	002a      	movs	r2, r5
 8007786:	0039      	movs	r1, r7
 8007788:	9803      	ldr	r0, [sp, #12]
 800778a:	f7ff ffa6 	bl	80076da <__sfputs_r>
 800778e:	3001      	adds	r0, #1
 8007790:	d100      	bne.n	8007794 <_vfiprintf_r+0x94>
 8007792:	e0af      	b.n	80078f4 <_vfiprintf_r+0x1f4>
 8007794:	6963      	ldr	r3, [r4, #20]
 8007796:	9a05      	ldr	r2, [sp, #20]
 8007798:	189b      	adds	r3, r3, r2
 800779a:	6163      	str	r3, [r4, #20]
 800779c:	7833      	ldrb	r3, [r6, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d100      	bne.n	80077a4 <_vfiprintf_r+0xa4>
 80077a2:	e0a7      	b.n	80078f4 <_vfiprintf_r+0x1f4>
 80077a4:	2201      	movs	r2, #1
 80077a6:	2300      	movs	r3, #0
 80077a8:	4252      	negs	r2, r2
 80077aa:	6062      	str	r2, [r4, #4]
 80077ac:	a904      	add	r1, sp, #16
 80077ae:	3254      	adds	r2, #84	; 0x54
 80077b0:	1852      	adds	r2, r2, r1
 80077b2:	1c75      	adds	r5, r6, #1
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	60e3      	str	r3, [r4, #12]
 80077b8:	60a3      	str	r3, [r4, #8]
 80077ba:	7013      	strb	r3, [r2, #0]
 80077bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80077be:	4b59      	ldr	r3, [pc, #356]	; (8007924 <_vfiprintf_r+0x224>)
 80077c0:	2205      	movs	r2, #5
 80077c2:	0018      	movs	r0, r3
 80077c4:	7829      	ldrb	r1, [r5, #0]
 80077c6:	9305      	str	r3, [sp, #20]
 80077c8:	f000 fb88 	bl	8007edc <memchr>
 80077cc:	1c6e      	adds	r6, r5, #1
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d11f      	bne.n	8007812 <_vfiprintf_r+0x112>
 80077d2:	6822      	ldr	r2, [r4, #0]
 80077d4:	06d3      	lsls	r3, r2, #27
 80077d6:	d504      	bpl.n	80077e2 <_vfiprintf_r+0xe2>
 80077d8:	2353      	movs	r3, #83	; 0x53
 80077da:	a904      	add	r1, sp, #16
 80077dc:	185b      	adds	r3, r3, r1
 80077de:	2120      	movs	r1, #32
 80077e0:	7019      	strb	r1, [r3, #0]
 80077e2:	0713      	lsls	r3, r2, #28
 80077e4:	d504      	bpl.n	80077f0 <_vfiprintf_r+0xf0>
 80077e6:	2353      	movs	r3, #83	; 0x53
 80077e8:	a904      	add	r1, sp, #16
 80077ea:	185b      	adds	r3, r3, r1
 80077ec:	212b      	movs	r1, #43	; 0x2b
 80077ee:	7019      	strb	r1, [r3, #0]
 80077f0:	782b      	ldrb	r3, [r5, #0]
 80077f2:	2b2a      	cmp	r3, #42	; 0x2a
 80077f4:	d016      	beq.n	8007824 <_vfiprintf_r+0x124>
 80077f6:	002e      	movs	r6, r5
 80077f8:	2100      	movs	r1, #0
 80077fa:	200a      	movs	r0, #10
 80077fc:	68e3      	ldr	r3, [r4, #12]
 80077fe:	7832      	ldrb	r2, [r6, #0]
 8007800:	1c75      	adds	r5, r6, #1
 8007802:	3a30      	subs	r2, #48	; 0x30
 8007804:	2a09      	cmp	r2, #9
 8007806:	d94e      	bls.n	80078a6 <_vfiprintf_r+0x1a6>
 8007808:	2900      	cmp	r1, #0
 800780a:	d111      	bne.n	8007830 <_vfiprintf_r+0x130>
 800780c:	e017      	b.n	800783e <_vfiprintf_r+0x13e>
 800780e:	3601      	adds	r6, #1
 8007810:	e7af      	b.n	8007772 <_vfiprintf_r+0x72>
 8007812:	9b05      	ldr	r3, [sp, #20]
 8007814:	6822      	ldr	r2, [r4, #0]
 8007816:	1ac0      	subs	r0, r0, r3
 8007818:	2301      	movs	r3, #1
 800781a:	4083      	lsls	r3, r0
 800781c:	4313      	orrs	r3, r2
 800781e:	0035      	movs	r5, r6
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	e7cc      	b.n	80077be <_vfiprintf_r+0xbe>
 8007824:	9b07      	ldr	r3, [sp, #28]
 8007826:	1d19      	adds	r1, r3, #4
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	9107      	str	r1, [sp, #28]
 800782c:	2b00      	cmp	r3, #0
 800782e:	db01      	blt.n	8007834 <_vfiprintf_r+0x134>
 8007830:	930b      	str	r3, [sp, #44]	; 0x2c
 8007832:	e004      	b.n	800783e <_vfiprintf_r+0x13e>
 8007834:	425b      	negs	r3, r3
 8007836:	60e3      	str	r3, [r4, #12]
 8007838:	2302      	movs	r3, #2
 800783a:	4313      	orrs	r3, r2
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	7833      	ldrb	r3, [r6, #0]
 8007840:	2b2e      	cmp	r3, #46	; 0x2e
 8007842:	d10a      	bne.n	800785a <_vfiprintf_r+0x15a>
 8007844:	7873      	ldrb	r3, [r6, #1]
 8007846:	2b2a      	cmp	r3, #42	; 0x2a
 8007848:	d135      	bne.n	80078b6 <_vfiprintf_r+0x1b6>
 800784a:	9b07      	ldr	r3, [sp, #28]
 800784c:	3602      	adds	r6, #2
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	9207      	str	r2, [sp, #28]
 8007854:	2b00      	cmp	r3, #0
 8007856:	db2b      	blt.n	80078b0 <_vfiprintf_r+0x1b0>
 8007858:	9309      	str	r3, [sp, #36]	; 0x24
 800785a:	4d33      	ldr	r5, [pc, #204]	; (8007928 <_vfiprintf_r+0x228>)
 800785c:	2203      	movs	r2, #3
 800785e:	0028      	movs	r0, r5
 8007860:	7831      	ldrb	r1, [r6, #0]
 8007862:	f000 fb3b 	bl	8007edc <memchr>
 8007866:	2800      	cmp	r0, #0
 8007868:	d006      	beq.n	8007878 <_vfiprintf_r+0x178>
 800786a:	2340      	movs	r3, #64	; 0x40
 800786c:	1b40      	subs	r0, r0, r5
 800786e:	4083      	lsls	r3, r0
 8007870:	6822      	ldr	r2, [r4, #0]
 8007872:	3601      	adds	r6, #1
 8007874:	4313      	orrs	r3, r2
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	7831      	ldrb	r1, [r6, #0]
 800787a:	2206      	movs	r2, #6
 800787c:	482b      	ldr	r0, [pc, #172]	; (800792c <_vfiprintf_r+0x22c>)
 800787e:	1c75      	adds	r5, r6, #1
 8007880:	7621      	strb	r1, [r4, #24]
 8007882:	f000 fb2b 	bl	8007edc <memchr>
 8007886:	2800      	cmp	r0, #0
 8007888:	d043      	beq.n	8007912 <_vfiprintf_r+0x212>
 800788a:	4b29      	ldr	r3, [pc, #164]	; (8007930 <_vfiprintf_r+0x230>)
 800788c:	2b00      	cmp	r3, #0
 800788e:	d125      	bne.n	80078dc <_vfiprintf_r+0x1dc>
 8007890:	2207      	movs	r2, #7
 8007892:	9b07      	ldr	r3, [sp, #28]
 8007894:	3307      	adds	r3, #7
 8007896:	4393      	bics	r3, r2
 8007898:	3308      	adds	r3, #8
 800789a:	9307      	str	r3, [sp, #28]
 800789c:	6963      	ldr	r3, [r4, #20]
 800789e:	9a04      	ldr	r2, [sp, #16]
 80078a0:	189b      	adds	r3, r3, r2
 80078a2:	6163      	str	r3, [r4, #20]
 80078a4:	e764      	b.n	8007770 <_vfiprintf_r+0x70>
 80078a6:	4343      	muls	r3, r0
 80078a8:	002e      	movs	r6, r5
 80078aa:	2101      	movs	r1, #1
 80078ac:	189b      	adds	r3, r3, r2
 80078ae:	e7a6      	b.n	80077fe <_vfiprintf_r+0xfe>
 80078b0:	2301      	movs	r3, #1
 80078b2:	425b      	negs	r3, r3
 80078b4:	e7d0      	b.n	8007858 <_vfiprintf_r+0x158>
 80078b6:	2300      	movs	r3, #0
 80078b8:	200a      	movs	r0, #10
 80078ba:	001a      	movs	r2, r3
 80078bc:	3601      	adds	r6, #1
 80078be:	6063      	str	r3, [r4, #4]
 80078c0:	7831      	ldrb	r1, [r6, #0]
 80078c2:	1c75      	adds	r5, r6, #1
 80078c4:	3930      	subs	r1, #48	; 0x30
 80078c6:	2909      	cmp	r1, #9
 80078c8:	d903      	bls.n	80078d2 <_vfiprintf_r+0x1d2>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0c5      	beq.n	800785a <_vfiprintf_r+0x15a>
 80078ce:	9209      	str	r2, [sp, #36]	; 0x24
 80078d0:	e7c3      	b.n	800785a <_vfiprintf_r+0x15a>
 80078d2:	4342      	muls	r2, r0
 80078d4:	002e      	movs	r6, r5
 80078d6:	2301      	movs	r3, #1
 80078d8:	1852      	adds	r2, r2, r1
 80078da:	e7f1      	b.n	80078c0 <_vfiprintf_r+0x1c0>
 80078dc:	aa07      	add	r2, sp, #28
 80078de:	9200      	str	r2, [sp, #0]
 80078e0:	0021      	movs	r1, r4
 80078e2:	003a      	movs	r2, r7
 80078e4:	4b13      	ldr	r3, [pc, #76]	; (8007934 <_vfiprintf_r+0x234>)
 80078e6:	9803      	ldr	r0, [sp, #12]
 80078e8:	e000      	b.n	80078ec <_vfiprintf_r+0x1ec>
 80078ea:	bf00      	nop
 80078ec:	9004      	str	r0, [sp, #16]
 80078ee:	9b04      	ldr	r3, [sp, #16]
 80078f0:	3301      	adds	r3, #1
 80078f2:	d1d3      	bne.n	800789c <_vfiprintf_r+0x19c>
 80078f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078f6:	07db      	lsls	r3, r3, #31
 80078f8:	d405      	bmi.n	8007906 <_vfiprintf_r+0x206>
 80078fa:	89bb      	ldrh	r3, [r7, #12]
 80078fc:	059b      	lsls	r3, r3, #22
 80078fe:	d402      	bmi.n	8007906 <_vfiprintf_r+0x206>
 8007900:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007902:	f7ff fdcc 	bl	800749e <__retarget_lock_release_recursive>
 8007906:	89bb      	ldrh	r3, [r7, #12]
 8007908:	065b      	lsls	r3, r3, #25
 800790a:	d500      	bpl.n	800790e <_vfiprintf_r+0x20e>
 800790c:	e71d      	b.n	800774a <_vfiprintf_r+0x4a>
 800790e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007910:	e71d      	b.n	800774e <_vfiprintf_r+0x4e>
 8007912:	aa07      	add	r2, sp, #28
 8007914:	9200      	str	r2, [sp, #0]
 8007916:	0021      	movs	r1, r4
 8007918:	003a      	movs	r2, r7
 800791a:	4b06      	ldr	r3, [pc, #24]	; (8007934 <_vfiprintf_r+0x234>)
 800791c:	9803      	ldr	r0, [sp, #12]
 800791e:	f000 f87b 	bl	8007a18 <_printf_i>
 8007922:	e7e3      	b.n	80078ec <_vfiprintf_r+0x1ec>
 8007924:	08008030 	.word	0x08008030
 8007928:	08008036 	.word	0x08008036
 800792c:	0800803a 	.word	0x0800803a
 8007930:	00000000 	.word	0x00000000
 8007934:	080076db 	.word	0x080076db

08007938 <_printf_common>:
 8007938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800793a:	0016      	movs	r6, r2
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	688a      	ldr	r2, [r1, #8]
 8007940:	690b      	ldr	r3, [r1, #16]
 8007942:	000c      	movs	r4, r1
 8007944:	9000      	str	r0, [sp, #0]
 8007946:	4293      	cmp	r3, r2
 8007948:	da00      	bge.n	800794c <_printf_common+0x14>
 800794a:	0013      	movs	r3, r2
 800794c:	0022      	movs	r2, r4
 800794e:	6033      	str	r3, [r6, #0]
 8007950:	3243      	adds	r2, #67	; 0x43
 8007952:	7812      	ldrb	r2, [r2, #0]
 8007954:	2a00      	cmp	r2, #0
 8007956:	d001      	beq.n	800795c <_printf_common+0x24>
 8007958:	3301      	adds	r3, #1
 800795a:	6033      	str	r3, [r6, #0]
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	069b      	lsls	r3, r3, #26
 8007960:	d502      	bpl.n	8007968 <_printf_common+0x30>
 8007962:	6833      	ldr	r3, [r6, #0]
 8007964:	3302      	adds	r3, #2
 8007966:	6033      	str	r3, [r6, #0]
 8007968:	6822      	ldr	r2, [r4, #0]
 800796a:	2306      	movs	r3, #6
 800796c:	0015      	movs	r5, r2
 800796e:	401d      	ands	r5, r3
 8007970:	421a      	tst	r2, r3
 8007972:	d027      	beq.n	80079c4 <_printf_common+0x8c>
 8007974:	0023      	movs	r3, r4
 8007976:	3343      	adds	r3, #67	; 0x43
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	1e5a      	subs	r2, r3, #1
 800797c:	4193      	sbcs	r3, r2
 800797e:	6822      	ldr	r2, [r4, #0]
 8007980:	0692      	lsls	r2, r2, #26
 8007982:	d430      	bmi.n	80079e6 <_printf_common+0xae>
 8007984:	0022      	movs	r2, r4
 8007986:	9901      	ldr	r1, [sp, #4]
 8007988:	9800      	ldr	r0, [sp, #0]
 800798a:	9d08      	ldr	r5, [sp, #32]
 800798c:	3243      	adds	r2, #67	; 0x43
 800798e:	47a8      	blx	r5
 8007990:	3001      	adds	r0, #1
 8007992:	d025      	beq.n	80079e0 <_printf_common+0xa8>
 8007994:	2206      	movs	r2, #6
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	2500      	movs	r5, #0
 800799a:	4013      	ands	r3, r2
 800799c:	2b04      	cmp	r3, #4
 800799e:	d105      	bne.n	80079ac <_printf_common+0x74>
 80079a0:	6833      	ldr	r3, [r6, #0]
 80079a2:	68e5      	ldr	r5, [r4, #12]
 80079a4:	1aed      	subs	r5, r5, r3
 80079a6:	43eb      	mvns	r3, r5
 80079a8:	17db      	asrs	r3, r3, #31
 80079aa:	401d      	ands	r5, r3
 80079ac:	68a3      	ldr	r3, [r4, #8]
 80079ae:	6922      	ldr	r2, [r4, #16]
 80079b0:	4293      	cmp	r3, r2
 80079b2:	dd01      	ble.n	80079b8 <_printf_common+0x80>
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	18ed      	adds	r5, r5, r3
 80079b8:	2600      	movs	r6, #0
 80079ba:	42b5      	cmp	r5, r6
 80079bc:	d120      	bne.n	8007a00 <_printf_common+0xc8>
 80079be:	2000      	movs	r0, #0
 80079c0:	e010      	b.n	80079e4 <_printf_common+0xac>
 80079c2:	3501      	adds	r5, #1
 80079c4:	68e3      	ldr	r3, [r4, #12]
 80079c6:	6832      	ldr	r2, [r6, #0]
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	42ab      	cmp	r3, r5
 80079cc:	ddd2      	ble.n	8007974 <_printf_common+0x3c>
 80079ce:	0022      	movs	r2, r4
 80079d0:	2301      	movs	r3, #1
 80079d2:	9901      	ldr	r1, [sp, #4]
 80079d4:	9800      	ldr	r0, [sp, #0]
 80079d6:	9f08      	ldr	r7, [sp, #32]
 80079d8:	3219      	adds	r2, #25
 80079da:	47b8      	blx	r7
 80079dc:	3001      	adds	r0, #1
 80079de:	d1f0      	bne.n	80079c2 <_printf_common+0x8a>
 80079e0:	2001      	movs	r0, #1
 80079e2:	4240      	negs	r0, r0
 80079e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079e6:	2030      	movs	r0, #48	; 0x30
 80079e8:	18e1      	adds	r1, r4, r3
 80079ea:	3143      	adds	r1, #67	; 0x43
 80079ec:	7008      	strb	r0, [r1, #0]
 80079ee:	0021      	movs	r1, r4
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	3145      	adds	r1, #69	; 0x45
 80079f4:	7809      	ldrb	r1, [r1, #0]
 80079f6:	18a2      	adds	r2, r4, r2
 80079f8:	3243      	adds	r2, #67	; 0x43
 80079fa:	3302      	adds	r3, #2
 80079fc:	7011      	strb	r1, [r2, #0]
 80079fe:	e7c1      	b.n	8007984 <_printf_common+0x4c>
 8007a00:	0022      	movs	r2, r4
 8007a02:	2301      	movs	r3, #1
 8007a04:	9901      	ldr	r1, [sp, #4]
 8007a06:	9800      	ldr	r0, [sp, #0]
 8007a08:	9f08      	ldr	r7, [sp, #32]
 8007a0a:	321a      	adds	r2, #26
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	d0e6      	beq.n	80079e0 <_printf_common+0xa8>
 8007a12:	3601      	adds	r6, #1
 8007a14:	e7d1      	b.n	80079ba <_printf_common+0x82>
	...

08007a18 <_printf_i>:
 8007a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1a:	b08b      	sub	sp, #44	; 0x2c
 8007a1c:	9206      	str	r2, [sp, #24]
 8007a1e:	000a      	movs	r2, r1
 8007a20:	3243      	adds	r2, #67	; 0x43
 8007a22:	9307      	str	r3, [sp, #28]
 8007a24:	9005      	str	r0, [sp, #20]
 8007a26:	9204      	str	r2, [sp, #16]
 8007a28:	7e0a      	ldrb	r2, [r1, #24]
 8007a2a:	000c      	movs	r4, r1
 8007a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a2e:	2a78      	cmp	r2, #120	; 0x78
 8007a30:	d809      	bhi.n	8007a46 <_printf_i+0x2e>
 8007a32:	2a62      	cmp	r2, #98	; 0x62
 8007a34:	d80b      	bhi.n	8007a4e <_printf_i+0x36>
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	d100      	bne.n	8007a3c <_printf_i+0x24>
 8007a3a:	e0be      	b.n	8007bba <_printf_i+0x1a2>
 8007a3c:	497c      	ldr	r1, [pc, #496]	; (8007c30 <_printf_i+0x218>)
 8007a3e:	9103      	str	r1, [sp, #12]
 8007a40:	2a58      	cmp	r2, #88	; 0x58
 8007a42:	d100      	bne.n	8007a46 <_printf_i+0x2e>
 8007a44:	e093      	b.n	8007b6e <_printf_i+0x156>
 8007a46:	0026      	movs	r6, r4
 8007a48:	3642      	adds	r6, #66	; 0x42
 8007a4a:	7032      	strb	r2, [r6, #0]
 8007a4c:	e022      	b.n	8007a94 <_printf_i+0x7c>
 8007a4e:	0010      	movs	r0, r2
 8007a50:	3863      	subs	r0, #99	; 0x63
 8007a52:	2815      	cmp	r0, #21
 8007a54:	d8f7      	bhi.n	8007a46 <_printf_i+0x2e>
 8007a56:	f7f8 fb57 	bl	8000108 <__gnu_thumb1_case_shi>
 8007a5a:	0016      	.short	0x0016
 8007a5c:	fff6001f 	.word	0xfff6001f
 8007a60:	fff6fff6 	.word	0xfff6fff6
 8007a64:	001ffff6 	.word	0x001ffff6
 8007a68:	fff6fff6 	.word	0xfff6fff6
 8007a6c:	fff6fff6 	.word	0xfff6fff6
 8007a70:	003600a3 	.word	0x003600a3
 8007a74:	fff60083 	.word	0xfff60083
 8007a78:	00b4fff6 	.word	0x00b4fff6
 8007a7c:	0036fff6 	.word	0x0036fff6
 8007a80:	fff6fff6 	.word	0xfff6fff6
 8007a84:	0087      	.short	0x0087
 8007a86:	0026      	movs	r6, r4
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	3642      	adds	r6, #66	; 0x42
 8007a8c:	1d11      	adds	r1, r2, #4
 8007a8e:	6019      	str	r1, [r3, #0]
 8007a90:	6813      	ldr	r3, [r2, #0]
 8007a92:	7033      	strb	r3, [r6, #0]
 8007a94:	2301      	movs	r3, #1
 8007a96:	e0a2      	b.n	8007bde <_printf_i+0x1c6>
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	6809      	ldr	r1, [r1, #0]
 8007a9c:	1d02      	adds	r2, r0, #4
 8007a9e:	060d      	lsls	r5, r1, #24
 8007aa0:	d50b      	bpl.n	8007aba <_printf_i+0xa2>
 8007aa2:	6805      	ldr	r5, [r0, #0]
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	da03      	bge.n	8007ab2 <_printf_i+0x9a>
 8007aaa:	232d      	movs	r3, #45	; 0x2d
 8007aac:	9a04      	ldr	r2, [sp, #16]
 8007aae:	426d      	negs	r5, r5
 8007ab0:	7013      	strb	r3, [r2, #0]
 8007ab2:	4b5f      	ldr	r3, [pc, #380]	; (8007c30 <_printf_i+0x218>)
 8007ab4:	270a      	movs	r7, #10
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	e01b      	b.n	8007af2 <_printf_i+0xda>
 8007aba:	6805      	ldr	r5, [r0, #0]
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	0649      	lsls	r1, r1, #25
 8007ac0:	d5f1      	bpl.n	8007aa6 <_printf_i+0x8e>
 8007ac2:	b22d      	sxth	r5, r5
 8007ac4:	e7ef      	b.n	8007aa6 <_printf_i+0x8e>
 8007ac6:	680d      	ldr	r5, [r1, #0]
 8007ac8:	6819      	ldr	r1, [r3, #0]
 8007aca:	1d08      	adds	r0, r1, #4
 8007acc:	6018      	str	r0, [r3, #0]
 8007ace:	062e      	lsls	r6, r5, #24
 8007ad0:	d501      	bpl.n	8007ad6 <_printf_i+0xbe>
 8007ad2:	680d      	ldr	r5, [r1, #0]
 8007ad4:	e003      	b.n	8007ade <_printf_i+0xc6>
 8007ad6:	066d      	lsls	r5, r5, #25
 8007ad8:	d5fb      	bpl.n	8007ad2 <_printf_i+0xba>
 8007ada:	680d      	ldr	r5, [r1, #0]
 8007adc:	b2ad      	uxth	r5, r5
 8007ade:	4b54      	ldr	r3, [pc, #336]	; (8007c30 <_printf_i+0x218>)
 8007ae0:	2708      	movs	r7, #8
 8007ae2:	9303      	str	r3, [sp, #12]
 8007ae4:	2a6f      	cmp	r2, #111	; 0x6f
 8007ae6:	d000      	beq.n	8007aea <_printf_i+0xd2>
 8007ae8:	3702      	adds	r7, #2
 8007aea:	0023      	movs	r3, r4
 8007aec:	2200      	movs	r2, #0
 8007aee:	3343      	adds	r3, #67	; 0x43
 8007af0:	701a      	strb	r2, [r3, #0]
 8007af2:	6863      	ldr	r3, [r4, #4]
 8007af4:	60a3      	str	r3, [r4, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	db03      	blt.n	8007b02 <_printf_i+0xea>
 8007afa:	2104      	movs	r1, #4
 8007afc:	6822      	ldr	r2, [r4, #0]
 8007afe:	438a      	bics	r2, r1
 8007b00:	6022      	str	r2, [r4, #0]
 8007b02:	2d00      	cmp	r5, #0
 8007b04:	d102      	bne.n	8007b0c <_printf_i+0xf4>
 8007b06:	9e04      	ldr	r6, [sp, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <_printf_i+0x10e>
 8007b0c:	9e04      	ldr	r6, [sp, #16]
 8007b0e:	0028      	movs	r0, r5
 8007b10:	0039      	movs	r1, r7
 8007b12:	f7f8 fb89 	bl	8000228 <__aeabi_uidivmod>
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	3e01      	subs	r6, #1
 8007b1a:	5c5b      	ldrb	r3, [r3, r1]
 8007b1c:	7033      	strb	r3, [r6, #0]
 8007b1e:	002b      	movs	r3, r5
 8007b20:	0005      	movs	r5, r0
 8007b22:	429f      	cmp	r7, r3
 8007b24:	d9f3      	bls.n	8007b0e <_printf_i+0xf6>
 8007b26:	2f08      	cmp	r7, #8
 8007b28:	d109      	bne.n	8007b3e <_printf_i+0x126>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	07db      	lsls	r3, r3, #31
 8007b2e:	d506      	bpl.n	8007b3e <_printf_i+0x126>
 8007b30:	6862      	ldr	r2, [r4, #4]
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	dc02      	bgt.n	8007b3e <_printf_i+0x126>
 8007b38:	2330      	movs	r3, #48	; 0x30
 8007b3a:	3e01      	subs	r6, #1
 8007b3c:	7033      	strb	r3, [r6, #0]
 8007b3e:	9b04      	ldr	r3, [sp, #16]
 8007b40:	1b9b      	subs	r3, r3, r6
 8007b42:	6123      	str	r3, [r4, #16]
 8007b44:	9b07      	ldr	r3, [sp, #28]
 8007b46:	0021      	movs	r1, r4
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	9805      	ldr	r0, [sp, #20]
 8007b4c:	9b06      	ldr	r3, [sp, #24]
 8007b4e:	aa09      	add	r2, sp, #36	; 0x24
 8007b50:	f7ff fef2 	bl	8007938 <_printf_common>
 8007b54:	3001      	adds	r0, #1
 8007b56:	d147      	bne.n	8007be8 <_printf_i+0x1d0>
 8007b58:	2001      	movs	r0, #1
 8007b5a:	4240      	negs	r0, r0
 8007b5c:	b00b      	add	sp, #44	; 0x2c
 8007b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b60:	2220      	movs	r2, #32
 8007b62:	6809      	ldr	r1, [r1, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	6022      	str	r2, [r4, #0]
 8007b68:	2278      	movs	r2, #120	; 0x78
 8007b6a:	4932      	ldr	r1, [pc, #200]	; (8007c34 <_printf_i+0x21c>)
 8007b6c:	9103      	str	r1, [sp, #12]
 8007b6e:	0021      	movs	r1, r4
 8007b70:	3145      	adds	r1, #69	; 0x45
 8007b72:	700a      	strb	r2, [r1, #0]
 8007b74:	6819      	ldr	r1, [r3, #0]
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	c920      	ldmia	r1!, {r5}
 8007b7a:	0610      	lsls	r0, r2, #24
 8007b7c:	d402      	bmi.n	8007b84 <_printf_i+0x16c>
 8007b7e:	0650      	lsls	r0, r2, #25
 8007b80:	d500      	bpl.n	8007b84 <_printf_i+0x16c>
 8007b82:	b2ad      	uxth	r5, r5
 8007b84:	6019      	str	r1, [r3, #0]
 8007b86:	07d3      	lsls	r3, r2, #31
 8007b88:	d502      	bpl.n	8007b90 <_printf_i+0x178>
 8007b8a:	2320      	movs	r3, #32
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	2710      	movs	r7, #16
 8007b92:	2d00      	cmp	r5, #0
 8007b94:	d1a9      	bne.n	8007aea <_printf_i+0xd2>
 8007b96:	2220      	movs	r2, #32
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	4393      	bics	r3, r2
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	e7a4      	b.n	8007aea <_printf_i+0xd2>
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	680d      	ldr	r5, [r1, #0]
 8007ba4:	1d10      	adds	r0, r2, #4
 8007ba6:	6949      	ldr	r1, [r1, #20]
 8007ba8:	6018      	str	r0, [r3, #0]
 8007baa:	6813      	ldr	r3, [r2, #0]
 8007bac:	062e      	lsls	r6, r5, #24
 8007bae:	d501      	bpl.n	8007bb4 <_printf_i+0x19c>
 8007bb0:	6019      	str	r1, [r3, #0]
 8007bb2:	e002      	b.n	8007bba <_printf_i+0x1a2>
 8007bb4:	066d      	lsls	r5, r5, #25
 8007bb6:	d5fb      	bpl.n	8007bb0 <_printf_i+0x198>
 8007bb8:	8019      	strh	r1, [r3, #0]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9e04      	ldr	r6, [sp, #16]
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	e7c0      	b.n	8007b44 <_printf_i+0x12c>
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	1d11      	adds	r1, r2, #4
 8007bc6:	6019      	str	r1, [r3, #0]
 8007bc8:	6816      	ldr	r6, [r2, #0]
 8007bca:	2100      	movs	r1, #0
 8007bcc:	0030      	movs	r0, r6
 8007bce:	6862      	ldr	r2, [r4, #4]
 8007bd0:	f000 f984 	bl	8007edc <memchr>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d001      	beq.n	8007bdc <_printf_i+0x1c4>
 8007bd8:	1b80      	subs	r0, r0, r6
 8007bda:	6060      	str	r0, [r4, #4]
 8007bdc:	6863      	ldr	r3, [r4, #4]
 8007bde:	6123      	str	r3, [r4, #16]
 8007be0:	2300      	movs	r3, #0
 8007be2:	9a04      	ldr	r2, [sp, #16]
 8007be4:	7013      	strb	r3, [r2, #0]
 8007be6:	e7ad      	b.n	8007b44 <_printf_i+0x12c>
 8007be8:	0032      	movs	r2, r6
 8007bea:	6923      	ldr	r3, [r4, #16]
 8007bec:	9906      	ldr	r1, [sp, #24]
 8007bee:	9805      	ldr	r0, [sp, #20]
 8007bf0:	9d07      	ldr	r5, [sp, #28]
 8007bf2:	47a8      	blx	r5
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d0af      	beq.n	8007b58 <_printf_i+0x140>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	079b      	lsls	r3, r3, #30
 8007bfc:	d415      	bmi.n	8007c2a <_printf_i+0x212>
 8007bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c00:	68e0      	ldr	r0, [r4, #12]
 8007c02:	4298      	cmp	r0, r3
 8007c04:	daaa      	bge.n	8007b5c <_printf_i+0x144>
 8007c06:	0018      	movs	r0, r3
 8007c08:	e7a8      	b.n	8007b5c <_printf_i+0x144>
 8007c0a:	0022      	movs	r2, r4
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	9906      	ldr	r1, [sp, #24]
 8007c10:	9805      	ldr	r0, [sp, #20]
 8007c12:	9e07      	ldr	r6, [sp, #28]
 8007c14:	3219      	adds	r2, #25
 8007c16:	47b0      	blx	r6
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d09d      	beq.n	8007b58 <_printf_i+0x140>
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	68e3      	ldr	r3, [r4, #12]
 8007c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	42ab      	cmp	r3, r5
 8007c26:	dcf0      	bgt.n	8007c0a <_printf_i+0x1f2>
 8007c28:	e7e9      	b.n	8007bfe <_printf_i+0x1e6>
 8007c2a:	2500      	movs	r5, #0
 8007c2c:	e7f7      	b.n	8007c1e <_printf_i+0x206>
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	08008041 	.word	0x08008041
 8007c34:	08008052 	.word	0x08008052

08007c38 <__sflush_r>:
 8007c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c3a:	898b      	ldrh	r3, [r1, #12]
 8007c3c:	0005      	movs	r5, r0
 8007c3e:	000c      	movs	r4, r1
 8007c40:	071a      	lsls	r2, r3, #28
 8007c42:	d45c      	bmi.n	8007cfe <__sflush_r+0xc6>
 8007c44:	684a      	ldr	r2, [r1, #4]
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	dc04      	bgt.n	8007c54 <__sflush_r+0x1c>
 8007c4a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007c4c:	2a00      	cmp	r2, #0
 8007c4e:	dc01      	bgt.n	8007c54 <__sflush_r+0x1c>
 8007c50:	2000      	movs	r0, #0
 8007c52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c54:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007c56:	2f00      	cmp	r7, #0
 8007c58:	d0fa      	beq.n	8007c50 <__sflush_r+0x18>
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2080      	movs	r0, #128	; 0x80
 8007c5e:	682e      	ldr	r6, [r5, #0]
 8007c60:	602a      	str	r2, [r5, #0]
 8007c62:	001a      	movs	r2, r3
 8007c64:	0140      	lsls	r0, r0, #5
 8007c66:	6a21      	ldr	r1, [r4, #32]
 8007c68:	4002      	ands	r2, r0
 8007c6a:	4203      	tst	r3, r0
 8007c6c:	d034      	beq.n	8007cd8 <__sflush_r+0xa0>
 8007c6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	075b      	lsls	r3, r3, #29
 8007c74:	d506      	bpl.n	8007c84 <__sflush_r+0x4c>
 8007c76:	6863      	ldr	r3, [r4, #4]
 8007c78:	1ac0      	subs	r0, r0, r3
 8007c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <__sflush_r+0x4c>
 8007c80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c82:	1ac0      	subs	r0, r0, r3
 8007c84:	0002      	movs	r2, r0
 8007c86:	2300      	movs	r3, #0
 8007c88:	0028      	movs	r0, r5
 8007c8a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007c8c:	6a21      	ldr	r1, [r4, #32]
 8007c8e:	47b8      	blx	r7
 8007c90:	89a2      	ldrh	r2, [r4, #12]
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d106      	bne.n	8007ca4 <__sflush_r+0x6c>
 8007c96:	6829      	ldr	r1, [r5, #0]
 8007c98:	291d      	cmp	r1, #29
 8007c9a:	d82c      	bhi.n	8007cf6 <__sflush_r+0xbe>
 8007c9c:	4b2a      	ldr	r3, [pc, #168]	; (8007d48 <__sflush_r+0x110>)
 8007c9e:	410b      	asrs	r3, r1
 8007ca0:	07db      	lsls	r3, r3, #31
 8007ca2:	d428      	bmi.n	8007cf6 <__sflush_r+0xbe>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	6063      	str	r3, [r4, #4]
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	6023      	str	r3, [r4, #0]
 8007cac:	04d2      	lsls	r2, r2, #19
 8007cae:	d505      	bpl.n	8007cbc <__sflush_r+0x84>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d102      	bne.n	8007cba <__sflush_r+0x82>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d100      	bne.n	8007cbc <__sflush_r+0x84>
 8007cba:	6560      	str	r0, [r4, #84]	; 0x54
 8007cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cbe:	602e      	str	r6, [r5, #0]
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	d0c5      	beq.n	8007c50 <__sflush_r+0x18>
 8007cc4:	0023      	movs	r3, r4
 8007cc6:	3344      	adds	r3, #68	; 0x44
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	d002      	beq.n	8007cd2 <__sflush_r+0x9a>
 8007ccc:	0028      	movs	r0, r5
 8007cce:	f7ff fbf1 	bl	80074b4 <_free_r>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	6360      	str	r0, [r4, #52]	; 0x34
 8007cd6:	e7bc      	b.n	8007c52 <__sflush_r+0x1a>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	0028      	movs	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	d1c6      	bne.n	8007c70 <__sflush_r+0x38>
 8007ce2:	682b      	ldr	r3, [r5, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0c3      	beq.n	8007c70 <__sflush_r+0x38>
 8007ce8:	2b1d      	cmp	r3, #29
 8007cea:	d001      	beq.n	8007cf0 <__sflush_r+0xb8>
 8007cec:	2b16      	cmp	r3, #22
 8007cee:	d101      	bne.n	8007cf4 <__sflush_r+0xbc>
 8007cf0:	602e      	str	r6, [r5, #0]
 8007cf2:	e7ad      	b.n	8007c50 <__sflush_r+0x18>
 8007cf4:	89a2      	ldrh	r2, [r4, #12]
 8007cf6:	2340      	movs	r3, #64	; 0x40
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	e7a9      	b.n	8007c52 <__sflush_r+0x1a>
 8007cfe:	690e      	ldr	r6, [r1, #16]
 8007d00:	2e00      	cmp	r6, #0
 8007d02:	d0a5      	beq.n	8007c50 <__sflush_r+0x18>
 8007d04:	680f      	ldr	r7, [r1, #0]
 8007d06:	600e      	str	r6, [r1, #0]
 8007d08:	1bba      	subs	r2, r7, r6
 8007d0a:	9201      	str	r2, [sp, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	079b      	lsls	r3, r3, #30
 8007d10:	d100      	bne.n	8007d14 <__sflush_r+0xdc>
 8007d12:	694a      	ldr	r2, [r1, #20]
 8007d14:	60a2      	str	r2, [r4, #8]
 8007d16:	9b01      	ldr	r3, [sp, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dd99      	ble.n	8007c50 <__sflush_r+0x18>
 8007d1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d1e:	0032      	movs	r2, r6
 8007d20:	001f      	movs	r7, r3
 8007d22:	0028      	movs	r0, r5
 8007d24:	9b01      	ldr	r3, [sp, #4]
 8007d26:	6a21      	ldr	r1, [r4, #32]
 8007d28:	47b8      	blx	r7
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	dc06      	bgt.n	8007d3c <__sflush_r+0x104>
 8007d2e:	2340      	movs	r3, #64	; 0x40
 8007d30:	2001      	movs	r0, #1
 8007d32:	89a2      	ldrh	r2, [r4, #12]
 8007d34:	4240      	negs	r0, r0
 8007d36:	4313      	orrs	r3, r2
 8007d38:	81a3      	strh	r3, [r4, #12]
 8007d3a:	e78a      	b.n	8007c52 <__sflush_r+0x1a>
 8007d3c:	9b01      	ldr	r3, [sp, #4]
 8007d3e:	1836      	adds	r6, r6, r0
 8007d40:	1a1b      	subs	r3, r3, r0
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	e7e7      	b.n	8007d16 <__sflush_r+0xde>
 8007d46:	46c0      	nop			; (mov r8, r8)
 8007d48:	dfbffffe 	.word	0xdfbffffe

08007d4c <_fflush_r>:
 8007d4c:	690b      	ldr	r3, [r1, #16]
 8007d4e:	b570      	push	{r4, r5, r6, lr}
 8007d50:	0005      	movs	r5, r0
 8007d52:	000c      	movs	r4, r1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d102      	bne.n	8007d5e <_fflush_r+0x12>
 8007d58:	2500      	movs	r5, #0
 8007d5a:	0028      	movs	r0, r5
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d004      	beq.n	8007d6c <_fflush_r+0x20>
 8007d62:	6a03      	ldr	r3, [r0, #32]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <_fflush_r+0x20>
 8007d68:	f7ff f982 	bl	8007070 <__sinit>
 8007d6c:	220c      	movs	r2, #12
 8007d6e:	5ea3      	ldrsh	r3, [r4, r2]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0f1      	beq.n	8007d58 <_fflush_r+0xc>
 8007d74:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d76:	07d2      	lsls	r2, r2, #31
 8007d78:	d404      	bmi.n	8007d84 <_fflush_r+0x38>
 8007d7a:	059b      	lsls	r3, r3, #22
 8007d7c:	d402      	bmi.n	8007d84 <_fflush_r+0x38>
 8007d7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d80:	f7ff fb8c 	bl	800749c <__retarget_lock_acquire_recursive>
 8007d84:	0028      	movs	r0, r5
 8007d86:	0021      	movs	r1, r4
 8007d88:	f7ff ff56 	bl	8007c38 <__sflush_r>
 8007d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d8e:	0005      	movs	r5, r0
 8007d90:	07db      	lsls	r3, r3, #31
 8007d92:	d4e2      	bmi.n	8007d5a <_fflush_r+0xe>
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	059b      	lsls	r3, r3, #22
 8007d98:	d4df      	bmi.n	8007d5a <_fflush_r+0xe>
 8007d9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d9c:	f7ff fb7f 	bl	800749e <__retarget_lock_release_recursive>
 8007da0:	e7db      	b.n	8007d5a <_fflush_r+0xe>
	...

08007da4 <__swhatbuf_r>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	000e      	movs	r6, r1
 8007da8:	001d      	movs	r5, r3
 8007daa:	230e      	movs	r3, #14
 8007dac:	5ec9      	ldrsh	r1, [r1, r3]
 8007dae:	0014      	movs	r4, r2
 8007db0:	b096      	sub	sp, #88	; 0x58
 8007db2:	2900      	cmp	r1, #0
 8007db4:	da0c      	bge.n	8007dd0 <__swhatbuf_r+0x2c>
 8007db6:	89b2      	ldrh	r2, [r6, #12]
 8007db8:	2380      	movs	r3, #128	; 0x80
 8007dba:	0011      	movs	r1, r2
 8007dbc:	4019      	ands	r1, r3
 8007dbe:	421a      	tst	r2, r3
 8007dc0:	d013      	beq.n	8007dea <__swhatbuf_r+0x46>
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	3b40      	subs	r3, #64	; 0x40
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	6029      	str	r1, [r5, #0]
 8007dca:	6023      	str	r3, [r4, #0]
 8007dcc:	b016      	add	sp, #88	; 0x58
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	466a      	mov	r2, sp
 8007dd2:	f000 f84d 	bl	8007e70 <_fstat_r>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	dbed      	blt.n	8007db6 <__swhatbuf_r+0x12>
 8007dda:	23f0      	movs	r3, #240	; 0xf0
 8007ddc:	9901      	ldr	r1, [sp, #4]
 8007dde:	021b      	lsls	r3, r3, #8
 8007de0:	4019      	ands	r1, r3
 8007de2:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <__swhatbuf_r+0x4c>)
 8007de4:	18c9      	adds	r1, r1, r3
 8007de6:	424b      	negs	r3, r1
 8007de8:	4159      	adcs	r1, r3
 8007dea:	2380      	movs	r3, #128	; 0x80
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	e7ea      	b.n	8007dc6 <__swhatbuf_r+0x22>
 8007df0:	ffffe000 	.word	0xffffe000

08007df4 <__smakebuf_r>:
 8007df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007df6:	2602      	movs	r6, #2
 8007df8:	898b      	ldrh	r3, [r1, #12]
 8007dfa:	0005      	movs	r5, r0
 8007dfc:	000c      	movs	r4, r1
 8007dfe:	4233      	tst	r3, r6
 8007e00:	d006      	beq.n	8007e10 <__smakebuf_r+0x1c>
 8007e02:	0023      	movs	r3, r4
 8007e04:	3347      	adds	r3, #71	; 0x47
 8007e06:	6023      	str	r3, [r4, #0]
 8007e08:	6123      	str	r3, [r4, #16]
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	6163      	str	r3, [r4, #20]
 8007e0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007e10:	466a      	mov	r2, sp
 8007e12:	ab01      	add	r3, sp, #4
 8007e14:	f7ff ffc6 	bl	8007da4 <__swhatbuf_r>
 8007e18:	9900      	ldr	r1, [sp, #0]
 8007e1a:	0007      	movs	r7, r0
 8007e1c:	0028      	movs	r0, r5
 8007e1e:	f7ff fbb5 	bl	800758c <_malloc_r>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d108      	bne.n	8007e38 <__smakebuf_r+0x44>
 8007e26:	220c      	movs	r2, #12
 8007e28:	5ea3      	ldrsh	r3, [r4, r2]
 8007e2a:	059a      	lsls	r2, r3, #22
 8007e2c:	d4ef      	bmi.n	8007e0e <__smakebuf_r+0x1a>
 8007e2e:	2203      	movs	r2, #3
 8007e30:	4393      	bics	r3, r2
 8007e32:	431e      	orrs	r6, r3
 8007e34:	81a6      	strh	r6, [r4, #12]
 8007e36:	e7e4      	b.n	8007e02 <__smakebuf_r+0xe>
 8007e38:	2380      	movs	r3, #128	; 0x80
 8007e3a:	89a2      	ldrh	r2, [r4, #12]
 8007e3c:	6020      	str	r0, [r4, #0]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	81a3      	strh	r3, [r4, #12]
 8007e42:	9b00      	ldr	r3, [sp, #0]
 8007e44:	6120      	str	r0, [r4, #16]
 8007e46:	6163      	str	r3, [r4, #20]
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00c      	beq.n	8007e68 <__smakebuf_r+0x74>
 8007e4e:	0028      	movs	r0, r5
 8007e50:	230e      	movs	r3, #14
 8007e52:	5ee1      	ldrsh	r1, [r4, r3]
 8007e54:	f000 f81e 	bl	8007e94 <_isatty_r>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d005      	beq.n	8007e68 <__smakebuf_r+0x74>
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	89a2      	ldrh	r2, [r4, #12]
 8007e60:	439a      	bics	r2, r3
 8007e62:	3b02      	subs	r3, #2
 8007e64:	4313      	orrs	r3, r2
 8007e66:	81a3      	strh	r3, [r4, #12]
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	433b      	orrs	r3, r7
 8007e6c:	81a3      	strh	r3, [r4, #12]
 8007e6e:	e7ce      	b.n	8007e0e <__smakebuf_r+0x1a>

08007e70 <_fstat_r>:
 8007e70:	2300      	movs	r3, #0
 8007e72:	b570      	push	{r4, r5, r6, lr}
 8007e74:	4d06      	ldr	r5, [pc, #24]	; (8007e90 <_fstat_r+0x20>)
 8007e76:	0004      	movs	r4, r0
 8007e78:	0008      	movs	r0, r1
 8007e7a:	0011      	movs	r1, r2
 8007e7c:	602b      	str	r3, [r5, #0]
 8007e7e:	f7f8 fe5c 	bl	8000b3a <_fstat>
 8007e82:	1c43      	adds	r3, r0, #1
 8007e84:	d103      	bne.n	8007e8e <_fstat_r+0x1e>
 8007e86:	682b      	ldr	r3, [r5, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d000      	beq.n	8007e8e <_fstat_r+0x1e>
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	bd70      	pop	{r4, r5, r6, pc}
 8007e90:	200014b8 	.word	0x200014b8

08007e94 <_isatty_r>:
 8007e94:	2300      	movs	r3, #0
 8007e96:	b570      	push	{r4, r5, r6, lr}
 8007e98:	4d06      	ldr	r5, [pc, #24]	; (8007eb4 <_isatty_r+0x20>)
 8007e9a:	0004      	movs	r4, r0
 8007e9c:	0008      	movs	r0, r1
 8007e9e:	602b      	str	r3, [r5, #0]
 8007ea0:	f7f8 fe59 	bl	8000b56 <_isatty>
 8007ea4:	1c43      	adds	r3, r0, #1
 8007ea6:	d103      	bne.n	8007eb0 <_isatty_r+0x1c>
 8007ea8:	682b      	ldr	r3, [r5, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d000      	beq.n	8007eb0 <_isatty_r+0x1c>
 8007eae:	6023      	str	r3, [r4, #0]
 8007eb0:	bd70      	pop	{r4, r5, r6, pc}
 8007eb2:	46c0      	nop			; (mov r8, r8)
 8007eb4:	200014b8 	.word	0x200014b8

08007eb8 <_sbrk_r>:
 8007eb8:	2300      	movs	r3, #0
 8007eba:	b570      	push	{r4, r5, r6, lr}
 8007ebc:	4d06      	ldr	r5, [pc, #24]	; (8007ed8 <_sbrk_r+0x20>)
 8007ebe:	0004      	movs	r4, r0
 8007ec0:	0008      	movs	r0, r1
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	f7f8 fe5c 	bl	8000b80 <_sbrk>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d103      	bne.n	8007ed4 <_sbrk_r+0x1c>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d000      	beq.n	8007ed4 <_sbrk_r+0x1c>
 8007ed2:	6023      	str	r3, [r4, #0]
 8007ed4:	bd70      	pop	{r4, r5, r6, pc}
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	200014b8 	.word	0x200014b8

08007edc <memchr>:
 8007edc:	b2c9      	uxtb	r1, r1
 8007ede:	1882      	adds	r2, r0, r2
 8007ee0:	4290      	cmp	r0, r2
 8007ee2:	d101      	bne.n	8007ee8 <memchr+0xc>
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	4770      	bx	lr
 8007ee8:	7803      	ldrb	r3, [r0, #0]
 8007eea:	428b      	cmp	r3, r1
 8007eec:	d0fb      	beq.n	8007ee6 <memchr+0xa>
 8007eee:	3001      	adds	r0, #1
 8007ef0:	e7f6      	b.n	8007ee0 <memchr+0x4>
	...

08007ef4 <_init>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	46c0      	nop			; (mov r8, r8)
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr

08007f00 <_fini>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	46c0      	nop			; (mov r8, r8)
 8007f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	469e      	mov	lr, r3
 8007f0a:	4770      	bx	lr
